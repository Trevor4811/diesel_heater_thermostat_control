
diesel_heater_thermostat_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008050  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080081e0  080081e0  000181e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008340  08008340  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008340  08008340  00018340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008348  08008348  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008348  08008348  00018348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800834c  0800834c  0001834c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021e0  20000074  080083c4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002254  080083c4  00022254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000236e3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e8f  00000000  00000000  00043787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d30  00000000  00000000  00047618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bc8  00000000  00000000  00049348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f55  00000000  00000000  0004af10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000201df  00000000  00000000  0004ee65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112375  00000000  00000000  0006f044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001813b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008114  00000000  00000000  0018140c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081c8 	.word	0x080081c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080081c8 	.word	0x080081c8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fce6 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f840 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f9b6 	bl	8000850 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f984 	bl	80007f0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004e8:	f000 f902 	bl	80006f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004ec:	f000 f940 	bl	8000770 <MX_I2C2_Init>
  MX_ADC1_Init();
 80004f0:	f000 f888 	bl	8000604 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f004 fbc2 	bl	8004c7c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of heaterLevelMutex */
  heaterLevelMutexHandle = osMutexNew(&heaterLevelMutex_attributes);
 80004f8:	480f      	ldr	r0, [pc, #60]	; (8000538 <main+0x64>)
 80004fa:	f004 fcb7 	bl	8004e6c <osMutexNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0e      	ldr	r2, [pc, #56]	; (800053c <main+0x68>)
 8000502:	6013      	str	r3, [r2, #0]

  /* creation of errorStateMutex */
  errorStateMutexHandle = osMutexNew(&errorStateMutex_attributes);
 8000504:	480e      	ldr	r0, [pc, #56]	; (8000540 <main+0x6c>)
 8000506:	f004 fcb1 	bl	8004e6c <osMutexNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <main+0x70>)
 800050e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ledTask */
  ledTaskHandle = osThreadNew(StartLedTask, NULL, &ledTask_attributes);
 8000510:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <main+0x74>)
 8000512:	2100      	movs	r1, #0
 8000514:	480d      	ldr	r0, [pc, #52]	; (800054c <main+0x78>)
 8000516:	f004 fbfb 	bl	8004d10 <osThreadNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a0c      	ldr	r2, [pc, #48]	; (8000550 <main+0x7c>)
 800051e:	6013      	str	r3, [r2, #0]

  /* creation of tempRead */
  tempReadHandle = osThreadNew(startTempRead, NULL, &tempRead_attributes);
 8000520:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <main+0x80>)
 8000522:	2100      	movs	r1, #0
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <main+0x84>)
 8000526:	f004 fbf3 	bl	8004d10 <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a0b      	ldr	r2, [pc, #44]	; (800055c <main+0x88>)
 800052e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000530:	f004 fbc8 	bl	8004cc4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	e7fe      	b.n	8000534 <main+0x60>
 8000536:	bf00      	nop
 8000538:	08008278 	.word	0x08008278
 800053c:	20000228 	.word	0x20000228
 8000540:	08008288 	.word	0x08008288
 8000544:	2000022c 	.word	0x2000022c
 8000548:	08008230 	.word	0x08008230
 800054c:	0800091d 	.word	0x0800091d
 8000550:	20000220 	.word	0x20000220
 8000554:	08008254 	.word	0x08008254
 8000558:	08000975 	.word	0x08000975
 800055c:	20000224 	.word	0x20000224

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b096      	sub	sp, #88	; 0x58
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2244      	movs	r2, #68	; 0x44
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f007 fd60 	bl	8008034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	463b      	mov	r3, r7
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000582:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000586:	f002 f869 	bl	800265c <HAL_PWREx_ControlVoltageScaling>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000590:	f000 fa1e 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800059c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059e:	2310      	movs	r3, #16
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a6:	2302      	movs	r3, #2
 80005a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005ae:	230a      	movs	r3, #10
 80005b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005b2:	2307      	movs	r3, #7
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 f8a0 	bl	8002708 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ce:	f000 f9ff 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2303      	movs	r3, #3
 80005d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	2104      	movs	r1, #4
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fc68 	bl	8002ec0 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005f6:	f000 f9eb 	bl	80009d0 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3758      	adds	r7, #88	; 0x58
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	; 0x28
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
 8000624:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000626:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <MX_ADC1_Init+0xe0>)
 8000628:	4a2f      	ldr	r2, [pc, #188]	; (80006e8 <MX_ADC1_Init+0xe4>)
 800062a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800062c:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <MX_ADC1_Init+0xe0>)
 800062e:	2200      	movs	r2, #0
 8000630:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000632:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <MX_ADC1_Init+0xe0>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000638:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <MX_ADC1_Init+0xe0>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800063e:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <MX_ADC1_Init+0xe0>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000644:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <MX_ADC1_Init+0xe0>)
 8000646:	2204      	movs	r2, #4
 8000648:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <MX_ADC1_Init+0xe0>)
 800064c:	2200      	movs	r2, #0
 800064e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000650:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <MX_ADC1_Init+0xe0>)
 8000652:	2200      	movs	r2, #0
 8000654:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000656:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <MX_ADC1_Init+0xe0>)
 8000658:	2201      	movs	r2, #1
 800065a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065c:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <MX_ADC1_Init+0xe0>)
 800065e:	2200      	movs	r2, #0
 8000660:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_ADC1_Init+0xe0>)
 8000666:	2200      	movs	r2, #0
 8000668:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_ADC1_Init+0xe0>)
 800066c:	2200      	movs	r2, #0
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_ADC1_Init+0xe0>)
 8000672:	2200      	movs	r2, #0
 8000674:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_ADC1_Init+0xe0>)
 800067a:	2200      	movs	r2, #0
 800067c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_ADC1_Init+0xe0>)
 8000680:	2200      	movs	r2, #0
 8000682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000686:	4817      	ldr	r0, [pc, #92]	; (80006e4 <MX_ADC1_Init+0xe0>)
 8000688:	f000 fdda 	bl	8001240 <HAL_ADC_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000692:	f000 f99d 	bl	80009d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4810      	ldr	r0, [pc, #64]	; (80006e4 <MX_ADC1_Init+0xe0>)
 80006a2:	f001 fb39 	bl	8001d18 <HAL_ADCEx_MultiModeConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006ac:	f000 f990 	bl	80009d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_ADC1_Init+0xe8>)
 80006b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b4:	2306      	movs	r3, #6
 80006b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006bc:	237f      	movs	r3, #127	; 0x7f
 80006be:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006c0:	2304      	movs	r3, #4
 80006c2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	4619      	mov	r1, r3
 80006cc:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_ADC1_Init+0xe0>)
 80006ce:	f000 ff0d 	bl	80014ec <HAL_ADC_ConfigChannel>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006d8:	f000 f97a 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	3728      	adds	r7, #40	; 0x28
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000090 	.word	0x20000090
 80006e8:	50040000 	.word	0x50040000
 80006ec:	04300002 	.word	0x04300002

080006f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_I2C1_Init+0x74>)
 80006f6:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <MX_I2C1_Init+0x78>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_I2C1_Init+0x74>)
 80006fc:	4a1b      	ldr	r2, [pc, #108]	; (800076c <MX_I2C1_Init+0x7c>)
 80006fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_I2C1_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_I2C1_Init+0x74>)
 8000708:	2201      	movs	r2, #1
 800070a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_I2C1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_I2C1_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_I2C1_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_I2C1_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_I2C1_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800072a:	480e      	ldr	r0, [pc, #56]	; (8000764 <MX_I2C1_Init+0x74>)
 800072c:	f001 fe62 	bl	80023f4 <HAL_I2C_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000736:	f000 f94b 	bl	80009d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800073a:	2100      	movs	r1, #0
 800073c:	4809      	ldr	r0, [pc, #36]	; (8000764 <MX_I2C1_Init+0x74>)
 800073e:	f001 fee8 	bl	8002512 <HAL_I2CEx_ConfigAnalogFilter>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000748:	f000 f942 	bl	80009d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800074c:	2100      	movs	r1, #0
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_I2C1_Init+0x74>)
 8000750:	f001 ff2a 	bl	80025a8 <HAL_I2CEx_ConfigDigitalFilter>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800075a:	f000 f939 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000f4 	.word	0x200000f4
 8000768:	40005400 	.word	0x40005400
 800076c:	10909cec 	.word	0x10909cec

08000770 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_I2C2_Init+0x74>)
 8000776:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <MX_I2C2_Init+0x78>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_I2C2_Init+0x74>)
 800077c:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <MX_I2C2_Init+0x7c>)
 800077e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_I2C2_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_I2C2_Init+0x74>)
 8000788:	2201      	movs	r2, #1
 800078a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_I2C2_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_I2C2_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_I2C2_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_I2C2_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_I2C2_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007aa:	480e      	ldr	r0, [pc, #56]	; (80007e4 <MX_I2C2_Init+0x74>)
 80007ac:	f001 fe22 	bl	80023f4 <HAL_I2C_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007b6:	f000 f90b 	bl	80009d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ba:	2100      	movs	r1, #0
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <MX_I2C2_Init+0x74>)
 80007be:	f001 fea8 	bl	8002512 <HAL_I2CEx_ConfigAnalogFilter>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007c8:	f000 f902 	bl	80009d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007cc:	2100      	movs	r1, #0
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_I2C2_Init+0x74>)
 80007d0:	f001 feea 	bl	80025a8 <HAL_I2CEx_ConfigDigitalFilter>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007da:	f000 f8f9 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000148 	.word	0x20000148
 80007e8:	40005800 	.word	0x40005800
 80007ec:	10909cec 	.word	0x10909cec

080007f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_USART2_UART_Init+0x58>)
 80007f6:	4a15      	ldr	r2, [pc, #84]	; (800084c <MX_USART2_UART_Init+0x5c>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_USART2_UART_Init+0x58>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_USART2_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_USART2_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USART2_UART_Init+0x58>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_USART2_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USART2_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_USART2_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_USART2_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_USART2_UART_Init+0x58>)
 8000834:	f003 fd28 	bl	8004288 <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 f8c7 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000019c 	.word	0x2000019c
 800084c:	40004400 	.word	0x40004400

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <MX_GPIO_Init+0xc4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a2a      	ldr	r2, [pc, #168]	; (8000914 <MX_GPIO_Init+0xc4>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b28      	ldr	r3, [pc, #160]	; (8000914 <MX_GPIO_Init+0xc4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	4b25      	ldr	r3, [pc, #148]	; (8000914 <MX_GPIO_Init+0xc4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a24      	ldr	r2, [pc, #144]	; (8000914 <MX_GPIO_Init+0xc4>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_GPIO_Init+0xc4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_GPIO_Init+0xc4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <MX_GPIO_Init+0xc4>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_GPIO_Init+0xc4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_GPIO_Init+0xc4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a18      	ldr	r2, [pc, #96]	; (8000914 <MX_GPIO_Init+0xc4>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_GPIO_Init+0xc4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2120      	movs	r1, #32
 80008ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ce:	f001 fd5f 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	480b      	ldr	r0, [pc, #44]	; (8000918 <MX_GPIO_Init+0xc8>)
 80008ea:	f001 fba7 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ee:	2320      	movs	r3, #32
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000908:	f001 fb98 	bl	800203c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40021000 	.word	0x40021000
 8000918:	48000800 	.word	0x48000800

0800091c <StartLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(errorStateMutexHandle, 100);
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <StartLedTask+0x50>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2164      	movs	r1, #100	; 0x64
 800092a:	4618      	mov	r0, r3
 800092c:	f004 fb24 	bl	8004f78 <osMutexAcquire>
	  	  ERROR_TYPE_t err = errState;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <StartLedTask+0x54>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	73fb      	strb	r3, [r7, #15]
	  	  osMutexRelease(errorStateMutexHandle);
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <StartLedTask+0x50>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f004 fb67 	bl	800500e <osMutexRelease>

	  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000940:	2120      	movs	r1, #32
 8000942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000946:	f001 fd3b 	bl	80023c0 <HAL_GPIO_TogglePin>
	  	  switch(err) {
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d002      	beq.n	8000956 <StartLedTask+0x3a>
 8000950:	2b01      	cmp	r3, #1
 8000952:	d004      	beq.n	800095e <StartLedTask+0x42>
 8000954:	e006      	b.n	8000964 <StartLedTask+0x48>
	  	  	  case ERROR_OK:
	  	  		  osDelay(500);
 8000956:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800095a:	f004 fa6c 	bl	8004e36 <osDelay>
	  	  	  case ERROR_FATAL:
	  	  		  osDelay(100);
 800095e:	2064      	movs	r0, #100	; 0x64
 8000960:	f004 fa69 	bl	8004e36 <osDelay>
	  	  }
	      osDelay(1);
 8000964:	2001      	movs	r0, #1
 8000966:	f004 fa66 	bl	8004e36 <osDelay>
  {
 800096a:	e7db      	b.n	8000924 <StartLedTask+0x8>
 800096c:	2000022c 	.word	0x2000022c
 8000970:	20000230 	.word	0x20000230

08000974 <startTempRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTempRead */
void startTempRead(void *argument)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTempRead */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10000);
 800097c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000980:	f004 fa59 	bl	8004e36 <osDelay>
	  osMutexAcquire(errorStateMutexHandle, 100);
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <startTempRead+0x30>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2164      	movs	r1, #100	; 0x64
 800098a:	4618      	mov	r0, r3
 800098c:	f004 faf4 	bl	8004f78 <osMutexAcquire>
	  	  	  errState = ERROR_FATAL;
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <startTempRead+0x34>)
 8000992:	2201      	movs	r2, #1
 8000994:	701a      	strb	r2, [r3, #0]
	  	  	  osMutexRelease(errorStateMutexHandle);
 8000996:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <startTempRead+0x30>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f004 fb37 	bl	800500e <osMutexRelease>
	  osDelay(10000);
 80009a0:	e7ec      	b.n	800097c <startTempRead+0x8>
 80009a2:	bf00      	nop
 80009a4:	2000022c 	.word	0x2000022c
 80009a8:	20000230 	.word	0x20000230

080009ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d101      	bne.n	80009c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009be:	f000 fa93 	bl	8000ee8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40001000 	.word	0x40001000

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x8>
	...

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_MspInit+0x4c>)
 80009e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <HAL_MspInit+0x4c>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6613      	str	r3, [r2, #96]	; 0x60
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_MspInit+0x4c>)
 80009f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_MspInit+0x4c>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	6593      	str	r3, [r2, #88]	; 0x58
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	210f      	movs	r1, #15
 8000a16:	f06f 0001 	mvn.w	r0, #1
 8000a1a:	f001 fae5 	bl	8001fe8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b0ac      	sub	sp, #176	; 0xb0
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2288      	movs	r2, #136	; 0x88
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f007 faf1 	bl	8008034 <memset>
  if(hadc->Instance==ADC1)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a27      	ldr	r2, [pc, #156]	; (8000af4 <HAL_ADC_MspInit+0xc8>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d146      	bne.n	8000aea <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a60:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a72:	2308      	movs	r3, #8
 8000a74:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a76:	2307      	movs	r3, #7
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a86:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f002 fc6d 	bl	800336c <HAL_RCCEx_PeriphCLKConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000a98:	f7ff ff9a 	bl	80009d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <HAL_ADC_MspInit+0xcc>)
 8000a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa0:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <HAL_ADC_MspInit+0xcc>)
 8000aa2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <HAL_ADC_MspInit+0xcc>)
 8000aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <HAL_ADC_MspInit+0xcc>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab8:	4a0f      	ldr	r2, [pc, #60]	; (8000af8 <HAL_ADC_MspInit+0xcc>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <HAL_ADC_MspInit+0xcc>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000acc:	2303      	movs	r3, #3
 8000ace:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ad2:	230b      	movs	r3, #11
 8000ad4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ade:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <HAL_ADC_MspInit+0xd0>)
 8000ae6:	f001 faa9 	bl	800203c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	37b0      	adds	r7, #176	; 0xb0
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	50040000 	.word	0x50040000
 8000af8:	40021000 	.word	0x40021000
 8000afc:	48000800 	.word	0x48000800

08000b00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0ae      	sub	sp, #184	; 0xb8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	2288      	movs	r2, #136	; 0x88
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f007 fa87 	bl	8008034 <memset>
  if(hi2c->Instance==I2C1)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a42      	ldr	r2, [pc, #264]	; (8000c34 <HAL_I2C_MspInit+0x134>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d13b      	bne.n	8000ba8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b30:	2340      	movs	r3, #64	; 0x40
 8000b32:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f002 fc15 	bl	800336c <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b48:	f7ff ff42 	bl	80009d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4c:	4b3a      	ldr	r3, [pc, #232]	; (8000c38 <HAL_I2C_MspInit+0x138>)
 8000b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b50:	4a39      	ldr	r2, [pc, #228]	; (8000c38 <HAL_I2C_MspInit+0x138>)
 8000b52:	f043 0302 	orr.w	r3, r3, #2
 8000b56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b58:	4b37      	ldr	r3, [pc, #220]	; (8000c38 <HAL_I2C_MspInit+0x138>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5c:	f003 0302 	and.w	r3, r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
 8000b62:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b64:	23c0      	movs	r3, #192	; 0xc0
 8000b66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b6a:	2312      	movs	r3, #18
 8000b6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b76:	2303      	movs	r3, #3
 8000b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b86:	4619      	mov	r1, r3
 8000b88:	482c      	ldr	r0, [pc, #176]	; (8000c3c <HAL_I2C_MspInit+0x13c>)
 8000b8a:	f001 fa57 	bl	800203c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <HAL_I2C_MspInit+0x138>)
 8000b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b92:	4a29      	ldr	r2, [pc, #164]	; (8000c38 <HAL_I2C_MspInit+0x138>)
 8000b94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b98:	6593      	str	r3, [r2, #88]	; 0x58
 8000b9a:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <HAL_I2C_MspInit+0x138>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ba6:	e040      	b.n	8000c2a <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a24      	ldr	r2, [pc, #144]	; (8000c40 <HAL_I2C_MspInit+0x140>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d13b      	bne.n	8000c2a <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f002 fbd4 	bl	800336c <HAL_RCCEx_PeriphCLKConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8000bca:	f7ff ff01 	bl	80009d0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <HAL_I2C_MspInit+0x138>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a19      	ldr	r2, [pc, #100]	; (8000c38 <HAL_I2C_MspInit+0x138>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <HAL_I2C_MspInit+0x138>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000be6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bee:	2312      	movs	r3, #18
 8000bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c00:	2304      	movs	r3, #4
 8000c02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480b      	ldr	r0, [pc, #44]	; (8000c3c <HAL_I2C_MspInit+0x13c>)
 8000c0e:	f001 fa15 	bl	800203c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_I2C_MspInit+0x138>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <HAL_I2C_MspInit+0x138>)
 8000c18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_I2C_MspInit+0x138>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
}
 8000c2a:	bf00      	nop
 8000c2c:	37b8      	adds	r7, #184	; 0xb8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40005400 	.word	0x40005400
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	40005800 	.word	0x40005800

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0ac      	sub	sp, #176	; 0xb0
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2288      	movs	r2, #136	; 0x88
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f007 f9e5 	bl	8008034 <memset>
  if(huart->Instance==USART2)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a21      	ldr	r2, [pc, #132]	; (8000cf4 <HAL_UART_MspInit+0xb0>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d13b      	bne.n	8000cec <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4618      	mov	r0, r3
 8000c82:	f002 fb73 	bl	800336c <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c8c:	f7ff fea0 	bl	80009d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c94:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cc0:	230c      	movs	r3, #12
 8000cc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f001 f9a8 	bl	800203c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cec:	bf00      	nop
 8000cee:	37b0      	adds	r7, #176	; 0xb0
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40004400 	.word	0x40004400
 8000cf8:	40021000 	.word	0x40021000

08000cfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08e      	sub	sp, #56	; 0x38
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d0a:	4b34      	ldr	r3, [pc, #208]	; (8000ddc <HAL_InitTick+0xe0>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	4a33      	ldr	r2, [pc, #204]	; (8000ddc <HAL_InitTick+0xe0>)
 8000d10:	f043 0310 	orr.w	r3, r3, #16
 8000d14:	6593      	str	r3, [r2, #88]	; 0x58
 8000d16:	4b31      	ldr	r3, [pc, #196]	; (8000ddc <HAL_InitTick+0xe0>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1a:	f003 0310 	and.w	r3, r3, #16
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d22:	f107 0210 	add.w	r2, r7, #16
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f002 fa8b 	bl	8003248 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d32:	6a3b      	ldr	r3, [r7, #32]
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d103      	bne.n	8000d44 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d3c:	f002 fa58 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 8000d40:	6378      	str	r0, [r7, #52]	; 0x34
 8000d42:	e004      	b.n	8000d4e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d44:	f002 fa54 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d50:	4a23      	ldr	r2, [pc, #140]	; (8000de0 <HAL_InitTick+0xe4>)
 8000d52:	fba2 2303 	umull	r2, r3, r2, r3
 8000d56:	0c9b      	lsrs	r3, r3, #18
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d5c:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <HAL_InitTick+0xe8>)
 8000d5e:	4a22      	ldr	r2, [pc, #136]	; (8000de8 <HAL_InitTick+0xec>)
 8000d60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <HAL_InitTick+0xe8>)
 8000d64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d68:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d6a:	4a1e      	ldr	r2, [pc, #120]	; (8000de4 <HAL_InitTick+0xe8>)
 8000d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <HAL_InitTick+0xe8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d76:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <HAL_InitTick+0xe8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_InitTick+0xe8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d82:	4818      	ldr	r0, [pc, #96]	; (8000de4 <HAL_InitTick+0xe8>)
 8000d84:	f002 ffae 	bl	8003ce4 <HAL_TIM_Base_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d11b      	bne.n	8000dce <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d96:	4813      	ldr	r0, [pc, #76]	; (8000de4 <HAL_InitTick+0xe8>)
 8000d98:	f003 f806 	bl	8003da8 <HAL_TIM_Base_Start_IT>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000da2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d111      	bne.n	8000dce <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000daa:	2036      	movs	r0, #54	; 0x36
 8000dac:	f001 f938 	bl	8002020 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b0f      	cmp	r3, #15
 8000db4:	d808      	bhi.n	8000dc8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000db6:	2200      	movs	r2, #0
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	2036      	movs	r0, #54	; 0x36
 8000dbc:	f001 f914 	bl	8001fe8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_InitTick+0xf0>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	e002      	b.n	8000dce <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000dce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3738      	adds	r7, #56	; 0x38
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	431bde83 	.word	0x431bde83
 8000de4:	20000234 	.word	0x20000234
 8000de8:	40001000 	.word	0x40001000
 8000dec:	20000004 	.word	0x20000004

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <TIM6_DAC_IRQHandler+0x10>)
 8000e22:	f003 f831 	bl	8003e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000234 	.word	0x20000234

08000e30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e58:	f7ff ffea 	bl	8000e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	; (8000e94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <LoopForever+0xe>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	; (8000ea0 <LoopForever+0x16>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e82:	f007 f8a3 	bl	8007fcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e86:	f7ff fb25 	bl	80004d4 <main>

08000e8a <LoopForever>:

LoopForever:
    b LoopForever
 8000e8a:	e7fe      	b.n	8000e8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e98:	08008350 	.word	0x08008350
  ldr r2, =_sbss
 8000e9c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ea0:	20002254 	.word	0x20002254

08000ea4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC1_2_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_Init+0x3c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <HAL_Init+0x3c>)
 8000eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	f001 f887 	bl	8001fd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ec4:	200f      	movs	r0, #15
 8000ec6:	f7ff ff19 	bl	8000cfc <HAL_InitTick>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	e001      	b.n	8000eda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ed6:	f7ff fd81 	bl	80009dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eda:	79fb      	ldrb	r3, [r7, #7]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40022000 	.word	0x40022000

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000280 	.word	0x20000280

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000280 	.word	0x20000280

08000f28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	609a      	str	r2, [r3, #8]
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	609a      	str	r2, [r3, #8]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3360      	adds	r3, #96	; 0x60
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <LL_ADC_SetOffset+0x44>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fc8:	bf00      	nop
 8000fca:	371c      	adds	r7, #28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	03fff000 	.word	0x03fff000

08000fd8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3360      	adds	r3, #96	; 0x60
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3360      	adds	r3, #96	; 0x60
 8001014:	461a      	mov	r2, r3
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	431a      	orrs	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800102e:	bf00      	nop
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800103a:	b480      	push	{r7}
 800103c:	b087      	sub	sp, #28
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3330      	adds	r3, #48	; 0x30
 800104a:	461a      	mov	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	0a1b      	lsrs	r3, r3, #8
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	4413      	add	r3, r2
 8001058:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	f003 031f 	and.w	r3, r3, #31
 8001064:	211f      	movs	r1, #31
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	401a      	ands	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	0e9b      	lsrs	r3, r3, #26
 8001072:	f003 011f 	and.w	r1, r3, #31
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	f003 031f 	and.w	r3, r3, #31
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	431a      	orrs	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001086:	bf00      	nop
 8001088:	371c      	adds	r7, #28
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001092:	b480      	push	{r7}
 8001094:	b087      	sub	sp, #28
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3314      	adds	r3, #20
 80010a2:	461a      	mov	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	0e5b      	lsrs	r3, r3, #25
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	4413      	add	r3, r2
 80010b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	0d1b      	lsrs	r3, r3, #20
 80010ba:	f003 031f 	and.w	r3, r3, #31
 80010be:	2107      	movs	r1, #7
 80010c0:	fa01 f303 	lsl.w	r3, r1, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	401a      	ands	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	0d1b      	lsrs	r3, r3, #20
 80010cc:	f003 031f 	and.w	r3, r3, #31
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	431a      	orrs	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010dc:	bf00      	nop
 80010de:	371c      	adds	r7, #28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001100:	43db      	mvns	r3, r3
 8001102:	401a      	ands	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0318 	and.w	r3, r3, #24
 800110a:	4908      	ldr	r1, [pc, #32]	; (800112c <LL_ADC_SetChannelSingleDiff+0x44>)
 800110c:	40d9      	lsrs	r1, r3
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	400b      	ands	r3, r1
 8001112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001116:	431a      	orrs	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	0007ffff 	.word	0x0007ffff

08001130 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001140:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	6093      	str	r3, [r2, #8]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001168:	d101      	bne.n	800116e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800118c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001190:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011b8:	d101      	bne.n	80011be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <LL_ADC_IsEnabled+0x18>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <LL_ADC_IsEnabled+0x1a>
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	2b04      	cmp	r3, #4
 8001204:	d101      	bne.n	800120a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	2b08      	cmp	r3, #8
 800122a:	d101      	bne.n	8001230 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800122c:	2301      	movs	r3, #1
 800122e:	e000      	b.n	8001232 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e136      	b.n	80014c8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001264:	2b00      	cmp	r3, #0
 8001266:	d109      	bne.n	800127c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fbdf 	bl	8000a2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff67 	bl	8001154 <LL_ADC_IsDeepPowerDownEnabled>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d004      	beq.n	8001296 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff4d 	bl	8001130 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff82 	bl	80011a4 <LL_ADC_IsInternalRegulatorEnabled>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d115      	bne.n	80012d2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff66 	bl	800117c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012b0:	4b87      	ldr	r3, [pc, #540]	; (80014d0 <HAL_ADC_Init+0x290>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	099b      	lsrs	r3, r3, #6
 80012b6:	4a87      	ldr	r2, [pc, #540]	; (80014d4 <HAL_ADC_Init+0x294>)
 80012b8:	fba2 2303 	umull	r2, r3, r2, r3
 80012bc:	099b      	lsrs	r3, r3, #6
 80012be:	3301      	adds	r3, #1
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012c4:	e002      	b.n	80012cc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f9      	bne.n	80012c6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff64 	bl	80011a4 <LL_ADC_IsInternalRegulatorEnabled>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10d      	bne.n	80012fe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e6:	f043 0210 	orr.w	r2, r3, #16
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f2:	f043 0201 	orr.w	r2, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff75 	bl	80011f2 <LL_ADC_REG_IsConversionOngoing>
 8001308:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800130e:	f003 0310 	and.w	r3, r3, #16
 8001312:	2b00      	cmp	r3, #0
 8001314:	f040 80cf 	bne.w	80014b6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	2b00      	cmp	r3, #0
 800131c:	f040 80cb 	bne.w	80014b6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001324:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001328:	f043 0202 	orr.w	r2, r3, #2
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff49 	bl	80011cc <LL_ADC_IsEnabled>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d115      	bne.n	800136c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001340:	4865      	ldr	r0, [pc, #404]	; (80014d8 <HAL_ADC_Init+0x298>)
 8001342:	f7ff ff43 	bl	80011cc <LL_ADC_IsEnabled>
 8001346:	4604      	mov	r4, r0
 8001348:	4864      	ldr	r0, [pc, #400]	; (80014dc <HAL_ADC_Init+0x29c>)
 800134a:	f7ff ff3f 	bl	80011cc <LL_ADC_IsEnabled>
 800134e:	4603      	mov	r3, r0
 8001350:	431c      	orrs	r4, r3
 8001352:	4863      	ldr	r0, [pc, #396]	; (80014e0 <HAL_ADC_Init+0x2a0>)
 8001354:	f7ff ff3a 	bl	80011cc <LL_ADC_IsEnabled>
 8001358:	4603      	mov	r3, r0
 800135a:	4323      	orrs	r3, r4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d105      	bne.n	800136c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	4619      	mov	r1, r3
 8001366:	485f      	ldr	r0, [pc, #380]	; (80014e4 <HAL_ADC_Init+0x2a4>)
 8001368:	f7ff fdde 	bl	8000f28 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	7e5b      	ldrb	r3, [r3, #25]
 8001370:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001376:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800137c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001382:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 3020 	ldrb.w	r3, [r3, #32]
 800138a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d106      	bne.n	80013a8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	3b01      	subs	r3, #1
 80013a0:	045b      	lsls	r3, r3, #17
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d009      	beq.n	80013c4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	4b47      	ldr	r3, [pc, #284]	; (80014e8 <HAL_ADC_Init+0x2a8>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	69b9      	ldr	r1, [r7, #24]
 80013d4:	430b      	orrs	r3, r1
 80013d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff08 	bl	80011f2 <LL_ADC_REG_IsConversionOngoing>
 80013e2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff15 	bl	8001218 <LL_ADC_INJ_IsConversionOngoing>
 80013ee:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d13d      	bne.n	8001472 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d13a      	bne.n	8001472 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001400:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001408:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001418:	f023 0302 	bic.w	r3, r3, #2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	69b9      	ldr	r1, [r7, #24]
 8001422:	430b      	orrs	r3, r1
 8001424:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800142c:	2b01      	cmp	r3, #1
 800142e:	d118      	bne.n	8001462 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800143a:	f023 0304 	bic.w	r3, r3, #4
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001446:	4311      	orrs	r1, r2
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800144c:	4311      	orrs	r1, r2
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001452:	430a      	orrs	r2, r1
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0201 	orr.w	r2, r2, #1
 800145e:	611a      	str	r2, [r3, #16]
 8001460:	e007      	b.n	8001472 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0201 	bic.w	r2, r2, #1
 8001470:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d10c      	bne.n	8001494 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	f023 010f 	bic.w	r1, r3, #15
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	1e5a      	subs	r2, r3, #1
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	631a      	str	r2, [r3, #48]	; 0x30
 8001492:	e007      	b.n	80014a4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 020f 	bic.w	r2, r2, #15
 80014a2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a8:	f023 0303 	bic.w	r3, r3, #3
 80014ac:	f043 0201 	orr.w	r2, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	655a      	str	r2, [r3, #84]	; 0x54
 80014b4:	e007      	b.n	80014c6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ba:	f043 0210 	orr.w	r2, r3, #16
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3724      	adds	r7, #36	; 0x24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd90      	pop	{r4, r7, pc}
 80014d0:	20000000 	.word	0x20000000
 80014d4:	053e2d63 	.word	0x053e2d63
 80014d8:	50040000 	.word	0x50040000
 80014dc:	50040100 	.word	0x50040100
 80014e0:	50040200 	.word	0x50040200
 80014e4:	50040300 	.word	0x50040300
 80014e8:	fff0c007 	.word	0xfff0c007

080014ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b0b6      	sub	sp, #216	; 0xd8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <HAL_ADC_ConfigChannel+0x22>
 800150a:	2302      	movs	r3, #2
 800150c:	e3c7      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x7b2>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fe69 	bl	80011f2 <LL_ADC_REG_IsConversionOngoing>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	f040 83a8 	bne.w	8001c78 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b05      	cmp	r3, #5
 800152e:	d824      	bhi.n	800157a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	3b02      	subs	r3, #2
 8001536:	2b03      	cmp	r3, #3
 8001538:	d81b      	bhi.n	8001572 <HAL_ADC_ConfigChannel+0x86>
 800153a:	a201      	add	r2, pc, #4	; (adr r2, 8001540 <HAL_ADC_ConfigChannel+0x54>)
 800153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001540:	08001551 	.word	0x08001551
 8001544:	08001559 	.word	0x08001559
 8001548:	08001561 	.word	0x08001561
 800154c:	08001569 	.word	0x08001569
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	220c      	movs	r2, #12
 8001554:	605a      	str	r2, [r3, #4]
          break;
 8001556:	e011      	b.n	800157c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2212      	movs	r2, #18
 800155c:	605a      	str	r2, [r3, #4]
          break;
 800155e:	e00d      	b.n	800157c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	2218      	movs	r2, #24
 8001564:	605a      	str	r2, [r3, #4]
          break;
 8001566:	e009      	b.n	800157c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800156e:	605a      	str	r2, [r3, #4]
          break;
 8001570:	e004      	b.n	800157c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	2206      	movs	r2, #6
 8001576:	605a      	str	r2, [r3, #4]
          break;
 8001578:	e000      	b.n	800157c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800157a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	f7ff fd56 	bl	800103a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fe2d 	bl	80011f2 <LL_ADC_REG_IsConversionOngoing>
 8001598:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fe39 	bl	8001218 <LL_ADC_INJ_IsConversionOngoing>
 80015a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f040 81a6 	bne.w	8001900 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f040 81a1 	bne.w	8001900 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	6819      	ldr	r1, [r3, #0]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	461a      	mov	r2, r3
 80015cc:	f7ff fd61 	bl	8001092 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	695a      	ldr	r2, [r3, #20]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	08db      	lsrs	r3, r3, #3
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d00a      	beq.n	8001608 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6818      	ldr	r0, [r3, #0]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	6919      	ldr	r1, [r3, #16]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001602:	f7ff fcc5 	bl	8000f90 <LL_ADC_SetOffset>
 8001606:	e17b      	b.n	8001900 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fce2 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10a      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x148>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fcd7 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	0e9b      	lsrs	r3, r3, #26
 800162e:	f003 021f 	and.w	r2, r3, #31
 8001632:	e01e      	b.n	8001672 <HAL_ADC_ConfigChannel+0x186>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fccc 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001646:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800164a:	fa93 f3a3 	rbit	r3, r3
 800164e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001652:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001656:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800165a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001662:	2320      	movs	r3, #32
 8001664:	e004      	b.n	8001670 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001666:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800166a:	fab3 f383 	clz	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800167a:	2b00      	cmp	r3, #0
 800167c:	d105      	bne.n	800168a <HAL_ADC_ConfigChannel+0x19e>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	0e9b      	lsrs	r3, r3, #26
 8001684:	f003 031f 	and.w	r3, r3, #31
 8001688:	e018      	b.n	80016bc <HAL_ADC_ConfigChannel+0x1d0>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001696:	fa93 f3a3 	rbit	r3, r3
 800169a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800169e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80016a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80016ae:	2320      	movs	r3, #32
 80016b0:	e004      	b.n	80016bc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80016b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016b6:	fab3 f383 	clz	r3, r3
 80016ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016bc:	429a      	cmp	r2, r3
 80016be:	d106      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2200      	movs	r2, #0
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fc9b 	bl	8001004 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2101      	movs	r1, #1
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fc7f 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10a      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x20e>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2101      	movs	r1, #1
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fc74 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	0e9b      	lsrs	r3, r3, #26
 80016f4:	f003 021f 	and.w	r2, r3, #31
 80016f8:	e01e      	b.n	8001738 <HAL_ADC_ConfigChannel+0x24c>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2101      	movs	r1, #1
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fc69 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001706:	4603      	mov	r3, r0
 8001708:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001710:	fa93 f3a3 	rbit	r3, r3
 8001714:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001718:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800171c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001720:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001728:	2320      	movs	r3, #32
 800172a:	e004      	b.n	8001736 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800172c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001730:	fab3 f383 	clz	r3, r3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001740:	2b00      	cmp	r3, #0
 8001742:	d105      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x264>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	0e9b      	lsrs	r3, r3, #26
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	e018      	b.n	8001782 <HAL_ADC_ConfigChannel+0x296>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800175c:	fa93 f3a3 	rbit	r3, r3
 8001760:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001764:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001768:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800176c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001774:	2320      	movs	r3, #32
 8001776:	e004      	b.n	8001782 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001778:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800177c:	fab3 f383 	clz	r3, r3
 8001780:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001782:	429a      	cmp	r2, r3
 8001784:	d106      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2200      	movs	r2, #0
 800178c:	2101      	movs	r1, #1
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fc38 	bl	8001004 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2102      	movs	r1, #2
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fc1c 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10a      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x2d4>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2102      	movs	r1, #2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fc11 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	0e9b      	lsrs	r3, r3, #26
 80017ba:	f003 021f 	and.w	r2, r3, #31
 80017be:	e01e      	b.n	80017fe <HAL_ADC_ConfigChannel+0x312>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2102      	movs	r1, #2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fc06 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80017de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80017e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80017ee:	2320      	movs	r3, #32
 80017f0:	e004      	b.n	80017fc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80017f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017f6:	fab3 f383 	clz	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001806:	2b00      	cmp	r3, #0
 8001808:	d105      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x32a>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	0e9b      	lsrs	r3, r3, #26
 8001810:	f003 031f 	and.w	r3, r3, #31
 8001814:	e016      	b.n	8001844 <HAL_ADC_ConfigChannel+0x358>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001822:	fa93 f3a3 	rbit	r3, r3
 8001826:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001828:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800182a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800182e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001836:	2320      	movs	r3, #32
 8001838:	e004      	b.n	8001844 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800183a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001844:	429a      	cmp	r2, r3
 8001846:	d106      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2200      	movs	r2, #0
 800184e:	2102      	movs	r1, #2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fbd7 	bl	8001004 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2103      	movs	r1, #3
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fbbb 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10a      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x396>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2103      	movs	r1, #3
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fbb0 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001878:	4603      	mov	r3, r0
 800187a:	0e9b      	lsrs	r3, r3, #26
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	e017      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x3c6>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2103      	movs	r1, #3
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fba5 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800189a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800189c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800189e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80018a4:	2320      	movs	r3, #32
 80018a6:	e003      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80018a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018aa:	fab3 f383 	clz	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d105      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x3de>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	0e9b      	lsrs	r3, r3, #26
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	e011      	b.n	80018ee <HAL_ADC_ConfigChannel+0x402>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018d2:	fa93 f3a3 	rbit	r3, r3
 80018d6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80018d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80018dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80018e2:	2320      	movs	r3, #32
 80018e4:	e003      	b.n	80018ee <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80018e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018e8:	fab3 f383 	clz	r3, r3
 80018ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d106      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2200      	movs	r2, #0
 80018f8:	2103      	movs	r1, #3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fb82 	bl	8001004 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fc61 	bl	80011cc <LL_ADC_IsEnabled>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	f040 813f 	bne.w	8001b90 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6818      	ldr	r0, [r3, #0]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	6819      	ldr	r1, [r3, #0]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	461a      	mov	r2, r3
 8001920:	f7ff fbe2 	bl	80010e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4a8e      	ldr	r2, [pc, #568]	; (8001b64 <HAL_ADC_ConfigChannel+0x678>)
 800192a:	4293      	cmp	r3, r2
 800192c:	f040 8130 	bne.w	8001b90 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10b      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x46c>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	0e9b      	lsrs	r3, r3, #26
 8001946:	3301      	adds	r3, #1
 8001948:	f003 031f 	and.w	r3, r3, #31
 800194c:	2b09      	cmp	r3, #9
 800194e:	bf94      	ite	ls
 8001950:	2301      	movls	r3, #1
 8001952:	2300      	movhi	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	e019      	b.n	800198c <HAL_ADC_ConfigChannel+0x4a0>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001960:	fa93 f3a3 	rbit	r3, r3
 8001964:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001968:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800196a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001970:	2320      	movs	r3, #32
 8001972:	e003      	b.n	800197c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001974:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001976:	fab3 f383 	clz	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	3301      	adds	r3, #1
 800197e:	f003 031f 	and.w	r3, r3, #31
 8001982:	2b09      	cmp	r3, #9
 8001984:	bf94      	ite	ls
 8001986:	2301      	movls	r3, #1
 8001988:	2300      	movhi	r3, #0
 800198a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800198c:	2b00      	cmp	r3, #0
 800198e:	d079      	beq.n	8001a84 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001998:	2b00      	cmp	r3, #0
 800199a:	d107      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x4c0>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	0e9b      	lsrs	r3, r3, #26
 80019a2:	3301      	adds	r3, #1
 80019a4:	069b      	lsls	r3, r3, #26
 80019a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019aa:	e015      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x4ec>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80019ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80019be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80019c4:	2320      	movs	r3, #32
 80019c6:	e003      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80019c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ca:	fab3 f383 	clz	r3, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	3301      	adds	r3, #1
 80019d2:	069b      	lsls	r3, r3, #26
 80019d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d109      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x50c>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	0e9b      	lsrs	r3, r3, #26
 80019ea:	3301      	adds	r3, #1
 80019ec:	f003 031f 	and.w	r3, r3, #31
 80019f0:	2101      	movs	r1, #1
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	e017      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x53c>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a00:	fa93 f3a3 	rbit	r3, r3
 8001a04:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a08:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001a10:	2320      	movs	r3, #32
 8001a12:	e003      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	2101      	movs	r1, #1
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	ea42 0103 	orr.w	r1, r2, r3
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10a      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x562>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0e9b      	lsrs	r3, r3, #26
 8001a3e:	3301      	adds	r3, #1
 8001a40:	f003 021f 	and.w	r2, r3, #31
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	051b      	lsls	r3, r3, #20
 8001a4c:	e018      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x594>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a56:	fa93 f3a3 	rbit	r3, r3
 8001a5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001a66:	2320      	movs	r3, #32
 8001a68:	e003      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	3301      	adds	r3, #1
 8001a74:	f003 021f 	and.w	r2, r3, #31
 8001a78:	4613      	mov	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a80:	430b      	orrs	r3, r1
 8001a82:	e080      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d107      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x5b4>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	0e9b      	lsrs	r3, r3, #26
 8001a96:	3301      	adds	r3, #1
 8001a98:	069b      	lsls	r3, r3, #26
 8001a9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a9e:	e015      	b.n	8001acc <HAL_ADC_ConfigChannel+0x5e0>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001ab8:	2320      	movs	r3, #32
 8001aba:	e003      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	069b      	lsls	r3, r3, #26
 8001ac8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x600>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	0e9b      	lsrs	r3, r3, #26
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	e017      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x630>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	61fb      	str	r3, [r7, #28]
  return result;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001b04:	2320      	movs	r3, #32
 8001b06:	e003      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	3301      	adds	r3, #1
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	2101      	movs	r1, #1
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	ea42 0103 	orr.w	r1, r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10d      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x65c>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0e9b      	lsrs	r3, r3, #26
 8001b32:	3301      	adds	r3, #1
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b1e      	subs	r3, #30
 8001b40:	051b      	lsls	r3, r3, #20
 8001b42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b46:	e01d      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x698>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	613b      	str	r3, [r7, #16]
  return result;
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d103      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001b60:	2320      	movs	r3, #32
 8001b62:	e005      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x684>
 8001b64:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	3301      	adds	r3, #1
 8001b72:	f003 021f 	and.w	r2, r3, #31
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3b1e      	subs	r3, #30
 8001b7e:	051b      	lsls	r3, r3, #20
 8001b80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b84:	430b      	orrs	r3, r1
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	6892      	ldr	r2, [r2, #8]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f7ff fa81 	bl	8001092 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b44      	ldr	r3, [pc, #272]	; (8001ca8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d07a      	beq.n	8001c92 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b9c:	4843      	ldr	r0, [pc, #268]	; (8001cac <HAL_ADC_ConfigChannel+0x7c0>)
 8001b9e:	f7ff f9e9 	bl	8000f74 <LL_ADC_GetCommonPathInternalCh>
 8001ba2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a41      	ldr	r2, [pc, #260]	; (8001cb0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d12c      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001bb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d126      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a3c      	ldr	r2, [pc, #240]	; (8001cb4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d004      	beq.n	8001bd0 <HAL_ADC_ConfigChannel+0x6e4>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a3b      	ldr	r2, [pc, #236]	; (8001cb8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d15d      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4834      	ldr	r0, [pc, #208]	; (8001cac <HAL_ADC_ConfigChannel+0x7c0>)
 8001bdc:	f7ff f9b7 	bl	8000f4e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001be0:	4b36      	ldr	r3, [pc, #216]	; (8001cbc <HAL_ADC_ConfigChannel+0x7d0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	099b      	lsrs	r3, r3, #6
 8001be6:	4a36      	ldr	r2, [pc, #216]	; (8001cc0 <HAL_ADC_ConfigChannel+0x7d4>)
 8001be8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bec:	099b      	lsrs	r3, r3, #6
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bfa:	e002      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1f9      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c08:	e040      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a2d      	ldr	r2, [pc, #180]	; (8001cc4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d118      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x75a>
 8001c14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d112      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a23      	ldr	r2, [pc, #140]	; (8001cb4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d004      	beq.n	8001c34 <HAL_ADC_ConfigChannel+0x748>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a22      	ldr	r2, [pc, #136]	; (8001cb8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d12d      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	481b      	ldr	r0, [pc, #108]	; (8001cac <HAL_ADC_ConfigChannel+0x7c0>)
 8001c40:	f7ff f985 	bl	8000f4e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c44:	e024      	b.n	8001c90 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1f      	ldr	r2, [pc, #124]	; (8001cc8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d120      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d11a      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d115      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c6e:	4619      	mov	r1, r3
 8001c70:	480e      	ldr	r0, [pc, #56]	; (8001cac <HAL_ADC_ConfigChannel+0x7c0>)
 8001c72:	f7ff f96c 	bl	8000f4e <LL_ADC_SetCommonPathInternalCh>
 8001c76:	e00c      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7c:	f043 0220 	orr.w	r2, r3, #32
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001c8a:	e002      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c8c:	bf00      	nop
 8001c8e:	e000      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c9a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	37d8      	adds	r7, #216	; 0xd8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	80080000 	.word	0x80080000
 8001cac:	50040300 	.word	0x50040300
 8001cb0:	c7520000 	.word	0xc7520000
 8001cb4:	50040000 	.word	0x50040000
 8001cb8:	50040200 	.word	0x50040200
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	053e2d63 	.word	0x053e2d63
 8001cc4:	cb840000 	.word	0xcb840000
 8001cc8:	80000001 	.word	0x80000001

08001ccc <LL_ADC_IsEnabled>:
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <LL_ADC_IsEnabled+0x18>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <LL_ADC_IsEnabled+0x1a>
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <LL_ADC_REG_IsConversionOngoing>:
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d101      	bne.n	8001d0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b09f      	sub	sp, #124	; 0x7c
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e093      	b.n	8001e5e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001d3e:	2300      	movs	r3, #0
 8001d40:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001d42:	2300      	movs	r3, #0
 8001d44:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a47      	ldr	r2, [pc, #284]	; (8001e68 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d102      	bne.n	8001d56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001d50:	4b46      	ldr	r3, [pc, #280]	; (8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	e001      	b.n	8001d5a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10b      	bne.n	8001d78 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d64:	f043 0220 	orr.w	r2, r3, #32
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e072      	b.n	8001e5e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff ffb9 	bl	8001cf2 <LL_ADC_REG_IsConversionOngoing>
 8001d80:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ffb3 	bl	8001cf2 <LL_ADC_REG_IsConversionOngoing>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d154      	bne.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d151      	bne.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001d98:	4b35      	ldr	r3, [pc, #212]	; (8001e70 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001d9a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d02c      	beq.n	8001dfe <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	6859      	ldr	r1, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001db6:	035b      	lsls	r3, r3, #13
 8001db8:	430b      	orrs	r3, r1
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dbe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dc0:	4829      	ldr	r0, [pc, #164]	; (8001e68 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001dc2:	f7ff ff83 	bl	8001ccc <LL_ADC_IsEnabled>
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	4828      	ldr	r0, [pc, #160]	; (8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001dca:	f7ff ff7f 	bl	8001ccc <LL_ADC_IsEnabled>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	431c      	orrs	r4, r3
 8001dd2:	4828      	ldr	r0, [pc, #160]	; (8001e74 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001dd4:	f7ff ff7a 	bl	8001ccc <LL_ADC_IsEnabled>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4323      	orrs	r3, r4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d137      	bne.n	8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001de8:	f023 030f 	bic.w	r3, r3, #15
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	6811      	ldr	r1, [r2, #0]
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	6892      	ldr	r2, [r2, #8]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	431a      	orrs	r2, r3
 8001df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dfa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001dfc:	e028      	b.n	8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e08:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e0a:	4817      	ldr	r0, [pc, #92]	; (8001e68 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e0c:	f7ff ff5e 	bl	8001ccc <LL_ADC_IsEnabled>
 8001e10:	4604      	mov	r4, r0
 8001e12:	4816      	ldr	r0, [pc, #88]	; (8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e14:	f7ff ff5a 	bl	8001ccc <LL_ADC_IsEnabled>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	431c      	orrs	r4, r3
 8001e1c:	4815      	ldr	r0, [pc, #84]	; (8001e74 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001e1e:	f7ff ff55 	bl	8001ccc <LL_ADC_IsEnabled>
 8001e22:	4603      	mov	r3, r0
 8001e24:	4323      	orrs	r3, r4
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d112      	bne.n	8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e32:	f023 030f 	bic.w	r3, r3, #15
 8001e36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001e38:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e3a:	e009      	b.n	8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e40:	f043 0220 	orr.w	r2, r3, #32
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001e4e:	e000      	b.n	8001e52 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e5a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	377c      	adds	r7, #124	; 0x7c
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd90      	pop	{r4, r7, pc}
 8001e66:	bf00      	nop
 8001e68:	50040000 	.word	0x50040000
 8001e6c:	50040100 	.word	0x50040100
 8001e70:	50040300 	.word	0x50040300
 8001e74:	50040200 	.word	0x50040200

08001e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e94:	4013      	ands	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eaa:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	60d3      	str	r3, [r2, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	f003 0307 	and.w	r3, r3, #7
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	db0b      	blt.n	8001f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	f003 021f 	and.w	r2, r3, #31
 8001ef4:	4907      	ldr	r1, [pc, #28]	; (8001f14 <__NVIC_EnableIRQ+0x38>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	2001      	movs	r0, #1
 8001efe:	fa00 f202 	lsl.w	r2, r0, r2
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000e100 	.word	0xe000e100

08001f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db0a      	blt.n	8001f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	490c      	ldr	r1, [pc, #48]	; (8001f64 <__NVIC_SetPriority+0x4c>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f40:	e00a      	b.n	8001f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4908      	ldr	r1, [pc, #32]	; (8001f68 <__NVIC_SetPriority+0x50>)
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	761a      	strb	r2, [r3, #24]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f1c3 0307 	rsb	r3, r3, #7
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	bf28      	it	cs
 8001f8a:	2304      	movcs	r3, #4
 8001f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d902      	bls.n	8001f9c <NVIC_EncodePriority+0x30>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3b03      	subs	r3, #3
 8001f9a:	e000      	b.n	8001f9e <NVIC_EncodePriority+0x32>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	4313      	orrs	r3, r2
         );
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	; 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ff4c 	bl	8001e78 <__NVIC_SetPriorityGrouping>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ffa:	f7ff ff61 	bl	8001ec0 <__NVIC_GetPriorityGrouping>
 8001ffe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	68b9      	ldr	r1, [r7, #8]
 8002004:	6978      	ldr	r0, [r7, #20]
 8002006:	f7ff ffb1 	bl	8001f6c <NVIC_EncodePriority>
 800200a:	4602      	mov	r2, r0
 800200c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002010:	4611      	mov	r1, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff80 	bl	8001f18 <__NVIC_SetPriority>
}
 8002018:	bf00      	nop
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff54 	bl	8001edc <__NVIC_EnableIRQ>
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204a:	e17f      	b.n	800234c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2101      	movs	r1, #1
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	4013      	ands	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8171 	beq.w	8002346 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b01      	cmp	r3, #1
 800206e:	d005      	beq.n	800207c <HAL_GPIO_Init+0x40>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d130      	bne.n	80020de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020b2:	2201      	movs	r2, #1
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 0201 	and.w	r2, r3, #1
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d118      	bne.n	800211c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020f0:	2201      	movs	r2, #1
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	08db      	lsrs	r3, r3, #3
 8002106:	f003 0201 	and.w	r2, r3, #1
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b03      	cmp	r3, #3
 8002126:	d017      	beq.n	8002158 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d123      	bne.n	80021ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	08da      	lsrs	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3208      	adds	r2, #8
 800216c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	220f      	movs	r2, #15
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	08da      	lsrs	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3208      	adds	r2, #8
 80021a6:	6939      	ldr	r1, [r7, #16]
 80021a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0203 	and.w	r2, r3, #3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80ac 	beq.w	8002346 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ee:	4b5f      	ldr	r3, [pc, #380]	; (800236c <HAL_GPIO_Init+0x330>)
 80021f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f2:	4a5e      	ldr	r2, [pc, #376]	; (800236c <HAL_GPIO_Init+0x330>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6613      	str	r3, [r2, #96]	; 0x60
 80021fa:	4b5c      	ldr	r3, [pc, #368]	; (800236c <HAL_GPIO_Init+0x330>)
 80021fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002206:	4a5a      	ldr	r2, [pc, #360]	; (8002370 <HAL_GPIO_Init+0x334>)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002212:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002230:	d025      	beq.n	800227e <HAL_GPIO_Init+0x242>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4f      	ldr	r2, [pc, #316]	; (8002374 <HAL_GPIO_Init+0x338>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d01f      	beq.n	800227a <HAL_GPIO_Init+0x23e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4e      	ldr	r2, [pc, #312]	; (8002378 <HAL_GPIO_Init+0x33c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d019      	beq.n	8002276 <HAL_GPIO_Init+0x23a>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4d      	ldr	r2, [pc, #308]	; (800237c <HAL_GPIO_Init+0x340>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d013      	beq.n	8002272 <HAL_GPIO_Init+0x236>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4c      	ldr	r2, [pc, #304]	; (8002380 <HAL_GPIO_Init+0x344>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00d      	beq.n	800226e <HAL_GPIO_Init+0x232>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4b      	ldr	r2, [pc, #300]	; (8002384 <HAL_GPIO_Init+0x348>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d007      	beq.n	800226a <HAL_GPIO_Init+0x22e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4a      	ldr	r2, [pc, #296]	; (8002388 <HAL_GPIO_Init+0x34c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d101      	bne.n	8002266 <HAL_GPIO_Init+0x22a>
 8002262:	2306      	movs	r3, #6
 8002264:	e00c      	b.n	8002280 <HAL_GPIO_Init+0x244>
 8002266:	2307      	movs	r3, #7
 8002268:	e00a      	b.n	8002280 <HAL_GPIO_Init+0x244>
 800226a:	2305      	movs	r3, #5
 800226c:	e008      	b.n	8002280 <HAL_GPIO_Init+0x244>
 800226e:	2304      	movs	r3, #4
 8002270:	e006      	b.n	8002280 <HAL_GPIO_Init+0x244>
 8002272:	2303      	movs	r3, #3
 8002274:	e004      	b.n	8002280 <HAL_GPIO_Init+0x244>
 8002276:	2302      	movs	r3, #2
 8002278:	e002      	b.n	8002280 <HAL_GPIO_Init+0x244>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_GPIO_Init+0x244>
 800227e:	2300      	movs	r3, #0
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	f002 0203 	and.w	r2, r2, #3
 8002286:	0092      	lsls	r2, r2, #2
 8002288:	4093      	lsls	r3, r2
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002290:	4937      	ldr	r1, [pc, #220]	; (8002370 <HAL_GPIO_Init+0x334>)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	3302      	adds	r3, #2
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800229e:	4b3b      	ldr	r3, [pc, #236]	; (800238c <HAL_GPIO_Init+0x350>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022c2:	4a32      	ldr	r2, [pc, #200]	; (800238c <HAL_GPIO_Init+0x350>)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022c8:	4b30      	ldr	r3, [pc, #192]	; (800238c <HAL_GPIO_Init+0x350>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4013      	ands	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022ec:	4a27      	ldr	r2, [pc, #156]	; (800238c <HAL_GPIO_Init+0x350>)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <HAL_GPIO_Init+0x350>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4013      	ands	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002316:	4a1d      	ldr	r2, [pc, #116]	; (800238c <HAL_GPIO_Init+0x350>)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <HAL_GPIO_Init+0x350>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	43db      	mvns	r3, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002340:	4a12      	ldr	r2, [pc, #72]	; (800238c <HAL_GPIO_Init+0x350>)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3301      	adds	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa22 f303 	lsr.w	r3, r2, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	f47f ae78 	bne.w	800204c <HAL_GPIO_Init+0x10>
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	371c      	adds	r7, #28
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	40010000 	.word	0x40010000
 8002374:	48000400 	.word	0x48000400
 8002378:	48000800 	.word	0x48000800
 800237c:	48000c00 	.word	0x48000c00
 8002380:	48001000 	.word	0x48001000
 8002384:	48001400 	.word	0x48001400
 8002388:	48001800 	.word	0x48001800
 800238c:	40010400 	.word	0x40010400

08002390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	807b      	strh	r3, [r7, #2]
 800239c:	4613      	mov	r3, r2
 800239e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a0:	787b      	ldrb	r3, [r7, #1]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023a6:	887a      	ldrh	r2, [r7, #2]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023ac:	e002      	b.n	80023b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4013      	ands	r3, r2
 80023d8:	041a      	lsls	r2, r3, #16
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	43d9      	mvns	r1, r3
 80023de:	887b      	ldrh	r3, [r7, #2]
 80023e0:	400b      	ands	r3, r1
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	619a      	str	r2, [r3, #24]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e081      	b.n	800250a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe fb70 	bl	8000b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2224      	movs	r2, #36	; 0x24
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002444:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002454:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d107      	bne.n	800246e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	e006      	b.n	800247c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800247a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d104      	bne.n	800248e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800248c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800249c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69d9      	ldr	r1, [r3, #28]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1a      	ldr	r2, [r3, #32]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b20      	cmp	r3, #32
 8002526:	d138      	bne.n	800259a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002532:	2302      	movs	r3, #2
 8002534:	e032      	b.n	800259c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2224      	movs	r2, #36	; 0x24
 8002542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0201 	bic.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002564:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6819      	ldr	r1, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0201 	orr.w	r2, r2, #1
 8002584:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2220      	movs	r2, #32
 800258a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	e000      	b.n	800259c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800259a:	2302      	movs	r3, #2
  }
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b20      	cmp	r3, #32
 80025bc:	d139      	bne.n	8002632 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e033      	b.n	8002634 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2224      	movs	r2, #36	; 0x24
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	e000      	b.n	8002634 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002632:	2302      	movs	r3, #2
  }
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002644:	4b04      	ldr	r3, [pc, #16]	; (8002658 <HAL_PWREx_GetVoltageRange+0x18>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40007000 	.word	0x40007000

0800265c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800266a:	d130      	bne.n	80026ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800266c:	4b23      	ldr	r3, [pc, #140]	; (80026fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002678:	d038      	beq.n	80026ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800267a:	4b20      	ldr	r3, [pc, #128]	; (80026fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002682:	4a1e      	ldr	r2, [pc, #120]	; (80026fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002684:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002688:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800268a:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2232      	movs	r2, #50	; 0x32
 8002690:	fb02 f303 	mul.w	r3, r2, r3
 8002694:	4a1b      	ldr	r2, [pc, #108]	; (8002704 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	0c9b      	lsrs	r3, r3, #18
 800269c:	3301      	adds	r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026a0:	e002      	b.n	80026a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026a8:	4b14      	ldr	r3, [pc, #80]	; (80026fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b4:	d102      	bne.n	80026bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f2      	bne.n	80026a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c8:	d110      	bne.n	80026ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e00f      	b.n	80026ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026da:	d007      	beq.n	80026ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026dc:	4b07      	ldr	r3, [pc, #28]	; (80026fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026e4:	4a05      	ldr	r2, [pc, #20]	; (80026fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40007000 	.word	0x40007000
 8002700:	20000000 	.word	0x20000000
 8002704:	431bde83 	.word	0x431bde83

08002708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e3ca      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800271a:	4b97      	ldr	r3, [pc, #604]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002724:	4b94      	ldr	r3, [pc, #592]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 80e4 	beq.w	8002904 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <HAL_RCC_OscConfig+0x4a>
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	2b0c      	cmp	r3, #12
 8002746:	f040 808b 	bne.w	8002860 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2b01      	cmp	r3, #1
 800274e:	f040 8087 	bne.w	8002860 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002752:	4b89      	ldr	r3, [pc, #548]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_RCC_OscConfig+0x62>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e3a2      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1a      	ldr	r2, [r3, #32]
 800276e:	4b82      	ldr	r3, [pc, #520]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d004      	beq.n	8002784 <HAL_RCC_OscConfig+0x7c>
 800277a:	4b7f      	ldr	r3, [pc, #508]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002782:	e005      	b.n	8002790 <HAL_RCC_OscConfig+0x88>
 8002784:	4b7c      	ldr	r3, [pc, #496]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002790:	4293      	cmp	r3, r2
 8002792:	d223      	bcs.n	80027dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	4618      	mov	r0, r3
 800279a:	f000 fd87 	bl	80032ac <RCC_SetFlashLatencyFromMSIRange>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e383      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027a8:	4b73      	ldr	r3, [pc, #460]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a72      	ldr	r2, [pc, #456]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027ae:	f043 0308 	orr.w	r3, r3, #8
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	4b70      	ldr	r3, [pc, #448]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	496d      	ldr	r1, [pc, #436]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027c6:	4b6c      	ldr	r3, [pc, #432]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	021b      	lsls	r3, r3, #8
 80027d4:	4968      	ldr	r1, [pc, #416]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	604b      	str	r3, [r1, #4]
 80027da:	e025      	b.n	8002828 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027dc:	4b66      	ldr	r3, [pc, #408]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a65      	ldr	r2, [pc, #404]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027e2:	f043 0308 	orr.w	r3, r3, #8
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	4b63      	ldr	r3, [pc, #396]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4960      	ldr	r1, [pc, #384]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027fa:	4b5f      	ldr	r3, [pc, #380]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	495b      	ldr	r1, [pc, #364]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fd47 	bl	80032ac <RCC_SetFlashLatencyFromMSIRange>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e343      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002828:	f000 fc4a 	bl	80030c0 <HAL_RCC_GetSysClockFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b52      	ldr	r3, [pc, #328]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	091b      	lsrs	r3, r3, #4
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	4950      	ldr	r1, [pc, #320]	; (800297c <HAL_RCC_OscConfig+0x274>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	fa22 f303 	lsr.w	r3, r2, r3
 8002844:	4a4e      	ldr	r2, [pc, #312]	; (8002980 <HAL_RCC_OscConfig+0x278>)
 8002846:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002848:	4b4e      	ldr	r3, [pc, #312]	; (8002984 <HAL_RCC_OscConfig+0x27c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7fe fa55 	bl	8000cfc <HAL_InitTick>
 8002852:	4603      	mov	r3, r0
 8002854:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d052      	beq.n	8002902 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	e327      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d032      	beq.n	80028ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002868:	4b43      	ldr	r3, [pc, #268]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a42      	ldr	r2, [pc, #264]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002874:	f7fe fb4c 	bl	8000f10 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800287c:	f7fe fb48 	bl	8000f10 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e310      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800288e:	4b3a      	ldr	r3, [pc, #232]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800289a:	4b37      	ldr	r3, [pc, #220]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a36      	ldr	r2, [pc, #216]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80028a0:	f043 0308 	orr.w	r3, r3, #8
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b34      	ldr	r3, [pc, #208]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	4931      	ldr	r1, [pc, #196]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028b8:	4b2f      	ldr	r3, [pc, #188]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	492c      	ldr	r1, [pc, #176]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	604b      	str	r3, [r1, #4]
 80028cc:	e01a      	b.n	8002904 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028ce:	4b2a      	ldr	r3, [pc, #168]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a29      	ldr	r2, [pc, #164]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028da:	f7fe fb19 	bl	8000f10 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028e2:	f7fe fb15 	bl	8000f10 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e2dd      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028f4:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f0      	bne.n	80028e2 <HAL_RCC_OscConfig+0x1da>
 8002900:	e000      	b.n	8002904 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002902:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d074      	beq.n	80029fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2b08      	cmp	r3, #8
 8002914:	d005      	beq.n	8002922 <HAL_RCC_OscConfig+0x21a>
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	2b0c      	cmp	r3, #12
 800291a:	d10e      	bne.n	800293a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d10b      	bne.n	800293a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002922:	4b15      	ldr	r3, [pc, #84]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d064      	beq.n	80029f8 <HAL_RCC_OscConfig+0x2f0>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d160      	bne.n	80029f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e2ba      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002942:	d106      	bne.n	8002952 <HAL_RCC_OscConfig+0x24a>
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800294a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	e026      	b.n	80029a0 <HAL_RCC_OscConfig+0x298>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800295a:	d115      	bne.n	8002988 <HAL_RCC_OscConfig+0x280>
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a05      	ldr	r2, [pc, #20]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 8002962:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a02      	ldr	r2, [pc, #8]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800296e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	e014      	b.n	80029a0 <HAL_RCC_OscConfig+0x298>
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000
 800297c:	08008298 	.word	0x08008298
 8002980:	20000000 	.word	0x20000000
 8002984:	20000004 	.word	0x20000004
 8002988:	4ba0      	ldr	r3, [pc, #640]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a9f      	ldr	r2, [pc, #636]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 800298e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	4b9d      	ldr	r3, [pc, #628]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a9c      	ldr	r2, [pc, #624]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 800299a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d013      	beq.n	80029d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe fab2 	bl	8000f10 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b0:	f7fe faae 	bl	8000f10 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	; 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e276      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029c2:	4b92      	ldr	r3, [pc, #584]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x2a8>
 80029ce:	e014      	b.n	80029fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7fe fa9e 	bl	8000f10 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d8:	f7fe fa9a 	bl	8000f10 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b64      	cmp	r3, #100	; 0x64
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e262      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ea:	4b88      	ldr	r3, [pc, #544]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x2d0>
 80029f6:	e000      	b.n	80029fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d060      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_OscConfig+0x310>
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2b0c      	cmp	r3, #12
 8002a10:	d119      	bne.n	8002a46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d116      	bne.n	8002a46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a18:	4b7c      	ldr	r3, [pc, #496]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_OscConfig+0x328>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e23f      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a30:	4b76      	ldr	r3, [pc, #472]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	061b      	lsls	r3, r3, #24
 8002a3e:	4973      	ldr	r1, [pc, #460]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a44:	e040      	b.n	8002ac8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d023      	beq.n	8002a96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a4e:	4b6f      	ldr	r3, [pc, #444]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a6e      	ldr	r2, [pc, #440]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7fe fa59 	bl	8000f10 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a62:	f7fe fa55 	bl	8000f10 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e21d      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a74:	4b65      	ldr	r3, [pc, #404]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a80:	4b62      	ldr	r3, [pc, #392]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	061b      	lsls	r3, r3, #24
 8002a8e:	495f      	ldr	r1, [pc, #380]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
 8002a94:	e018      	b.n	8002ac8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a96:	4b5d      	ldr	r3, [pc, #372]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a5c      	ldr	r2, [pc, #368]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa2:	f7fe fa35 	bl	8000f10 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aaa:	f7fe fa31 	bl	8000f10 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e1f9      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002abc:	4b53      	ldr	r3, [pc, #332]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f0      	bne.n	8002aaa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d03c      	beq.n	8002b4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d01c      	beq.n	8002b16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002adc:	4b4b      	ldr	r3, [pc, #300]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae2:	4a4a      	ldr	r2, [pc, #296]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7fe fa10 	bl	8000f10 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af4:	f7fe fa0c 	bl	8000f10 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e1d4      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b06:	4b41      	ldr	r3, [pc, #260]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0ef      	beq.n	8002af4 <HAL_RCC_OscConfig+0x3ec>
 8002b14:	e01b      	b.n	8002b4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b16:	4b3d      	ldr	r3, [pc, #244]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b1c:	4a3b      	ldr	r2, [pc, #236]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b26:	f7fe f9f3 	bl	8000f10 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2e:	f7fe f9ef 	bl	8000f10 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e1b7      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b40:	4b32      	ldr	r3, [pc, #200]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1ef      	bne.n	8002b2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80a6 	beq.w	8002ca8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b60:	4b2a      	ldr	r3, [pc, #168]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10d      	bne.n	8002b88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6c:	4b27      	ldr	r3, [pc, #156]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	4a26      	ldr	r2, [pc, #152]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b76:	6593      	str	r3, [r2, #88]	; 0x58
 8002b78:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b84:	2301      	movs	r3, #1
 8002b86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b88:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <HAL_RCC_OscConfig+0x508>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d118      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b94:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <HAL_RCC_OscConfig+0x508>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <HAL_RCC_OscConfig+0x508>)
 8002b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba0:	f7fe f9b6 	bl	8000f10 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba8:	f7fe f9b2 	bl	8000f10 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e17a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <HAL_RCC_OscConfig+0x508>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d108      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4d8>
 8002bce:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd4:	4a0d      	ldr	r2, [pc, #52]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bde:	e029      	b.n	8002c34 <HAL_RCC_OscConfig+0x52c>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b05      	cmp	r3, #5
 8002be6:	d115      	bne.n	8002c14 <HAL_RCC_OscConfig+0x50c>
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bee:	4a07      	ldr	r2, [pc, #28]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002bf0:	f043 0304 	orr.w	r3, r3, #4
 8002bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bf8:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfe:	4a03      	ldr	r2, [pc, #12]	; (8002c0c <HAL_RCC_OscConfig+0x504>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c08:	e014      	b.n	8002c34 <HAL_RCC_OscConfig+0x52c>
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40007000 	.word	0x40007000
 8002c14:	4b9c      	ldr	r3, [pc, #624]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1a:	4a9b      	ldr	r2, [pc, #620]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c24:	4b98      	ldr	r3, [pc, #608]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2a:	4a97      	ldr	r2, [pc, #604]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002c2c:	f023 0304 	bic.w	r3, r3, #4
 8002c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d016      	beq.n	8002c6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3c:	f7fe f968 	bl	8000f10 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c44:	f7fe f964 	bl	8000f10 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e12a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c5a:	4b8b      	ldr	r3, [pc, #556]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ed      	beq.n	8002c44 <HAL_RCC_OscConfig+0x53c>
 8002c68:	e015      	b.n	8002c96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6a:	f7fe f951 	bl	8000f10 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c72:	f7fe f94d 	bl	8000f10 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e113      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c88:	4b7f      	ldr	r3, [pc, #508]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1ed      	bne.n	8002c72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c96:	7ffb      	ldrb	r3, [r7, #31]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d105      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9c:	4b7a      	ldr	r3, [pc, #488]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca0:	4a79      	ldr	r2, [pc, #484]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80fe 	beq.w	8002eae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	f040 80d0 	bne.w	8002e5c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cbc:	4b72      	ldr	r3, [pc, #456]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f003 0203 	and.w	r2, r3, #3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d130      	bne.n	8002d32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d127      	bne.n	8002d32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d11f      	bne.n	8002d32 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cfc:	2a07      	cmp	r2, #7
 8002cfe:	bf14      	ite	ne
 8002d00:	2201      	movne	r2, #1
 8002d02:	2200      	moveq	r2, #0
 8002d04:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d113      	bne.n	8002d32 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d14:	085b      	lsrs	r3, r3, #1
 8002d16:	3b01      	subs	r3, #1
 8002d18:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d109      	bne.n	8002d32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	085b      	lsrs	r3, r3, #1
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d06e      	beq.n	8002e10 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	2b0c      	cmp	r3, #12
 8002d36:	d069      	beq.n	8002e0c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d38:	4b53      	ldr	r3, [pc, #332]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d105      	bne.n	8002d50 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d44:	4b50      	ldr	r3, [pc, #320]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0ad      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d54:	4b4c      	ldr	r3, [pc, #304]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a4b      	ldr	r2, [pc, #300]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d5e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d60:	f7fe f8d6 	bl	8000f10 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d68:	f7fe f8d2 	bl	8000f10 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e09a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d7a:	4b43      	ldr	r3, [pc, #268]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d86:	4b40      	ldr	r3, [pc, #256]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	4b40      	ldr	r3, [pc, #256]	; (8002e8c <HAL_RCC_OscConfig+0x784>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d96:	3a01      	subs	r2, #1
 8002d98:	0112      	lsls	r2, r2, #4
 8002d9a:	4311      	orrs	r1, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002da0:	0212      	lsls	r2, r2, #8
 8002da2:	4311      	orrs	r1, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002da8:	0852      	lsrs	r2, r2, #1
 8002daa:	3a01      	subs	r2, #1
 8002dac:	0552      	lsls	r2, r2, #21
 8002dae:	4311      	orrs	r1, r2
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002db4:	0852      	lsrs	r2, r2, #1
 8002db6:	3a01      	subs	r2, #1
 8002db8:	0652      	lsls	r2, r2, #25
 8002dba:	4311      	orrs	r1, r2
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dc0:	0912      	lsrs	r2, r2, #4
 8002dc2:	0452      	lsls	r2, r2, #17
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	4930      	ldr	r1, [pc, #192]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002dcc:	4b2e      	ldr	r3, [pc, #184]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a2d      	ldr	r2, [pc, #180]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dd8:	4b2b      	ldr	r3, [pc, #172]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4a2a      	ldr	r2, [pc, #168]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002de2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002de4:	f7fe f894 	bl	8000f10 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fe f890 	bl	8000f10 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e058      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dfe:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e0a:	e050      	b.n	8002eae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e04f      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d148      	bne.n	8002eae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e1c:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a19      	ldr	r2, [pc, #100]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4a16      	ldr	r2, [pc, #88]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e34:	f7fe f86c 	bl	8000f10 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fe f868 	bl	8000f10 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e030      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x734>
 8002e5a:	e028      	b.n	8002eae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	2b0c      	cmp	r3, #12
 8002e60:	d023      	beq.n	8002eaa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a08      	ldr	r2, [pc, #32]	; (8002e88 <HAL_RCC_OscConfig+0x780>)
 8002e68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6e:	f7fe f84f 	bl	8000f10 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e74:	e00c      	b.n	8002e90 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fe f84b 	bl	8000f10 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d905      	bls.n	8002e90 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e013      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_RCC_OscConfig+0x7b0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ec      	bne.n	8002e76 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_RCC_OscConfig+0x7b0>)
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	4905      	ldr	r1, [pc, #20]	; (8002eb8 <HAL_RCC_OscConfig+0x7b0>)
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <HAL_RCC_OscConfig+0x7b4>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60cb      	str	r3, [r1, #12]
 8002ea8:	e001      	b.n	8002eae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	feeefffc 	.word	0xfeeefffc

08002ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0e7      	b.n	80030a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed4:	4b75      	ldr	r3, [pc, #468]	; (80030ac <HAL_RCC_ClockConfig+0x1ec>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d910      	bls.n	8002f04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee2:	4b72      	ldr	r3, [pc, #456]	; (80030ac <HAL_RCC_ClockConfig+0x1ec>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 0207 	bic.w	r2, r3, #7
 8002eea:	4970      	ldr	r1, [pc, #448]	; (80030ac <HAL_RCC_ClockConfig+0x1ec>)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	4b6e      	ldr	r3, [pc, #440]	; (80030ac <HAL_RCC_ClockConfig+0x1ec>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0cf      	b.n	80030a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d010      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	4b66      	ldr	r3, [pc, #408]	; (80030b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d908      	bls.n	8002f32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f20:	4b63      	ldr	r3, [pc, #396]	; (80030b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	4960      	ldr	r1, [pc, #384]	; (80030b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d04c      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d107      	bne.n	8002f56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f46:	4b5a      	ldr	r3, [pc, #360]	; (80030b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d121      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0a6      	b.n	80030a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d107      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f5e:	4b54      	ldr	r3, [pc, #336]	; (80030b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d115      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e09a      	b.n	80030a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d107      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f76:	4b4e      	ldr	r3, [pc, #312]	; (80030b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e08e      	b.n	80030a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f86:	4b4a      	ldr	r3, [pc, #296]	; (80030b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e086      	b.n	80030a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f96:	4b46      	ldr	r3, [pc, #280]	; (80030b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f023 0203 	bic.w	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4943      	ldr	r1, [pc, #268]	; (80030b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa8:	f7fd ffb2 	bl	8000f10 <HAL_GetTick>
 8002fac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fae:	e00a      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb0:	f7fd ffae 	bl	8000f10 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e06e      	b.n	80030a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc6:	4b3a      	ldr	r3, [pc, #232]	; (80030b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 020c 	and.w	r2, r3, #12
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d1eb      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d010      	beq.n	8003006 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d208      	bcs.n	8003006 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff4:	4b2e      	ldr	r3, [pc, #184]	; (80030b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	492b      	ldr	r1, [pc, #172]	; (80030b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003006:	4b29      	ldr	r3, [pc, #164]	; (80030ac <HAL_RCC_ClockConfig+0x1ec>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d210      	bcs.n	8003036 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003014:	4b25      	ldr	r3, [pc, #148]	; (80030ac <HAL_RCC_ClockConfig+0x1ec>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f023 0207 	bic.w	r2, r3, #7
 800301c:	4923      	ldr	r1, [pc, #140]	; (80030ac <HAL_RCC_ClockConfig+0x1ec>)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	4313      	orrs	r3, r2
 8003022:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003024:	4b21      	ldr	r3, [pc, #132]	; (80030ac <HAL_RCC_ClockConfig+0x1ec>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d001      	beq.n	8003036 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e036      	b.n	80030a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003042:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	4918      	ldr	r1, [pc, #96]	; (80030b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003050:	4313      	orrs	r3, r2
 8003052:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d009      	beq.n	8003074 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003060:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4910      	ldr	r1, [pc, #64]	; (80030b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003070:	4313      	orrs	r3, r2
 8003072:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003074:	f000 f824 	bl	80030c0 <HAL_RCC_GetSysClockFreq>
 8003078:	4602      	mov	r2, r0
 800307a:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <HAL_RCC_ClockConfig+0x1f0>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	490b      	ldr	r1, [pc, #44]	; (80030b4 <HAL_RCC_ClockConfig+0x1f4>)
 8003086:	5ccb      	ldrb	r3, [r1, r3]
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
 8003090:	4a09      	ldr	r2, [pc, #36]	; (80030b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003092:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003094:	4b09      	ldr	r3, [pc, #36]	; (80030bc <HAL_RCC_ClockConfig+0x1fc>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd fe2f 	bl	8000cfc <HAL_InitTick>
 800309e:	4603      	mov	r3, r0
 80030a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80030a2:	7afb      	ldrb	r3, [r7, #11]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40022000 	.word	0x40022000
 80030b0:	40021000 	.word	0x40021000
 80030b4:	08008298 	.word	0x08008298
 80030b8:	20000000 	.word	0x20000000
 80030bc:	20000004 	.word	0x20000004

080030c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b089      	sub	sp, #36	; 0x24
 80030c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ce:	4b3e      	ldr	r3, [pc, #248]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030d8:	4b3b      	ldr	r3, [pc, #236]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x34>
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	2b0c      	cmp	r3, #12
 80030ec:	d121      	bne.n	8003132 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d11e      	bne.n	8003132 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030f4:	4b34      	ldr	r3, [pc, #208]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d107      	bne.n	8003110 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003100:	4b31      	ldr	r3, [pc, #196]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003106:	0a1b      	lsrs	r3, r3, #8
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	61fb      	str	r3, [r7, #28]
 800310e:	e005      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003110:	4b2d      	ldr	r3, [pc, #180]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800311c:	4a2b      	ldr	r2, [pc, #172]	; (80031cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003124:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10d      	bne.n	8003148 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003130:	e00a      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b04      	cmp	r3, #4
 8003136:	d102      	bne.n	800313e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003138:	4b25      	ldr	r3, [pc, #148]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800313a:	61bb      	str	r3, [r7, #24]
 800313c:	e004      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d101      	bne.n	8003148 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003144:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003146:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	2b0c      	cmp	r3, #12
 800314c:	d134      	bne.n	80031b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800314e:	4b1e      	ldr	r3, [pc, #120]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d003      	beq.n	8003166 <HAL_RCC_GetSysClockFreq+0xa6>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d003      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0xac>
 8003164:	e005      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003166:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003168:	617b      	str	r3, [r7, #20]
      break;
 800316a:	e005      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800316c:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800316e:	617b      	str	r3, [r7, #20]
      break;
 8003170:	e002      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	617b      	str	r3, [r7, #20]
      break;
 8003176:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003178:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	3301      	adds	r3, #1
 8003184:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003186:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	0a1b      	lsrs	r3, r3, #8
 800318c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	fb03 f202 	mul.w	r2, r3, r2
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800319e:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	0e5b      	lsrs	r3, r3, #25
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	3301      	adds	r3, #1
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031b8:	69bb      	ldr	r3, [r7, #24]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3724      	adds	r7, #36	; 0x24
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000
 80031cc:	080082b0 	.word	0x080082b0
 80031d0:	00f42400 	.word	0x00f42400
 80031d4:	007a1200 	.word	0x007a1200

080031d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031dc:	4b03      	ldr	r3, [pc, #12]	; (80031ec <HAL_RCC_GetHCLKFreq+0x14>)
 80031de:	681b      	ldr	r3, [r3, #0]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	20000000 	.word	0x20000000

080031f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031f4:	f7ff fff0 	bl	80031d8 <HAL_RCC_GetHCLKFreq>
 80031f8:	4602      	mov	r2, r0
 80031fa:	4b06      	ldr	r3, [pc, #24]	; (8003214 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	4904      	ldr	r1, [pc, #16]	; (8003218 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003206:	5ccb      	ldrb	r3, [r1, r3]
 8003208:	f003 031f 	and.w	r3, r3, #31
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003210:	4618      	mov	r0, r3
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000
 8003218:	080082a8 	.word	0x080082a8

0800321c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003220:	f7ff ffda 	bl	80031d8 <HAL_RCC_GetHCLKFreq>
 8003224:	4602      	mov	r2, r0
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	0adb      	lsrs	r3, r3, #11
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	4904      	ldr	r1, [pc, #16]	; (8003244 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003232:	5ccb      	ldrb	r3, [r1, r3]
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40021000 	.word	0x40021000
 8003244:	080082a8 	.word	0x080082a8

08003248 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	220f      	movs	r2, #15
 8003256:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003258:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <HAL_RCC_GetClockConfig+0x5c>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 0203 	and.w	r2, r3, #3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003264:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800327c:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <HAL_RCC_GetClockConfig+0x5c>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	08db      	lsrs	r3, r3, #3
 8003282:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_RCC_GetClockConfig+0x60>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0207 	and.w	r2, r3, #7
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	601a      	str	r2, [r3, #0]
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40022000 	.word	0x40022000

080032ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032b4:	2300      	movs	r3, #0
 80032b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032b8:	4b2a      	ldr	r3, [pc, #168]	; (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032c4:	f7ff f9bc 	bl	8002640 <HAL_PWREx_GetVoltageRange>
 80032c8:	6178      	str	r0, [r7, #20]
 80032ca:	e014      	b.n	80032f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032cc:	4b25      	ldr	r3, [pc, #148]	; (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	4a24      	ldr	r2, [pc, #144]	; (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d6:	6593      	str	r3, [r2, #88]	; 0x58
 80032d8:	4b22      	ldr	r3, [pc, #136]	; (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032e4:	f7ff f9ac 	bl	8002640 <HAL_PWREx_GetVoltageRange>
 80032e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032ea:	4b1e      	ldr	r3, [pc, #120]	; (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ee:	4a1d      	ldr	r2, [pc, #116]	; (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032fc:	d10b      	bne.n	8003316 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b80      	cmp	r3, #128	; 0x80
 8003302:	d919      	bls.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2ba0      	cmp	r3, #160	; 0xa0
 8003308:	d902      	bls.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800330a:	2302      	movs	r3, #2
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	e013      	b.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003310:	2301      	movs	r3, #1
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	e010      	b.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b80      	cmp	r3, #128	; 0x80
 800331a:	d902      	bls.n	8003322 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800331c:	2303      	movs	r3, #3
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	e00a      	b.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b80      	cmp	r3, #128	; 0x80
 8003326:	d102      	bne.n	800332e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003328:	2302      	movs	r3, #2
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	e004      	b.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b70      	cmp	r3, #112	; 0x70
 8003332:	d101      	bne.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003334:	2301      	movs	r3, #1
 8003336:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f023 0207 	bic.w	r2, r3, #7
 8003340:	4909      	ldr	r1, [pc, #36]	; (8003368 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003348:	4b07      	ldr	r3, [pc, #28]	; (8003368 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	429a      	cmp	r2, r3
 8003354:	d001      	beq.n	800335a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000
 8003368:	40022000 	.word	0x40022000

0800336c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003374:	2300      	movs	r3, #0
 8003376:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003378:	2300      	movs	r3, #0
 800337a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003384:	2b00      	cmp	r3, #0
 8003386:	d041      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800338c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003390:	d02a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003392:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003396:	d824      	bhi.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003398:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800339c:	d008      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800339e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033a2:	d81e      	bhi.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ac:	d010      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033ae:	e018      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033b0:	4b86      	ldr	r3, [pc, #536]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a85      	ldr	r2, [pc, #532]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033bc:	e015      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3304      	adds	r3, #4
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 fabb 	bl	8003940 <RCCEx_PLLSAI1_Config>
 80033ca:	4603      	mov	r3, r0
 80033cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033ce:	e00c      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3320      	adds	r3, #32
 80033d4:	2100      	movs	r1, #0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fba6 	bl	8003b28 <RCCEx_PLLSAI2_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033e0:	e003      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	74fb      	strb	r3, [r7, #19]
      break;
 80033e6:	e000      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ea:	7cfb      	ldrb	r3, [r7, #19]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10b      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033f0:	4b76      	ldr	r3, [pc, #472]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033fe:	4973      	ldr	r1, [pc, #460]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003406:	e001      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003408:	7cfb      	ldrb	r3, [r7, #19]
 800340a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d041      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800341c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003420:	d02a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003422:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003426:	d824      	bhi.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800342c:	d008      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800342e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003432:	d81e      	bhi.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800343c:	d010      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800343e:	e018      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003440:	4b62      	ldr	r3, [pc, #392]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4a61      	ldr	r2, [pc, #388]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800344c:	e015      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3304      	adds	r3, #4
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fa73 	bl	8003940 <RCCEx_PLLSAI1_Config>
 800345a:	4603      	mov	r3, r0
 800345c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800345e:	e00c      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3320      	adds	r3, #32
 8003464:	2100      	movs	r1, #0
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fb5e 	bl	8003b28 <RCCEx_PLLSAI2_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003470:	e003      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	74fb      	strb	r3, [r7, #19]
      break;
 8003476:	e000      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003478:	bf00      	nop
    }

    if(ret == HAL_OK)
 800347a:	7cfb      	ldrb	r3, [r7, #19]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10b      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003480:	4b52      	ldr	r3, [pc, #328]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800348e:	494f      	ldr	r1, [pc, #316]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003496:	e001      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	7cfb      	ldrb	r3, [r7, #19]
 800349a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80a0 	beq.w	80035ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034aa:	2300      	movs	r3, #0
 80034ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034ae:	4b47      	ldr	r3, [pc, #284]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034be:	2300      	movs	r3, #0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00d      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c4:	4b41      	ldr	r3, [pc, #260]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	4a40      	ldr	r2, [pc, #256]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ce:	6593      	str	r3, [r2, #88]	; 0x58
 80034d0:	4b3e      	ldr	r3, [pc, #248]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034dc:	2301      	movs	r3, #1
 80034de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034e0:	4b3b      	ldr	r3, [pc, #236]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a3a      	ldr	r2, [pc, #232]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034ec:	f7fd fd10 	bl	8000f10 <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034f2:	e009      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f4:	f7fd fd0c 	bl	8000f10 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d902      	bls.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	74fb      	strb	r3, [r7, #19]
        break;
 8003506:	e005      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003508:	4b31      	ldr	r3, [pc, #196]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0ef      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003514:	7cfb      	ldrb	r3, [r7, #19]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d15c      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800351a:	4b2c      	ldr	r3, [pc, #176]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003524:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01f      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	429a      	cmp	r2, r3
 8003536:	d019      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003538:	4b24      	ldr	r3, [pc, #144]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003542:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003544:	4b21      	ldr	r3, [pc, #132]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	4a20      	ldr	r2, [pc, #128]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003554:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355a:	4a1c      	ldr	r2, [pc, #112]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800355c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003564:	4a19      	ldr	r2, [pc, #100]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d016      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003576:	f7fd fccb 	bl	8000f10 <HAL_GetTick>
 800357a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800357c:	e00b      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357e:	f7fd fcc7 	bl	8000f10 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f241 3288 	movw	r2, #5000	; 0x1388
 800358c:	4293      	cmp	r3, r2
 800358e:	d902      	bls.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	74fb      	strb	r3, [r7, #19]
            break;
 8003594:	e006      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003596:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ec      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035aa:	4b08      	ldr	r3, [pc, #32]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ba:	4904      	ldr	r1, [pc, #16]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035c2:	e009      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	74bb      	strb	r3, [r7, #18]
 80035c8:	e006      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035d8:	7c7b      	ldrb	r3, [r7, #17]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d105      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035de:	4b9e      	ldr	r3, [pc, #632]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	4a9d      	ldr	r2, [pc, #628]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035f6:	4b98      	ldr	r3, [pc, #608]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fc:	f023 0203 	bic.w	r2, r3, #3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	4994      	ldr	r1, [pc, #592]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003618:	4b8f      	ldr	r3, [pc, #572]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361e:	f023 020c 	bic.w	r2, r3, #12
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003626:	498c      	ldr	r1, [pc, #560]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800363a:	4b87      	ldr	r3, [pc, #540]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003640:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	4983      	ldr	r1, [pc, #524]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800365c:	4b7e      	ldr	r3, [pc, #504]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003662:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	497b      	ldr	r1, [pc, #492]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800367e:	4b76      	ldr	r3, [pc, #472]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368c:	4972      	ldr	r1, [pc, #456]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036a0:	4b6d      	ldr	r3, [pc, #436]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ae:	496a      	ldr	r1, [pc, #424]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036c2:	4b65      	ldr	r3, [pc, #404]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d0:	4961      	ldr	r1, [pc, #388]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036e4:	4b5c      	ldr	r3, [pc, #368]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f2:	4959      	ldr	r1, [pc, #356]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003706:	4b54      	ldr	r3, [pc, #336]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003714:	4950      	ldr	r1, [pc, #320]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003728:	4b4b      	ldr	r3, [pc, #300]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003736:	4948      	ldr	r1, [pc, #288]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800374a:	4b43      	ldr	r3, [pc, #268]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003750:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	493f      	ldr	r1, [pc, #252]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d028      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800376c:	4b3a      	ldr	r3, [pc, #232]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800377a:	4937      	ldr	r1, [pc, #220]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800378a:	d106      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800378c:	4b32      	ldr	r3, [pc, #200]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a31      	ldr	r2, [pc, #196]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003796:	60d3      	str	r3, [r2, #12]
 8003798:	e011      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800379e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a2:	d10c      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	2101      	movs	r1, #1
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f8c8 	bl	8003940 <RCCEx_PLLSAI1_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d028      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037ca:	4b23      	ldr	r3, [pc, #140]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d8:	491f      	ldr	r1, [pc, #124]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037e8:	d106      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ea:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	4a1a      	ldr	r2, [pc, #104]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f4:	60d3      	str	r3, [r2, #12]
 80037f6:	e011      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003800:	d10c      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3304      	adds	r3, #4
 8003806:	2101      	movs	r1, #1
 8003808:	4618      	mov	r0, r3
 800380a:	f000 f899 	bl	8003940 <RCCEx_PLLSAI1_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003812:	7cfb      	ldrb	r3, [r7, #19]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d02b      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003836:	4908      	ldr	r1, [pc, #32]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003846:	d109      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003848:	4b03      	ldr	r3, [pc, #12]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a02      	ldr	r2, [pc, #8]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003852:	60d3      	str	r3, [r2, #12]
 8003854:	e014      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003860:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003864:	d10c      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3304      	adds	r3, #4
 800386a:	2101      	movs	r1, #1
 800386c:	4618      	mov	r0, r3
 800386e:	f000 f867 	bl	8003940 <RCCEx_PLLSAI1_Config>
 8003872:	4603      	mov	r3, r0
 8003874:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003876:	7cfb      	ldrb	r3, [r7, #19]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800387c:	7cfb      	ldrb	r3, [r7, #19]
 800387e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d02f      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800388c:	4b2b      	ldr	r3, [pc, #172]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003892:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800389a:	4928      	ldr	r1, [pc, #160]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038aa:	d10d      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3304      	adds	r3, #4
 80038b0:	2102      	movs	r1, #2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f844 	bl	8003940 <RCCEx_PLLSAI1_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038bc:	7cfb      	ldrb	r3, [r7, #19]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d014      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038c2:	7cfb      	ldrb	r3, [r7, #19]
 80038c4:	74bb      	strb	r3, [r7, #18]
 80038c6:	e011      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d0:	d10c      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3320      	adds	r3, #32
 80038d6:	2102      	movs	r1, #2
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 f925 	bl	8003b28 <RCCEx_PLLSAI2_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038e8:	7cfb      	ldrb	r3, [r7, #19]
 80038ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038f8:	4b10      	ldr	r3, [pc, #64]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003906:	490d      	ldr	r1, [pc, #52]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800391c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003920:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800392a:	4904      	ldr	r1, [pc, #16]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003932:	7cbb      	ldrb	r3, [r7, #18]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40021000 	.word	0x40021000

08003940 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800394e:	4b75      	ldr	r3, [pc, #468]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d018      	beq.n	800398c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800395a:	4b72      	ldr	r3, [pc, #456]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0203 	and.w	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d10d      	bne.n	8003986 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
       ||
 800396e:	2b00      	cmp	r3, #0
 8003970:	d009      	beq.n	8003986 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003972:	4b6c      	ldr	r3, [pc, #432]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
       ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d047      	beq.n	8003a16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	73fb      	strb	r3, [r7, #15]
 800398a:	e044      	b.n	8003a16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b03      	cmp	r3, #3
 8003992:	d018      	beq.n	80039c6 <RCCEx_PLLSAI1_Config+0x86>
 8003994:	2b03      	cmp	r3, #3
 8003996:	d825      	bhi.n	80039e4 <RCCEx_PLLSAI1_Config+0xa4>
 8003998:	2b01      	cmp	r3, #1
 800399a:	d002      	beq.n	80039a2 <RCCEx_PLLSAI1_Config+0x62>
 800399c:	2b02      	cmp	r3, #2
 800399e:	d009      	beq.n	80039b4 <RCCEx_PLLSAI1_Config+0x74>
 80039a0:	e020      	b.n	80039e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039a2:	4b60      	ldr	r3, [pc, #384]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d11d      	bne.n	80039ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b2:	e01a      	b.n	80039ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039b4:	4b5b      	ldr	r3, [pc, #364]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d116      	bne.n	80039ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c4:	e013      	b.n	80039ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039c6:	4b57      	ldr	r3, [pc, #348]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10f      	bne.n	80039f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039d2:	4b54      	ldr	r3, [pc, #336]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039e2:	e006      	b.n	80039f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
      break;
 80039e8:	e004      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ea:	bf00      	nop
 80039ec:	e002      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ee:	bf00      	nop
 80039f0:	e000      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10d      	bne.n	8003a16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039fa:	4b4a      	ldr	r3, [pc, #296]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6819      	ldr	r1, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	4944      	ldr	r1, [pc, #272]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d17d      	bne.n	8003b18 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a1c:	4b41      	ldr	r3, [pc, #260]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a40      	ldr	r2, [pc, #256]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a28:	f7fd fa72 	bl	8000f10 <HAL_GetTick>
 8003a2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a2e:	e009      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a30:	f7fd fa6e 	bl	8000f10 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d902      	bls.n	8003a44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	73fb      	strb	r3, [r7, #15]
        break;
 8003a42:	e005      	b.n	8003a50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a44:	4b37      	ldr	r3, [pc, #220]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1ef      	bne.n	8003a30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d160      	bne.n	8003b18 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d111      	bne.n	8003a80 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a5c:	4b31      	ldr	r3, [pc, #196]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6892      	ldr	r2, [r2, #8]
 8003a6c:	0211      	lsls	r1, r2, #8
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68d2      	ldr	r2, [r2, #12]
 8003a72:	0912      	lsrs	r2, r2, #4
 8003a74:	0452      	lsls	r2, r2, #17
 8003a76:	430a      	orrs	r2, r1
 8003a78:	492a      	ldr	r1, [pc, #168]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	610b      	str	r3, [r1, #16]
 8003a7e:	e027      	b.n	8003ad0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d112      	bne.n	8003aac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a86:	4b27      	ldr	r3, [pc, #156]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6892      	ldr	r2, [r2, #8]
 8003a96:	0211      	lsls	r1, r2, #8
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6912      	ldr	r2, [r2, #16]
 8003a9c:	0852      	lsrs	r2, r2, #1
 8003a9e:	3a01      	subs	r2, #1
 8003aa0:	0552      	lsls	r2, r2, #21
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	491f      	ldr	r1, [pc, #124]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	610b      	str	r3, [r1, #16]
 8003aaa:	e011      	b.n	8003ad0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aac:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ab4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6892      	ldr	r2, [r2, #8]
 8003abc:	0211      	lsls	r1, r2, #8
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6952      	ldr	r2, [r2, #20]
 8003ac2:	0852      	lsrs	r2, r2, #1
 8003ac4:	3a01      	subs	r2, #1
 8003ac6:	0652      	lsls	r2, r2, #25
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	4916      	ldr	r1, [pc, #88]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ad0:	4b14      	ldr	r3, [pc, #80]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ada:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003adc:	f7fd fa18 	bl	8000f10 <HAL_GetTick>
 8003ae0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ae2:	e009      	b.n	8003af8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ae4:	f7fd fa14 	bl	8000f10 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d902      	bls.n	8003af8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	73fb      	strb	r3, [r7, #15]
          break;
 8003af6:	e005      	b.n	8003b04 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ef      	beq.n	8003ae4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d106      	bne.n	8003b18 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b0a:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	4904      	ldr	r1, [pc, #16]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000

08003b28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b36:	4b6a      	ldr	r3, [pc, #424]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d018      	beq.n	8003b74 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b42:	4b67      	ldr	r3, [pc, #412]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 0203 	and.w	r2, r3, #3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d10d      	bne.n	8003b6e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
       ||
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b5a:	4b61      	ldr	r3, [pc, #388]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
       ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d047      	beq.n	8003bfe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
 8003b72:	e044      	b.n	8003bfe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d018      	beq.n	8003bae <RCCEx_PLLSAI2_Config+0x86>
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d825      	bhi.n	8003bcc <RCCEx_PLLSAI2_Config+0xa4>
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d002      	beq.n	8003b8a <RCCEx_PLLSAI2_Config+0x62>
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d009      	beq.n	8003b9c <RCCEx_PLLSAI2_Config+0x74>
 8003b88:	e020      	b.n	8003bcc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b8a:	4b55      	ldr	r3, [pc, #340]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d11d      	bne.n	8003bd2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b9a:	e01a      	b.n	8003bd2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b9c:	4b50      	ldr	r3, [pc, #320]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d116      	bne.n	8003bd6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bac:	e013      	b.n	8003bd6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bae:	4b4c      	ldr	r3, [pc, #304]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10f      	bne.n	8003bda <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bba:	4b49      	ldr	r3, [pc, #292]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d109      	bne.n	8003bda <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bca:	e006      	b.n	8003bda <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd0:	e004      	b.n	8003bdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bd2:	bf00      	nop
 8003bd4:	e002      	b.n	8003bdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bd6:	bf00      	nop
 8003bd8:	e000      	b.n	8003bdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bda:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10d      	bne.n	8003bfe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003be2:	4b3f      	ldr	r3, [pc, #252]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6819      	ldr	r1, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	4939      	ldr	r1, [pc, #228]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d167      	bne.n	8003cd4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c04:	4b36      	ldr	r3, [pc, #216]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a35      	ldr	r2, [pc, #212]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c10:	f7fd f97e 	bl	8000f10 <HAL_GetTick>
 8003c14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c16:	e009      	b.n	8003c2c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c18:	f7fd f97a 	bl	8000f10 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d902      	bls.n	8003c2c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	73fb      	strb	r3, [r7, #15]
        break;
 8003c2a:	e005      	b.n	8003c38 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c2c:	4b2c      	ldr	r3, [pc, #176]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1ef      	bne.n	8003c18 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d14a      	bne.n	8003cd4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d111      	bne.n	8003c68 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c44:	4b26      	ldr	r3, [pc, #152]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6892      	ldr	r2, [r2, #8]
 8003c54:	0211      	lsls	r1, r2, #8
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	68d2      	ldr	r2, [r2, #12]
 8003c5a:	0912      	lsrs	r2, r2, #4
 8003c5c:	0452      	lsls	r2, r2, #17
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	491f      	ldr	r1, [pc, #124]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	614b      	str	r3, [r1, #20]
 8003c66:	e011      	b.n	8003c8c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c68:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6892      	ldr	r2, [r2, #8]
 8003c78:	0211      	lsls	r1, r2, #8
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6912      	ldr	r2, [r2, #16]
 8003c7e:	0852      	lsrs	r2, r2, #1
 8003c80:	3a01      	subs	r2, #1
 8003c82:	0652      	lsls	r2, r2, #25
 8003c84:	430a      	orrs	r2, r1
 8003c86:	4916      	ldr	r1, [pc, #88]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c8c:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a13      	ldr	r2, [pc, #76]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c98:	f7fd f93a 	bl	8000f10 <HAL_GetTick>
 8003c9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c9e:	e009      	b.n	8003cb4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ca0:	f7fd f936 	bl	8000f10 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d902      	bls.n	8003cb4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	73fb      	strb	r3, [r7, #15]
          break;
 8003cb2:	e005      	b.n	8003cc0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0ef      	beq.n	8003ca0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003cc6:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	4904      	ldr	r1, [pc, #16]	; (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40021000 	.word	0x40021000

08003ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e049      	b.n	8003d8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f841 	bl	8003d92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4619      	mov	r1, r3
 8003d22:	4610      	mov	r0, r2
 8003d24:	f000 f9f8 	bl	8004118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
	...

08003da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d001      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e04f      	b.n	8003e60 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a23      	ldr	r2, [pc, #140]	; (8003e6c <HAL_TIM_Base_Start_IT+0xc4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01d      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x76>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dea:	d018      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x76>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1f      	ldr	r2, [pc, #124]	; (8003e70 <HAL_TIM_Base_Start_IT+0xc8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x76>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1e      	ldr	r2, [pc, #120]	; (8003e74 <HAL_TIM_Base_Start_IT+0xcc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00e      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x76>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d009      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x76>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1b      	ldr	r2, [pc, #108]	; (8003e7c <HAL_TIM_Base_Start_IT+0xd4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d004      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x76>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a19      	ldr	r2, [pc, #100]	; (8003e80 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d115      	bne.n	8003e4a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b06      	cmp	r3, #6
 8003e2e:	d015      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0xb4>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e36:	d011      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e48:	e008      	b.n	8003e5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0201 	orr.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e000      	b.n	8003e5e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	40012c00 	.word	0x40012c00
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40000800 	.word	0x40000800
 8003e78:	40000c00 	.word	0x40000c00
 8003e7c:	40013400 	.word	0x40013400
 8003e80:	40014000 	.word	0x40014000
 8003e84:	00010007 	.word	0x00010007

08003e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d122      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d11b      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0202 	mvn.w	r2, #2
 8003eb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f905 	bl	80040da <HAL_TIM_IC_CaptureCallback>
 8003ed0:	e005      	b.n	8003ede <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f8f7 	bl	80040c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f908 	bl	80040ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d122      	bne.n	8003f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d11b      	bne.n	8003f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0204 	mvn.w	r2, #4
 8003f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f8db 	bl	80040da <HAL_TIM_IC_CaptureCallback>
 8003f24:	e005      	b.n	8003f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f8cd 	bl	80040c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f8de 	bl	80040ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d122      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d11b      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0208 	mvn.w	r2, #8
 8003f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2204      	movs	r2, #4
 8003f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f8b1 	bl	80040da <HAL_TIM_IC_CaptureCallback>
 8003f78:	e005      	b.n	8003f86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f8a3 	bl	80040c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f8b4 	bl	80040ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b10      	cmp	r3, #16
 8003f98:	d122      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b10      	cmp	r3, #16
 8003fa6:	d11b      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0210 	mvn.w	r2, #16
 8003fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f887 	bl	80040da <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f879 	bl	80040c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f88a 	bl	80040ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d10e      	bne.n	800400c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d107      	bne.n	800400c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0201 	mvn.w	r2, #1
 8004004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fc fcd0 	bl	80009ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	2b80      	cmp	r3, #128	; 0x80
 8004018:	d10e      	bne.n	8004038 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b80      	cmp	r3, #128	; 0x80
 8004026:	d107      	bne.n	8004038 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f914 	bl	8004260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004046:	d10e      	bne.n	8004066 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004052:	2b80      	cmp	r3, #128	; 0x80
 8004054:	d107      	bne.n	8004066 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800405e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f907 	bl	8004274 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d10e      	bne.n	8004092 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407e:	2b40      	cmp	r3, #64	; 0x40
 8004080:	d107      	bne.n	8004092 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800408a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f838 	bl	8004102 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b20      	cmp	r3, #32
 800409e:	d10e      	bne.n	80040be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d107      	bne.n	80040be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f06f 0220 	mvn.w	r2, #32
 80040b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f8c7 	bl	800424c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a40      	ldr	r2, [pc, #256]	; (800422c <TIM_Base_SetConfig+0x114>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d013      	beq.n	8004158 <TIM_Base_SetConfig+0x40>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004136:	d00f      	beq.n	8004158 <TIM_Base_SetConfig+0x40>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a3d      	ldr	r2, [pc, #244]	; (8004230 <TIM_Base_SetConfig+0x118>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00b      	beq.n	8004158 <TIM_Base_SetConfig+0x40>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a3c      	ldr	r2, [pc, #240]	; (8004234 <TIM_Base_SetConfig+0x11c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d007      	beq.n	8004158 <TIM_Base_SetConfig+0x40>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a3b      	ldr	r2, [pc, #236]	; (8004238 <TIM_Base_SetConfig+0x120>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d003      	beq.n	8004158 <TIM_Base_SetConfig+0x40>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a3a      	ldr	r2, [pc, #232]	; (800423c <TIM_Base_SetConfig+0x124>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d108      	bne.n	800416a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a2f      	ldr	r2, [pc, #188]	; (800422c <TIM_Base_SetConfig+0x114>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d01f      	beq.n	80041b2 <TIM_Base_SetConfig+0x9a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004178:	d01b      	beq.n	80041b2 <TIM_Base_SetConfig+0x9a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a2c      	ldr	r2, [pc, #176]	; (8004230 <TIM_Base_SetConfig+0x118>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d017      	beq.n	80041b2 <TIM_Base_SetConfig+0x9a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a2b      	ldr	r2, [pc, #172]	; (8004234 <TIM_Base_SetConfig+0x11c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d013      	beq.n	80041b2 <TIM_Base_SetConfig+0x9a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a2a      	ldr	r2, [pc, #168]	; (8004238 <TIM_Base_SetConfig+0x120>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00f      	beq.n	80041b2 <TIM_Base_SetConfig+0x9a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a29      	ldr	r2, [pc, #164]	; (800423c <TIM_Base_SetConfig+0x124>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00b      	beq.n	80041b2 <TIM_Base_SetConfig+0x9a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a28      	ldr	r2, [pc, #160]	; (8004240 <TIM_Base_SetConfig+0x128>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d007      	beq.n	80041b2 <TIM_Base_SetConfig+0x9a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a27      	ldr	r2, [pc, #156]	; (8004244 <TIM_Base_SetConfig+0x12c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d003      	beq.n	80041b2 <TIM_Base_SetConfig+0x9a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a26      	ldr	r2, [pc, #152]	; (8004248 <TIM_Base_SetConfig+0x130>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d108      	bne.n	80041c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a10      	ldr	r2, [pc, #64]	; (800422c <TIM_Base_SetConfig+0x114>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00f      	beq.n	8004210 <TIM_Base_SetConfig+0xf8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a12      	ldr	r2, [pc, #72]	; (800423c <TIM_Base_SetConfig+0x124>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00b      	beq.n	8004210 <TIM_Base_SetConfig+0xf8>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a11      	ldr	r2, [pc, #68]	; (8004240 <TIM_Base_SetConfig+0x128>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d007      	beq.n	8004210 <TIM_Base_SetConfig+0xf8>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a10      	ldr	r2, [pc, #64]	; (8004244 <TIM_Base_SetConfig+0x12c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d003      	beq.n	8004210 <TIM_Base_SetConfig+0xf8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a0f      	ldr	r2, [pc, #60]	; (8004248 <TIM_Base_SetConfig+0x130>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d103      	bne.n	8004218 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	615a      	str	r2, [r3, #20]
}
 800421e:	bf00      	nop
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40012c00 	.word	0x40012c00
 8004230:	40000400 	.word	0x40000400
 8004234:	40000800 	.word	0x40000800
 8004238:	40000c00 	.word	0x40000c00
 800423c:	40013400 	.word	0x40013400
 8004240:	40014000 	.word	0x40014000
 8004244:	40014400 	.word	0x40014400
 8004248:	40014800 	.word	0x40014800

0800424c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e040      	b.n	800431c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fc fcca 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2224      	movs	r2, #36	; 0x24
 80042b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0201 	bic.w	r2, r2, #1
 80042c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f82c 	bl	8004324 <UART_SetConfig>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e022      	b.n	800431c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fad8 	bl	8004894 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004302:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fb5f 	bl	80049d8 <UART_CheckIdleState>
 800431a:	4603      	mov	r3, r0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004328:	b08a      	sub	sp, #40	; 0x28
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	431a      	orrs	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	431a      	orrs	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	4313      	orrs	r3, r2
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	4ba4      	ldr	r3, [pc, #656]	; (80045e4 <UART_SetConfig+0x2c0>)
 8004354:	4013      	ands	r3, r2
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800435c:	430b      	orrs	r3, r1
 800435e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a99      	ldr	r2, [pc, #612]	; (80045e8 <UART_SetConfig+0x2c4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d004      	beq.n	8004390 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438c:	4313      	orrs	r3, r2
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a0:	430a      	orrs	r2, r1
 80043a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a90      	ldr	r2, [pc, #576]	; (80045ec <UART_SetConfig+0x2c8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d126      	bne.n	80043fc <UART_SetConfig+0xd8>
 80043ae:	4b90      	ldr	r3, [pc, #576]	; (80045f0 <UART_SetConfig+0x2cc>)
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d81b      	bhi.n	80043f4 <UART_SetConfig+0xd0>
 80043bc:	a201      	add	r2, pc, #4	; (adr r2, 80043c4 <UART_SetConfig+0xa0>)
 80043be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c2:	bf00      	nop
 80043c4:	080043d5 	.word	0x080043d5
 80043c8:	080043e5 	.word	0x080043e5
 80043cc:	080043dd 	.word	0x080043dd
 80043d0:	080043ed 	.word	0x080043ed
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043da:	e116      	b.n	800460a <UART_SetConfig+0x2e6>
 80043dc:	2302      	movs	r3, #2
 80043de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e2:	e112      	b.n	800460a <UART_SetConfig+0x2e6>
 80043e4:	2304      	movs	r3, #4
 80043e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ea:	e10e      	b.n	800460a <UART_SetConfig+0x2e6>
 80043ec:	2308      	movs	r3, #8
 80043ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f2:	e10a      	b.n	800460a <UART_SetConfig+0x2e6>
 80043f4:	2310      	movs	r3, #16
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fa:	e106      	b.n	800460a <UART_SetConfig+0x2e6>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a7c      	ldr	r2, [pc, #496]	; (80045f4 <UART_SetConfig+0x2d0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d138      	bne.n	8004478 <UART_SetConfig+0x154>
 8004406:	4b7a      	ldr	r3, [pc, #488]	; (80045f0 <UART_SetConfig+0x2cc>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440c:	f003 030c 	and.w	r3, r3, #12
 8004410:	2b0c      	cmp	r3, #12
 8004412:	d82d      	bhi.n	8004470 <UART_SetConfig+0x14c>
 8004414:	a201      	add	r2, pc, #4	; (adr r2, 800441c <UART_SetConfig+0xf8>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	08004451 	.word	0x08004451
 8004420:	08004471 	.word	0x08004471
 8004424:	08004471 	.word	0x08004471
 8004428:	08004471 	.word	0x08004471
 800442c:	08004461 	.word	0x08004461
 8004430:	08004471 	.word	0x08004471
 8004434:	08004471 	.word	0x08004471
 8004438:	08004471 	.word	0x08004471
 800443c:	08004459 	.word	0x08004459
 8004440:	08004471 	.word	0x08004471
 8004444:	08004471 	.word	0x08004471
 8004448:	08004471 	.word	0x08004471
 800444c:	08004469 	.word	0x08004469
 8004450:	2300      	movs	r3, #0
 8004452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004456:	e0d8      	b.n	800460a <UART_SetConfig+0x2e6>
 8004458:	2302      	movs	r3, #2
 800445a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800445e:	e0d4      	b.n	800460a <UART_SetConfig+0x2e6>
 8004460:	2304      	movs	r3, #4
 8004462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004466:	e0d0      	b.n	800460a <UART_SetConfig+0x2e6>
 8004468:	2308      	movs	r3, #8
 800446a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446e:	e0cc      	b.n	800460a <UART_SetConfig+0x2e6>
 8004470:	2310      	movs	r3, #16
 8004472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004476:	e0c8      	b.n	800460a <UART_SetConfig+0x2e6>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a5e      	ldr	r2, [pc, #376]	; (80045f8 <UART_SetConfig+0x2d4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d125      	bne.n	80044ce <UART_SetConfig+0x1aa>
 8004482:	4b5b      	ldr	r3, [pc, #364]	; (80045f0 <UART_SetConfig+0x2cc>)
 8004484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004488:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800448c:	2b30      	cmp	r3, #48	; 0x30
 800448e:	d016      	beq.n	80044be <UART_SetConfig+0x19a>
 8004490:	2b30      	cmp	r3, #48	; 0x30
 8004492:	d818      	bhi.n	80044c6 <UART_SetConfig+0x1a2>
 8004494:	2b20      	cmp	r3, #32
 8004496:	d00a      	beq.n	80044ae <UART_SetConfig+0x18a>
 8004498:	2b20      	cmp	r3, #32
 800449a:	d814      	bhi.n	80044c6 <UART_SetConfig+0x1a2>
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <UART_SetConfig+0x182>
 80044a0:	2b10      	cmp	r3, #16
 80044a2:	d008      	beq.n	80044b6 <UART_SetConfig+0x192>
 80044a4:	e00f      	b.n	80044c6 <UART_SetConfig+0x1a2>
 80044a6:	2300      	movs	r3, #0
 80044a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ac:	e0ad      	b.n	800460a <UART_SetConfig+0x2e6>
 80044ae:	2302      	movs	r3, #2
 80044b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b4:	e0a9      	b.n	800460a <UART_SetConfig+0x2e6>
 80044b6:	2304      	movs	r3, #4
 80044b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044bc:	e0a5      	b.n	800460a <UART_SetConfig+0x2e6>
 80044be:	2308      	movs	r3, #8
 80044c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c4:	e0a1      	b.n	800460a <UART_SetConfig+0x2e6>
 80044c6:	2310      	movs	r3, #16
 80044c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044cc:	e09d      	b.n	800460a <UART_SetConfig+0x2e6>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a4a      	ldr	r2, [pc, #296]	; (80045fc <UART_SetConfig+0x2d8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d125      	bne.n	8004524 <UART_SetConfig+0x200>
 80044d8:	4b45      	ldr	r3, [pc, #276]	; (80045f0 <UART_SetConfig+0x2cc>)
 80044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044e2:	2bc0      	cmp	r3, #192	; 0xc0
 80044e4:	d016      	beq.n	8004514 <UART_SetConfig+0x1f0>
 80044e6:	2bc0      	cmp	r3, #192	; 0xc0
 80044e8:	d818      	bhi.n	800451c <UART_SetConfig+0x1f8>
 80044ea:	2b80      	cmp	r3, #128	; 0x80
 80044ec:	d00a      	beq.n	8004504 <UART_SetConfig+0x1e0>
 80044ee:	2b80      	cmp	r3, #128	; 0x80
 80044f0:	d814      	bhi.n	800451c <UART_SetConfig+0x1f8>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <UART_SetConfig+0x1d8>
 80044f6:	2b40      	cmp	r3, #64	; 0x40
 80044f8:	d008      	beq.n	800450c <UART_SetConfig+0x1e8>
 80044fa:	e00f      	b.n	800451c <UART_SetConfig+0x1f8>
 80044fc:	2300      	movs	r3, #0
 80044fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004502:	e082      	b.n	800460a <UART_SetConfig+0x2e6>
 8004504:	2302      	movs	r3, #2
 8004506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800450a:	e07e      	b.n	800460a <UART_SetConfig+0x2e6>
 800450c:	2304      	movs	r3, #4
 800450e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004512:	e07a      	b.n	800460a <UART_SetConfig+0x2e6>
 8004514:	2308      	movs	r3, #8
 8004516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800451a:	e076      	b.n	800460a <UART_SetConfig+0x2e6>
 800451c:	2310      	movs	r3, #16
 800451e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004522:	e072      	b.n	800460a <UART_SetConfig+0x2e6>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a35      	ldr	r2, [pc, #212]	; (8004600 <UART_SetConfig+0x2dc>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d12a      	bne.n	8004584 <UART_SetConfig+0x260>
 800452e:	4b30      	ldr	r3, [pc, #192]	; (80045f0 <UART_SetConfig+0x2cc>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004538:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800453c:	d01a      	beq.n	8004574 <UART_SetConfig+0x250>
 800453e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004542:	d81b      	bhi.n	800457c <UART_SetConfig+0x258>
 8004544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004548:	d00c      	beq.n	8004564 <UART_SetConfig+0x240>
 800454a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800454e:	d815      	bhi.n	800457c <UART_SetConfig+0x258>
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <UART_SetConfig+0x238>
 8004554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004558:	d008      	beq.n	800456c <UART_SetConfig+0x248>
 800455a:	e00f      	b.n	800457c <UART_SetConfig+0x258>
 800455c:	2300      	movs	r3, #0
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004562:	e052      	b.n	800460a <UART_SetConfig+0x2e6>
 8004564:	2302      	movs	r3, #2
 8004566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456a:	e04e      	b.n	800460a <UART_SetConfig+0x2e6>
 800456c:	2304      	movs	r3, #4
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004572:	e04a      	b.n	800460a <UART_SetConfig+0x2e6>
 8004574:	2308      	movs	r3, #8
 8004576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800457a:	e046      	b.n	800460a <UART_SetConfig+0x2e6>
 800457c:	2310      	movs	r3, #16
 800457e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004582:	e042      	b.n	800460a <UART_SetConfig+0x2e6>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a17      	ldr	r2, [pc, #92]	; (80045e8 <UART_SetConfig+0x2c4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d13a      	bne.n	8004604 <UART_SetConfig+0x2e0>
 800458e:	4b18      	ldr	r3, [pc, #96]	; (80045f0 <UART_SetConfig+0x2cc>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004594:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004598:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800459c:	d01a      	beq.n	80045d4 <UART_SetConfig+0x2b0>
 800459e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045a2:	d81b      	bhi.n	80045dc <UART_SetConfig+0x2b8>
 80045a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a8:	d00c      	beq.n	80045c4 <UART_SetConfig+0x2a0>
 80045aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ae:	d815      	bhi.n	80045dc <UART_SetConfig+0x2b8>
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <UART_SetConfig+0x298>
 80045b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b8:	d008      	beq.n	80045cc <UART_SetConfig+0x2a8>
 80045ba:	e00f      	b.n	80045dc <UART_SetConfig+0x2b8>
 80045bc:	2300      	movs	r3, #0
 80045be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c2:	e022      	b.n	800460a <UART_SetConfig+0x2e6>
 80045c4:	2302      	movs	r3, #2
 80045c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ca:	e01e      	b.n	800460a <UART_SetConfig+0x2e6>
 80045cc:	2304      	movs	r3, #4
 80045ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045d2:	e01a      	b.n	800460a <UART_SetConfig+0x2e6>
 80045d4:	2308      	movs	r3, #8
 80045d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045da:	e016      	b.n	800460a <UART_SetConfig+0x2e6>
 80045dc:	2310      	movs	r3, #16
 80045de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e2:	e012      	b.n	800460a <UART_SetConfig+0x2e6>
 80045e4:	efff69f3 	.word	0xefff69f3
 80045e8:	40008000 	.word	0x40008000
 80045ec:	40013800 	.word	0x40013800
 80045f0:	40021000 	.word	0x40021000
 80045f4:	40004400 	.word	0x40004400
 80045f8:	40004800 	.word	0x40004800
 80045fc:	40004c00 	.word	0x40004c00
 8004600:	40005000 	.word	0x40005000
 8004604:	2310      	movs	r3, #16
 8004606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a9f      	ldr	r2, [pc, #636]	; (800488c <UART_SetConfig+0x568>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d17a      	bne.n	800470a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004614:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004618:	2b08      	cmp	r3, #8
 800461a:	d824      	bhi.n	8004666 <UART_SetConfig+0x342>
 800461c:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <UART_SetConfig+0x300>)
 800461e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004622:	bf00      	nop
 8004624:	08004649 	.word	0x08004649
 8004628:	08004667 	.word	0x08004667
 800462c:	08004651 	.word	0x08004651
 8004630:	08004667 	.word	0x08004667
 8004634:	08004657 	.word	0x08004657
 8004638:	08004667 	.word	0x08004667
 800463c:	08004667 	.word	0x08004667
 8004640:	08004667 	.word	0x08004667
 8004644:	0800465f 	.word	0x0800465f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004648:	f7fe fdd2 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 800464c:	61f8      	str	r0, [r7, #28]
        break;
 800464e:	e010      	b.n	8004672 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004650:	4b8f      	ldr	r3, [pc, #572]	; (8004890 <UART_SetConfig+0x56c>)
 8004652:	61fb      	str	r3, [r7, #28]
        break;
 8004654:	e00d      	b.n	8004672 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004656:	f7fe fd33 	bl	80030c0 <HAL_RCC_GetSysClockFreq>
 800465a:	61f8      	str	r0, [r7, #28]
        break;
 800465c:	e009      	b.n	8004672 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800465e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004662:	61fb      	str	r3, [r7, #28]
        break;
 8004664:	e005      	b.n	8004672 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004670:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 80fb 	beq.w	8004870 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	4413      	add	r3, r2
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	429a      	cmp	r2, r3
 8004688:	d305      	bcc.n	8004696 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	429a      	cmp	r2, r3
 8004694:	d903      	bls.n	800469e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800469c:	e0e8      	b.n	8004870 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	2200      	movs	r2, #0
 80046a2:	461c      	mov	r4, r3
 80046a4:	4615      	mov	r5, r2
 80046a6:	f04f 0200 	mov.w	r2, #0
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	022b      	lsls	r3, r5, #8
 80046b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80046b4:	0222      	lsls	r2, r4, #8
 80046b6:	68f9      	ldr	r1, [r7, #12]
 80046b8:	6849      	ldr	r1, [r1, #4]
 80046ba:	0849      	lsrs	r1, r1, #1
 80046bc:	2000      	movs	r0, #0
 80046be:	4688      	mov	r8, r1
 80046c0:	4681      	mov	r9, r0
 80046c2:	eb12 0a08 	adds.w	sl, r2, r8
 80046c6:	eb43 0b09 	adc.w	fp, r3, r9
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	603b      	str	r3, [r7, #0]
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046d8:	4650      	mov	r0, sl
 80046da:	4659      	mov	r1, fp
 80046dc:	f7fb fd78 	bl	80001d0 <__aeabi_uldivmod>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4613      	mov	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ee:	d308      	bcc.n	8004702 <UART_SetConfig+0x3de>
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046f6:	d204      	bcs.n	8004702 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	60da      	str	r2, [r3, #12]
 8004700:	e0b6      	b.n	8004870 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004708:	e0b2      	b.n	8004870 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004712:	d15e      	bne.n	80047d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004714:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004718:	2b08      	cmp	r3, #8
 800471a:	d828      	bhi.n	800476e <UART_SetConfig+0x44a>
 800471c:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <UART_SetConfig+0x400>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	08004749 	.word	0x08004749
 8004728:	08004751 	.word	0x08004751
 800472c:	08004759 	.word	0x08004759
 8004730:	0800476f 	.word	0x0800476f
 8004734:	0800475f 	.word	0x0800475f
 8004738:	0800476f 	.word	0x0800476f
 800473c:	0800476f 	.word	0x0800476f
 8004740:	0800476f 	.word	0x0800476f
 8004744:	08004767 	.word	0x08004767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004748:	f7fe fd52 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 800474c:	61f8      	str	r0, [r7, #28]
        break;
 800474e:	e014      	b.n	800477a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004750:	f7fe fd64 	bl	800321c <HAL_RCC_GetPCLK2Freq>
 8004754:	61f8      	str	r0, [r7, #28]
        break;
 8004756:	e010      	b.n	800477a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004758:	4b4d      	ldr	r3, [pc, #308]	; (8004890 <UART_SetConfig+0x56c>)
 800475a:	61fb      	str	r3, [r7, #28]
        break;
 800475c:	e00d      	b.n	800477a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800475e:	f7fe fcaf 	bl	80030c0 <HAL_RCC_GetSysClockFreq>
 8004762:	61f8      	str	r0, [r7, #28]
        break;
 8004764:	e009      	b.n	800477a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800476a:	61fb      	str	r3, [r7, #28]
        break;
 800476c:	e005      	b.n	800477a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004778:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d077      	beq.n	8004870 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	005a      	lsls	r2, r3, #1
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	441a      	add	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b0f      	cmp	r3, #15
 800479a:	d916      	bls.n	80047ca <UART_SetConfig+0x4a6>
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a2:	d212      	bcs.n	80047ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	f023 030f 	bic.w	r3, r3, #15
 80047ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	085b      	lsrs	r3, r3, #1
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	8afb      	ldrh	r3, [r7, #22]
 80047bc:	4313      	orrs	r3, r2
 80047be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	8afa      	ldrh	r2, [r7, #22]
 80047c6:	60da      	str	r2, [r3, #12]
 80047c8:	e052      	b.n	8004870 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047d0:	e04e      	b.n	8004870 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047d6:	2b08      	cmp	r3, #8
 80047d8:	d827      	bhi.n	800482a <UART_SetConfig+0x506>
 80047da:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <UART_SetConfig+0x4bc>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	08004805 	.word	0x08004805
 80047e4:	0800480d 	.word	0x0800480d
 80047e8:	08004815 	.word	0x08004815
 80047ec:	0800482b 	.word	0x0800482b
 80047f0:	0800481b 	.word	0x0800481b
 80047f4:	0800482b 	.word	0x0800482b
 80047f8:	0800482b 	.word	0x0800482b
 80047fc:	0800482b 	.word	0x0800482b
 8004800:	08004823 	.word	0x08004823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004804:	f7fe fcf4 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 8004808:	61f8      	str	r0, [r7, #28]
        break;
 800480a:	e014      	b.n	8004836 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800480c:	f7fe fd06 	bl	800321c <HAL_RCC_GetPCLK2Freq>
 8004810:	61f8      	str	r0, [r7, #28]
        break;
 8004812:	e010      	b.n	8004836 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004814:	4b1e      	ldr	r3, [pc, #120]	; (8004890 <UART_SetConfig+0x56c>)
 8004816:	61fb      	str	r3, [r7, #28]
        break;
 8004818:	e00d      	b.n	8004836 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800481a:	f7fe fc51 	bl	80030c0 <HAL_RCC_GetSysClockFreq>
 800481e:	61f8      	str	r0, [r7, #28]
        break;
 8004820:	e009      	b.n	8004836 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004826:	61fb      	str	r3, [r7, #28]
        break;
 8004828:	e005      	b.n	8004836 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004834:	bf00      	nop
    }

    if (pclk != 0U)
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d019      	beq.n	8004870 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	085a      	lsrs	r2, r3, #1
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	441a      	add	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	fbb2 f3f3 	udiv	r3, r2, r3
 800484e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b0f      	cmp	r3, #15
 8004854:	d909      	bls.n	800486a <UART_SetConfig+0x546>
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800485c:	d205      	bcs.n	800486a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60da      	str	r2, [r3, #12]
 8004868:	e002      	b.n	8004870 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800487c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004880:	4618      	mov	r0, r3
 8004882:	3728      	adds	r7, #40	; 0x28
 8004884:	46bd      	mov	sp, r7
 8004886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800488a:	bf00      	nop
 800488c:	40008000 	.word	0x40008000
 8004890:	00f42400 	.word	0x00f42400

08004894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	f003 0310 	and.w	r3, r3, #16
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01a      	beq.n	80049aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004992:	d10a      	bne.n	80049aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	605a      	str	r2, [r3, #4]
  }
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af02      	add	r7, sp, #8
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049e8:	f7fc fa92 	bl	8000f10 <HAL_GetTick>
 80049ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d10e      	bne.n	8004a1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f82d 	bl	8004a6a <UART_WaitOnFlagUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e023      	b.n	8004a62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d10e      	bne.n	8004a46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f817 	bl	8004a6a <UART_WaitOnFlagUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e00d      	b.n	8004a62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b09c      	sub	sp, #112	; 0x70
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	603b      	str	r3, [r7, #0]
 8004a76:	4613      	mov	r3, r2
 8004a78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a7a:	e0a5      	b.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a82:	f000 80a1 	beq.w	8004bc8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a86:	f7fc fa43 	bl	8000f10 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d302      	bcc.n	8004a9c <UART_WaitOnFlagUntilTimeout+0x32>
 8004a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d13e      	bne.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aa4:	e853 3f00 	ldrex	r3, [r3]
 8004aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ab0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004abc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ac0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ac2:	e841 2300 	strex	r3, r2, [r1]
 8004ac6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1e6      	bne.n	8004a9c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3308      	adds	r3, #8
 8004ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad8:	e853 3f00 	ldrex	r3, [r3]
 8004adc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae0:	f023 0301 	bic.w	r3, r3, #1
 8004ae4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3308      	adds	r3, #8
 8004aec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004aee:	64ba      	str	r2, [r7, #72]	; 0x48
 8004af0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004af4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004af6:	e841 2300 	strex	r3, r2, [r1]
 8004afa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1e5      	bne.n	8004ace <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2220      	movs	r2, #32
 8004b06:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e067      	b.n	8004bea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d04f      	beq.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b36:	d147      	bne.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b40:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b60:	637b      	str	r3, [r7, #52]	; 0x34
 8004b62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e6      	bne.n	8004b42 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3308      	adds	r3, #8
 8004b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	613b      	str	r3, [r7, #16]
   return(result);
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f023 0301 	bic.w	r3, r3, #1
 8004b8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3308      	adds	r3, #8
 8004b92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b94:	623a      	str	r2, [r7, #32]
 8004b96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	69f9      	ldr	r1, [r7, #28]
 8004b9a:	6a3a      	ldr	r2, [r7, #32]
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e5      	bne.n	8004b74 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e010      	b.n	8004bea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69da      	ldr	r2, [r3, #28]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	bf0c      	ite	eq
 8004bd8:	2301      	moveq	r3, #1
 8004bda:	2300      	movne	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	461a      	mov	r2, r3
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	f43f af4a 	beq.w	8004a7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3770      	adds	r7, #112	; 0x70
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <__NVIC_SetPriority>:
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	6039      	str	r1, [r7, #0]
 8004bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	db0a      	blt.n	8004c1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	490c      	ldr	r1, [pc, #48]	; (8004c40 <__NVIC_SetPriority+0x4c>)
 8004c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c12:	0112      	lsls	r2, r2, #4
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	440b      	add	r3, r1
 8004c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c1c:	e00a      	b.n	8004c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	4908      	ldr	r1, [pc, #32]	; (8004c44 <__NVIC_SetPriority+0x50>)
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	3b04      	subs	r3, #4
 8004c2c:	0112      	lsls	r2, r2, #4
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	440b      	add	r3, r1
 8004c32:	761a      	strb	r2, [r3, #24]
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	e000e100 	.word	0xe000e100
 8004c44:	e000ed00 	.word	0xe000ed00

08004c48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004c4c:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <SysTick_Handler+0x1c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004c50:	f002 f85a 	bl	8006d08 <xTaskGetSchedulerState>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d001      	beq.n	8004c5e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004c5a:	f002 ff3d 	bl	8007ad8 <xPortSysTickHandler>
  }
}
 8004c5e:	bf00      	nop
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	e000e010 	.word	0xe000e010

08004c68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	f06f 0004 	mvn.w	r0, #4
 8004c72:	f7ff ffbf 	bl	8004bf4 <__NVIC_SetPriority>
#endif
}
 8004c76:	bf00      	nop
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c82:	f3ef 8305 	mrs	r3, IPSR
 8004c86:	603b      	str	r3, [r7, #0]
  return(result);
 8004c88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004c8e:	f06f 0305 	mvn.w	r3, #5
 8004c92:	607b      	str	r3, [r7, #4]
 8004c94:	e00c      	b.n	8004cb0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c96:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <osKernelInitialize+0x44>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d105      	bne.n	8004caa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c9e:	4b08      	ldr	r3, [pc, #32]	; (8004cc0 <osKernelInitialize+0x44>)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	607b      	str	r3, [r7, #4]
 8004ca8:	e002      	b.n	8004cb0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004cb0:	687b      	ldr	r3, [r7, #4]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	20000284 	.word	0x20000284

08004cc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cca:	f3ef 8305 	mrs	r3, IPSR
 8004cce:	603b      	str	r3, [r7, #0]
  return(result);
 8004cd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <osKernelStart+0x1a>
    stat = osErrorISR;
 8004cd6:	f06f 0305 	mvn.w	r3, #5
 8004cda:	607b      	str	r3, [r7, #4]
 8004cdc:	e010      	b.n	8004d00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004cde:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <osKernelStart+0x48>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d109      	bne.n	8004cfa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ce6:	f7ff ffbf 	bl	8004c68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004cea:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <osKernelStart+0x48>)
 8004cec:	2202      	movs	r2, #2
 8004cee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004cf0:	f001 fb9e 	bl	8006430 <vTaskStartScheduler>
      stat = osOK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	607b      	str	r3, [r7, #4]
 8004cf8:	e002      	b.n	8004d00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d00:	687b      	ldr	r3, [r7, #4]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20000284 	.word	0x20000284

08004d10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08e      	sub	sp, #56	; 0x38
 8004d14:	af04      	add	r7, sp, #16
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d20:	f3ef 8305 	mrs	r3, IPSR
 8004d24:	617b      	str	r3, [r7, #20]
  return(result);
 8004d26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d17f      	bne.n	8004e2c <osThreadNew+0x11c>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d07c      	beq.n	8004e2c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8004d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d36:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004d38:	2318      	movs	r3, #24
 8004d3a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d44:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d045      	beq.n	8004dd8 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <osThreadNew+0x4a>
        name = attr->name;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d008      	beq.n	8004d80 <osThreadNew+0x70>
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	2b38      	cmp	r3, #56	; 0x38
 8004d72:	d805      	bhi.n	8004d80 <osThreadNew+0x70>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <osThreadNew+0x74>
        return (NULL);
 8004d80:	2300      	movs	r3, #0
 8004d82:	e054      	b.n	8004e2e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	089b      	lsrs	r3, r3, #2
 8004d92:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00e      	beq.n	8004dba <osThreadNew+0xaa>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	2bbb      	cmp	r3, #187	; 0xbb
 8004da2:	d90a      	bls.n	8004dba <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d006      	beq.n	8004dba <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <osThreadNew+0xaa>
        mem = 1;
 8004db4:	2301      	movs	r3, #1
 8004db6:	61bb      	str	r3, [r7, #24]
 8004db8:	e010      	b.n	8004ddc <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10c      	bne.n	8004ddc <osThreadNew+0xcc>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d108      	bne.n	8004ddc <osThreadNew+0xcc>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d104      	bne.n	8004ddc <osThreadNew+0xcc>
          mem = 0;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	e001      	b.n	8004ddc <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d110      	bne.n	8004e04 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004dea:	9202      	str	r2, [sp, #8]
 8004dec:	9301      	str	r3, [sp, #4]
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	6a3a      	ldr	r2, [r7, #32]
 8004df6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f001 f92d 	bl	8006058 <xTaskCreateStatic>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	e013      	b.n	8004e2c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d110      	bne.n	8004e2c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	f107 0310 	add.w	r3, r7, #16
 8004e12:	9301      	str	r3, [sp, #4]
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f001 f978 	bl	8006112 <xTaskCreate>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d001      	beq.n	8004e2c <osThreadNew+0x11c>
            hTask = NULL;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e2c:	693b      	ldr	r3, [r7, #16]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3728      	adds	r7, #40	; 0x28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e3e:	f3ef 8305 	mrs	r3, IPSR
 8004e42:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <osDelay+0x1c>
    stat = osErrorISR;
 8004e4a:	f06f 0305 	mvn.w	r3, #5
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	e007      	b.n	8004e62 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f001 fab3 	bl	80063c8 <vTaskDelay>
    }
  }

  return (stat);
 8004e62:	68fb      	ldr	r3, [r7, #12]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e78:	f3ef 8305 	mrs	r3, IPSR
 8004e7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e7e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d174      	bne.n	8004f6e <osMutexNew+0x102>
    if (attr != NULL) {
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	61bb      	str	r3, [r7, #24]
 8004e90:	e001      	b.n	8004e96 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <osMutexNew+0x3a>
      rmtx = 1U;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	e001      	b.n	8004eaa <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d15c      	bne.n	8004f6e <osMutexNew+0x102>
      mem = -1;
 8004eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eb8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d015      	beq.n	8004eec <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d006      	beq.n	8004ed6 <osMutexNew+0x6a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	2b4f      	cmp	r3, #79	; 0x4f
 8004ece:	d902      	bls.n	8004ed6 <osMutexNew+0x6a>
          mem = 1;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	e00c      	b.n	8004ef0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d108      	bne.n	8004ef0 <osMutexNew+0x84>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d104      	bne.n	8004ef0 <osMutexNew+0x84>
            mem = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	e001      	b.n	8004ef0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d112      	bne.n	8004f1c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d007      	beq.n	8004f0c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4619      	mov	r1, r3
 8004f02:	2004      	movs	r0, #4
 8004f04:	f000 fb17 	bl	8005536 <xQueueCreateMutexStatic>
 8004f08:	61f8      	str	r0, [r7, #28]
 8004f0a:	e016      	b.n	8004f3a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	4619      	mov	r1, r3
 8004f12:	2001      	movs	r0, #1
 8004f14:	f000 fb0f 	bl	8005536 <xQueueCreateMutexStatic>
 8004f18:	61f8      	str	r0, [r7, #28]
 8004f1a:	e00e      	b.n	8004f3a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10b      	bne.n	8004f3a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d004      	beq.n	8004f32 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004f28:	2004      	movs	r0, #4
 8004f2a:	f000 faec 	bl	8005506 <xQueueCreateMutex>
 8004f2e:	61f8      	str	r0, [r7, #28]
 8004f30:	e003      	b.n	8004f3a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004f32:	2001      	movs	r0, #1
 8004f34:	f000 fae7 	bl	8005506 <xQueueCreateMutex>
 8004f38:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00c      	beq.n	8004f5a <osMutexNew+0xee>
        if (attr != NULL) {
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <osMutexNew+0xe2>
          name = attr->name;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	e001      	b.n	8004f52 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004f52:	68f9      	ldr	r1, [r7, #12]
 8004f54:	69f8      	ldr	r0, [r7, #28]
 8004f56:	f001 f821 	bl	8005f9c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d006      	beq.n	8004f6e <osMutexNew+0x102>
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004f6e:	69fb      	ldr	r3, [r7, #28]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3720      	adds	r7, #32
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f023 0301 	bic.w	r3, r3, #1
 8004f88:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f96:	f3ef 8305 	mrs	r3, IPSR
 8004f9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f9c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004fa2:	f06f 0305 	mvn.w	r3, #5
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	e02c      	b.n	8005004 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d103      	bne.n	8004fb8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004fb0:	f06f 0303 	mvn.w	r3, #3
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	e025      	b.n	8005004 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d011      	beq.n	8004fe2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004fbe:	6839      	ldr	r1, [r7, #0]
 8004fc0:	6938      	ldr	r0, [r7, #16]
 8004fc2:	f000 fb07 	bl	80055d4 <xQueueTakeMutexRecursive>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d01b      	beq.n	8005004 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004fd2:	f06f 0301 	mvn.w	r3, #1
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	e014      	b.n	8005004 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004fda:	f06f 0302 	mvn.w	r3, #2
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	e010      	b.n	8005004 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004fe2:	6839      	ldr	r1, [r7, #0]
 8004fe4:	6938      	ldr	r0, [r7, #16]
 8004fe6:	f000 fda5 	bl	8005b34 <xQueueSemaphoreTake>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d009      	beq.n	8005004 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004ff6:	f06f 0301 	mvn.w	r3, #1
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	e002      	b.n	8005004 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004ffe:	f06f 0302 	mvn.w	r3, #2
 8005002:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005004:	697b      	ldr	r3, [r7, #20]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800500e:	b580      	push	{r7, lr}
 8005010:	b086      	sub	sp, #24
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f023 0301 	bic.w	r3, r3, #1
 800501c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800502a:	f3ef 8305 	mrs	r3, IPSR
 800502e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005030:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <osMutexRelease+0x30>
    stat = osErrorISR;
 8005036:	f06f 0305 	mvn.w	r3, #5
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	e01f      	b.n	800507e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d103      	bne.n	800504c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005044:	f06f 0303 	mvn.w	r3, #3
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	e018      	b.n	800507e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d009      	beq.n	8005066 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005052:	6938      	ldr	r0, [r7, #16]
 8005054:	f000 fa8a 	bl	800556c <xQueueGiveMutexRecursive>
 8005058:	4603      	mov	r3, r0
 800505a:	2b01      	cmp	r3, #1
 800505c:	d00f      	beq.n	800507e <osMutexRelease+0x70>
        stat = osErrorResource;
 800505e:	f06f 0302 	mvn.w	r3, #2
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	e00b      	b.n	800507e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005066:	2300      	movs	r3, #0
 8005068:	2200      	movs	r2, #0
 800506a:	2100      	movs	r1, #0
 800506c:	6938      	ldr	r0, [r7, #16]
 800506e:	f000 fae7 	bl	8005640 <xQueueGenericSend>
 8005072:	4603      	mov	r3, r0
 8005074:	2b01      	cmp	r3, #1
 8005076:	d002      	beq.n	800507e <osMutexRelease+0x70>
        stat = osErrorResource;
 8005078:	f06f 0302 	mvn.w	r3, #2
 800507c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800507e:	697b      	ldr	r3, [r7, #20]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4a07      	ldr	r2, [pc, #28]	; (80050b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005098:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4a06      	ldr	r2, [pc, #24]	; (80050b8 <vApplicationGetIdleTaskMemory+0x30>)
 800509e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050a6:	601a      	str	r2, [r3, #0]
}
 80050a8:	bf00      	nop
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	20000288 	.word	0x20000288
 80050b8:	20000344 	.word	0x20000344

080050bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4a07      	ldr	r2, [pc, #28]	; (80050e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80050cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	4a06      	ldr	r2, [pc, #24]	; (80050ec <vApplicationGetTimerTaskMemory+0x30>)
 80050d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050da:	601a      	str	r2, [r3, #0]
}
 80050dc:	bf00      	nop
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	20000744 	.word	0x20000744
 80050ec:	20000800 	.word	0x20000800

080050f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f103 0208 	add.w	r2, r3, #8
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005108:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f103 0208 	add.w	r2, r3, #8
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f103 0208 	add.w	r2, r3, #8
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800514a:	b480      	push	{r7}
 800514c:	b085      	sub	sp, #20
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	601a      	str	r2, [r3, #0]
}
 8005186:	bf00      	nop
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005192:	b480      	push	{r7}
 8005194:	b085      	sub	sp, #20
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051a8:	d103      	bne.n	80051b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	e00c      	b.n	80051cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3308      	adds	r3, #8
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	e002      	b.n	80051c0 <vListInsert+0x2e>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d2f6      	bcs.n	80051ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	601a      	str	r2, [r3, #0]
}
 80051f8:	bf00      	nop
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6892      	ldr	r2, [r2, #8]
 800521a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6852      	ldr	r2, [r2, #4]
 8005224:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	429a      	cmp	r2, r3
 800522e:	d103      	bne.n	8005238 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	1e5a      	subs	r2, r3, #1
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10a      	bne.n	8005282 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800527e:	bf00      	nop
 8005280:	e7fe      	b.n	8005280 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005282:	f002 fb97 	bl	80079b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528e:	68f9      	ldr	r1, [r7, #12]
 8005290:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	441a      	add	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b2:	3b01      	subs	r3, #1
 80052b4:	68f9      	ldr	r1, [r7, #12]
 80052b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052b8:	fb01 f303 	mul.w	r3, r1, r3
 80052bc:	441a      	add	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	22ff      	movs	r2, #255	; 0xff
 80052c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	22ff      	movs	r2, #255	; 0xff
 80052ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d114      	bne.n	8005302 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01a      	beq.n	8005316 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3310      	adds	r3, #16
 80052e4:	4618      	mov	r0, r3
 80052e6:	f001 fb3d 	bl	8006964 <xTaskRemoveFromEventList>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d012      	beq.n	8005316 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052f0:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <xQueueGenericReset+0xcc>)
 80052f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	e009      	b.n	8005316 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3310      	adds	r3, #16
 8005306:	4618      	mov	r0, r3
 8005308:	f7ff fef2 	bl	80050f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3324      	adds	r3, #36	; 0x24
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff feed 	bl	80050f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005316:	f002 fb7d 	bl	8007a14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800531a:	2301      	movs	r3, #1
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	e000ed04 	.word	0xe000ed04

08005328 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08e      	sub	sp, #56	; 0x38
 800532c:	af02      	add	r7, sp, #8
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10a      	bne.n	8005352 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800534e:	bf00      	nop
 8005350:	e7fe      	b.n	8005350 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
}
 800536a:	bf00      	nop
 800536c:	e7fe      	b.n	800536c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <xQueueGenericCreateStatic+0x52>
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <xQueueGenericCreateStatic+0x56>
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <xQueueGenericCreateStatic+0x58>
 800537e:	2300      	movs	r3, #0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10a      	bne.n	800539a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	623b      	str	r3, [r7, #32]
}
 8005396:	bf00      	nop
 8005398:	e7fe      	b.n	8005398 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d102      	bne.n	80053a6 <xQueueGenericCreateStatic+0x7e>
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <xQueueGenericCreateStatic+0x82>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <xQueueGenericCreateStatic+0x84>
 80053aa:	2300      	movs	r3, #0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10a      	bne.n	80053c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	61fb      	str	r3, [r7, #28]
}
 80053c2:	bf00      	nop
 80053c4:	e7fe      	b.n	80053c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80053c6:	2350      	movs	r3, #80	; 0x50
 80053c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b50      	cmp	r3, #80	; 0x50
 80053ce:	d00a      	beq.n	80053e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	61bb      	str	r3, [r7, #24]
}
 80053e2:	bf00      	nop
 80053e4:	e7fe      	b.n	80053e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80053e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00d      	beq.n	800540e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	4613      	mov	r3, r2
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 f83f 	bl	800548c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005410:	4618      	mov	r0, r3
 8005412:	3730      	adds	r7, #48	; 0x30
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08a      	sub	sp, #40	; 0x28
 800541c:	af02      	add	r7, sp, #8
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	4613      	mov	r3, r2
 8005424:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10a      	bne.n	8005442 <xQueueGenericCreate+0x2a>
	__asm volatile
 800542c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	613b      	str	r3, [r7, #16]
}
 800543e:	bf00      	nop
 8005440:	e7fe      	b.n	8005440 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	fb02 f303 	mul.w	r3, r2, r3
 800544a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	3350      	adds	r3, #80	; 0x50
 8005450:	4618      	mov	r0, r3
 8005452:	f002 fbd1 	bl	8007bf8 <pvPortMalloc>
 8005456:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d011      	beq.n	8005482 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	3350      	adds	r3, #80	; 0x50
 8005466:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005470:	79fa      	ldrb	r2, [r7, #7]
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	4613      	mov	r3, r2
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	68b9      	ldr	r1, [r7, #8]
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 f805 	bl	800548c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005482:	69bb      	ldr	r3, [r7, #24]
	}
 8005484:	4618      	mov	r0, r3
 8005486:	3720      	adds	r7, #32
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d103      	bne.n	80054a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	e002      	b.n	80054ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054ba:	2101      	movs	r1, #1
 80054bc:	69b8      	ldr	r0, [r7, #24]
 80054be:	f7ff fecb 	bl	8005258 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	78fa      	ldrb	r2, [r7, #3]
 80054c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80054ca:	bf00      	nop
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00e      	beq.n	80054fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80054f2:	2300      	movs	r3, #0
 80054f4:	2200      	movs	r2, #0
 80054f6:	2100      	movs	r1, #0
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f8a1 	bl	8005640 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80054fe:	bf00      	nop
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005506:	b580      	push	{r7, lr}
 8005508:	b086      	sub	sp, #24
 800550a:	af00      	add	r7, sp, #0
 800550c:	4603      	mov	r3, r0
 800550e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005510:	2301      	movs	r3, #1
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	2300      	movs	r3, #0
 8005516:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005518:	79fb      	ldrb	r3, [r7, #7]
 800551a:	461a      	mov	r2, r3
 800551c:	6939      	ldr	r1, [r7, #16]
 800551e:	6978      	ldr	r0, [r7, #20]
 8005520:	f7ff ff7a 	bl	8005418 <xQueueGenericCreate>
 8005524:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f7ff ffd3 	bl	80054d2 <prvInitialiseMutex>

		return xNewQueue;
 800552c:	68fb      	ldr	r3, [r7, #12]
	}
 800552e:	4618      	mov	r0, r3
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005536:	b580      	push	{r7, lr}
 8005538:	b088      	sub	sp, #32
 800553a:	af02      	add	r7, sp, #8
 800553c:	4603      	mov	r3, r0
 800553e:	6039      	str	r1, [r7, #0]
 8005540:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005542:	2301      	movs	r3, #1
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	2300      	movs	r3, #0
 8005548:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2200      	movs	r2, #0
 8005552:	6939      	ldr	r1, [r7, #16]
 8005554:	6978      	ldr	r0, [r7, #20]
 8005556:	f7ff fee7 	bl	8005328 <xQueueGenericCreateStatic>
 800555a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f7ff ffb8 	bl	80054d2 <prvInitialiseMutex>

		return xNewQueue;
 8005562:	68fb      	ldr	r3, [r7, #12]
	}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800556c:	b590      	push	{r4, r7, lr}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10a      	bne.n	8005594 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	60fb      	str	r3, [r7, #12]
}
 8005590:	bf00      	nop
 8005592:	e7fe      	b.n	8005592 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	689c      	ldr	r4, [r3, #8]
 8005598:	f001 fba6 	bl	8006ce8 <xTaskGetCurrentTaskHandle>
 800559c:	4603      	mov	r3, r0
 800559e:	429c      	cmp	r4, r3
 80055a0:	d111      	bne.n	80055c6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	1e5a      	subs	r2, r3, #1
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d105      	bne.n	80055c0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80055b4:	2300      	movs	r3, #0
 80055b6:	2200      	movs	r2, #0
 80055b8:	2100      	movs	r1, #0
 80055ba:	6938      	ldr	r0, [r7, #16]
 80055bc:	f000 f840 	bl	8005640 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80055c0:	2301      	movs	r3, #1
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	e001      	b.n	80055ca <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80055ca:	697b      	ldr	r3, [r7, #20]
	}
 80055cc:	4618      	mov	r0, r3
 80055ce:	371c      	adds	r7, #28
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd90      	pop	{r4, r7, pc}

080055d4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80055d4:	b590      	push	{r4, r7, lr}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	60fb      	str	r3, [r7, #12]
}
 80055fa:	bf00      	nop
 80055fc:	e7fe      	b.n	80055fc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	689c      	ldr	r4, [r3, #8]
 8005602:	f001 fb71 	bl	8006ce8 <xTaskGetCurrentTaskHandle>
 8005606:	4603      	mov	r3, r0
 8005608:	429c      	cmp	r4, r3
 800560a:	d107      	bne.n	800561c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005616:	2301      	movs	r3, #1
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	e00c      	b.n	8005636 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800561c:	6839      	ldr	r1, [r7, #0]
 800561e:	6938      	ldr	r0, [r7, #16]
 8005620:	f000 fa88 	bl	8005b34 <xQueueSemaphoreTake>
 8005624:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d004      	beq.n	8005636 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005636:	697b      	ldr	r3, [r7, #20]
	}
 8005638:	4618      	mov	r0, r3
 800563a:	371c      	adds	r7, #28
 800563c:	46bd      	mov	sp, r7
 800563e:	bd90      	pop	{r4, r7, pc}

08005640 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08e      	sub	sp, #56	; 0x38
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800564e:	2300      	movs	r3, #0
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <xQueueGenericSend+0x32>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800566e:	bf00      	nop
 8005670:	e7fe      	b.n	8005670 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d103      	bne.n	8005680 <xQueueGenericSend+0x40>
 8005678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <xQueueGenericSend+0x44>
 8005680:	2301      	movs	r3, #1
 8005682:	e000      	b.n	8005686 <xQueueGenericSend+0x46>
 8005684:	2300      	movs	r3, #0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10a      	bne.n	80056a0 <xQueueGenericSend+0x60>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800569c:	bf00      	nop
 800569e:	e7fe      	b.n	800569e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d103      	bne.n	80056ae <xQueueGenericSend+0x6e>
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d101      	bne.n	80056b2 <xQueueGenericSend+0x72>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <xQueueGenericSend+0x74>
 80056b2:	2300      	movs	r3, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10a      	bne.n	80056ce <xQueueGenericSend+0x8e>
	__asm volatile
 80056b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	623b      	str	r3, [r7, #32]
}
 80056ca:	bf00      	nop
 80056cc:	e7fe      	b.n	80056cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056ce:	f001 fb1b 	bl	8006d08 <xTaskGetSchedulerState>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d102      	bne.n	80056de <xQueueGenericSend+0x9e>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <xQueueGenericSend+0xa2>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <xQueueGenericSend+0xa4>
 80056e2:	2300      	movs	r3, #0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <xQueueGenericSend+0xbe>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	61fb      	str	r3, [r7, #28]
}
 80056fa:	bf00      	nop
 80056fc:	e7fe      	b.n	80056fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056fe:	f002 f959 	bl	80079b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570a:	429a      	cmp	r2, r3
 800570c:	d302      	bcc.n	8005714 <xQueueGenericSend+0xd4>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b02      	cmp	r3, #2
 8005712:	d129      	bne.n	8005768 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	68b9      	ldr	r1, [r7, #8]
 8005718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800571a:	f000 fb2f 	bl	8005d7c <prvCopyDataToQueue>
 800571e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	2b00      	cmp	r3, #0
 8005726:	d010      	beq.n	800574a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572a:	3324      	adds	r3, #36	; 0x24
 800572c:	4618      	mov	r0, r3
 800572e:	f001 f919 	bl	8006964 <xTaskRemoveFromEventList>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d013      	beq.n	8005760 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005738:	4b3f      	ldr	r3, [pc, #252]	; (8005838 <xQueueGenericSend+0x1f8>)
 800573a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	e00a      	b.n	8005760 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	2b00      	cmp	r3, #0
 800574e:	d007      	beq.n	8005760 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005750:	4b39      	ldr	r3, [pc, #228]	; (8005838 <xQueueGenericSend+0x1f8>)
 8005752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005760:	f002 f958 	bl	8007a14 <vPortExitCritical>
				return pdPASS;
 8005764:	2301      	movs	r3, #1
 8005766:	e063      	b.n	8005830 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d103      	bne.n	8005776 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800576e:	f002 f951 	bl	8007a14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005772:	2300      	movs	r3, #0
 8005774:	e05c      	b.n	8005830 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005778:	2b00      	cmp	r3, #0
 800577a:	d106      	bne.n	800578a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800577c:	f107 0314 	add.w	r3, r7, #20
 8005780:	4618      	mov	r0, r3
 8005782:	f001 f953 	bl	8006a2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005786:	2301      	movs	r3, #1
 8005788:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800578a:	f002 f943 	bl	8007a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800578e:	f000 febf 	bl	8006510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005792:	f002 f90f 	bl	80079b4 <vPortEnterCritical>
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800579c:	b25b      	sxtb	r3, r3
 800579e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057a2:	d103      	bne.n	80057ac <xQueueGenericSend+0x16c>
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057b2:	b25b      	sxtb	r3, r3
 80057b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057b8:	d103      	bne.n	80057c2 <xQueueGenericSend+0x182>
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057c2:	f002 f927 	bl	8007a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057c6:	1d3a      	adds	r2, r7, #4
 80057c8:	f107 0314 	add.w	r3, r7, #20
 80057cc:	4611      	mov	r1, r2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f001 f942 	bl	8006a58 <xTaskCheckForTimeOut>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d124      	bne.n	8005824 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057dc:	f000 fbc6 	bl	8005f6c <prvIsQueueFull>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d018      	beq.n	8005818 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	3310      	adds	r3, #16
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	4611      	mov	r1, r2
 80057ee:	4618      	mov	r0, r3
 80057f0:	f001 f868 	bl	80068c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057f6:	f000 fb51 	bl	8005e9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057fa:	f000 fe97 	bl	800652c <xTaskResumeAll>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	f47f af7c 	bne.w	80056fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005806:	4b0c      	ldr	r3, [pc, #48]	; (8005838 <xQueueGenericSend+0x1f8>)
 8005808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	e772      	b.n	80056fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800581a:	f000 fb3f 	bl	8005e9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800581e:	f000 fe85 	bl	800652c <xTaskResumeAll>
 8005822:	e76c      	b.n	80056fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005824:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005826:	f000 fb39 	bl	8005e9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800582a:	f000 fe7f 	bl	800652c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800582e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005830:	4618      	mov	r0, r3
 8005832:	3738      	adds	r7, #56	; 0x38
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	e000ed04 	.word	0xe000ed04

0800583c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b090      	sub	sp, #64	; 0x40
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005866:	bf00      	nop
 8005868:	e7fe      	b.n	8005868 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d103      	bne.n	8005878 <xQueueGenericSendFromISR+0x3c>
 8005870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <xQueueGenericSendFromISR+0x40>
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <xQueueGenericSendFromISR+0x42>
 800587c:	2300      	movs	r3, #0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10a      	bne.n	8005898 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005894:	bf00      	nop
 8005896:	e7fe      	b.n	8005896 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d103      	bne.n	80058a6 <xQueueGenericSendFromISR+0x6a>
 800589e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <xQueueGenericSendFromISR+0x6e>
 80058a6:	2301      	movs	r3, #1
 80058a8:	e000      	b.n	80058ac <xQueueGenericSendFromISR+0x70>
 80058aa:	2300      	movs	r3, #0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10a      	bne.n	80058c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	623b      	str	r3, [r7, #32]
}
 80058c2:	bf00      	nop
 80058c4:	e7fe      	b.n	80058c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058c6:	f002 f957 	bl	8007b78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058ca:	f3ef 8211 	mrs	r2, BASEPRI
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	61fa      	str	r2, [r7, #28]
 80058e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d302      	bcc.n	80058f8 <xQueueGenericSendFromISR+0xbc>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d12f      	bne.n	8005958 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	68b9      	ldr	r1, [r7, #8]
 800590c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800590e:	f000 fa35 	bl	8005d7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005912:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800591a:	d112      	bne.n	8005942 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	2b00      	cmp	r3, #0
 8005922:	d016      	beq.n	8005952 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005926:	3324      	adds	r3, #36	; 0x24
 8005928:	4618      	mov	r0, r3
 800592a:	f001 f81b 	bl	8006964 <xTaskRemoveFromEventList>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00e      	beq.n	8005952 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00b      	beq.n	8005952 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	e007      	b.n	8005952 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005942:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005946:	3301      	adds	r3, #1
 8005948:	b2db      	uxtb	r3, r3
 800594a:	b25a      	sxtb	r2, r3
 800594c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005952:	2301      	movs	r3, #1
 8005954:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005956:	e001      	b.n	800595c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005958:	2300      	movs	r3, #0
 800595a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800595c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005966:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800596a:	4618      	mov	r0, r3
 800596c:	3740      	adds	r7, #64	; 0x40
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08c      	sub	sp, #48	; 0x30
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005980:	2300      	movs	r3, #0
 8005982:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10a      	bne.n	80059a4 <xQueueReceive+0x30>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	623b      	str	r3, [r7, #32]
}
 80059a0:	bf00      	nop
 80059a2:	e7fe      	b.n	80059a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d103      	bne.n	80059b2 <xQueueReceive+0x3e>
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <xQueueReceive+0x42>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <xQueueReceive+0x44>
 80059b6:	2300      	movs	r3, #0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10a      	bne.n	80059d2 <xQueueReceive+0x5e>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	61fb      	str	r3, [r7, #28]
}
 80059ce:	bf00      	nop
 80059d0:	e7fe      	b.n	80059d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059d2:	f001 f999 	bl	8006d08 <xTaskGetSchedulerState>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d102      	bne.n	80059e2 <xQueueReceive+0x6e>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <xQueueReceive+0x72>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e000      	b.n	80059e8 <xQueueReceive+0x74>
 80059e6:	2300      	movs	r3, #0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10a      	bne.n	8005a02 <xQueueReceive+0x8e>
	__asm volatile
 80059ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	61bb      	str	r3, [r7, #24]
}
 80059fe:	bf00      	nop
 8005a00:	e7fe      	b.n	8005a00 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a02:	f001 ffd7 	bl	80079b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01f      	beq.n	8005a52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a16:	f000 fa1b 	bl	8005e50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	1e5a      	subs	r2, r3, #1
 8005a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00f      	beq.n	8005a4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	3310      	adds	r3, #16
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 ff98 	bl	8006964 <xTaskRemoveFromEventList>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d007      	beq.n	8005a4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a3a:	4b3d      	ldr	r3, [pc, #244]	; (8005b30 <xQueueReceive+0x1bc>)
 8005a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a4a:	f001 ffe3 	bl	8007a14 <vPortExitCritical>
				return pdPASS;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e069      	b.n	8005b26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d103      	bne.n	8005a60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a58:	f001 ffdc 	bl	8007a14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	e062      	b.n	8005b26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d106      	bne.n	8005a74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a66:	f107 0310 	add.w	r3, r7, #16
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 ffde 	bl	8006a2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a70:	2301      	movs	r3, #1
 8005a72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a74:	f001 ffce 	bl	8007a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a78:	f000 fd4a 	bl	8006510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a7c:	f001 ff9a 	bl	80079b4 <vPortEnterCritical>
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a86:	b25b      	sxtb	r3, r3
 8005a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a8c:	d103      	bne.n	8005a96 <xQueueReceive+0x122>
 8005a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a9c:	b25b      	sxtb	r3, r3
 8005a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aa2:	d103      	bne.n	8005aac <xQueueReceive+0x138>
 8005aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005aac:	f001 ffb2 	bl	8007a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ab0:	1d3a      	adds	r2, r7, #4
 8005ab2:	f107 0310 	add.w	r3, r7, #16
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 ffcd 	bl	8006a58 <xTaskCheckForTimeOut>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d123      	bne.n	8005b0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ac6:	f000 fa3b 	bl	8005f40 <prvIsQueueEmpty>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d017      	beq.n	8005b00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	3324      	adds	r3, #36	; 0x24
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 fef3 	bl	80068c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ae0:	f000 f9dc 	bl	8005e9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ae4:	f000 fd22 	bl	800652c <xTaskResumeAll>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d189      	bne.n	8005a02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005aee:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <xQueueReceive+0x1bc>)
 8005af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	e780      	b.n	8005a02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b02:	f000 f9cb 	bl	8005e9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b06:	f000 fd11 	bl	800652c <xTaskResumeAll>
 8005b0a:	e77a      	b.n	8005a02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b0e:	f000 f9c5 	bl	8005e9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b12:	f000 fd0b 	bl	800652c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b18:	f000 fa12 	bl	8005f40 <prvIsQueueEmpty>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f43f af6f 	beq.w	8005a02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3730      	adds	r7, #48	; 0x30
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	e000ed04 	.word	0xe000ed04

08005b34 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08e      	sub	sp, #56	; 0x38
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005b46:	2300      	movs	r3, #0
 8005b48:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	623b      	str	r3, [r7, #32]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	61fb      	str	r3, [r7, #28]
}
 8005b80:	bf00      	nop
 8005b82:	e7fe      	b.n	8005b82 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b84:	f001 f8c0 	bl	8006d08 <xTaskGetSchedulerState>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d102      	bne.n	8005b94 <xQueueSemaphoreTake+0x60>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <xQueueSemaphoreTake+0x64>
 8005b94:	2301      	movs	r3, #1
 8005b96:	e000      	b.n	8005b9a <xQueueSemaphoreTake+0x66>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10a      	bne.n	8005bb4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	61bb      	str	r3, [r7, #24]
}
 8005bb0:	bf00      	nop
 8005bb2:	e7fe      	b.n	8005bb2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bb4:	f001 fefe 	bl	80079b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d024      	beq.n	8005c0e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc6:	1e5a      	subs	r2, r3, #1
 8005bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d104      	bne.n	8005bde <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005bd4:	f001 fa0e 	bl	8006ff4 <pvTaskIncrementMutexHeldCount>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bdc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00f      	beq.n	8005c06 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be8:	3310      	adds	r3, #16
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 feba 	bl	8006964 <xTaskRemoveFromEventList>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d007      	beq.n	8005c06 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bf6:	4b54      	ldr	r3, [pc, #336]	; (8005d48 <xQueueSemaphoreTake+0x214>)
 8005bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c06:	f001 ff05 	bl	8007a14 <vPortExitCritical>
				return pdPASS;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e097      	b.n	8005d3e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d111      	bne.n	8005c38 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	617b      	str	r3, [r7, #20]
}
 8005c2c:	bf00      	nop
 8005c2e:	e7fe      	b.n	8005c2e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005c30:	f001 fef0 	bl	8007a14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c34:	2300      	movs	r3, #0
 8005c36:	e082      	b.n	8005d3e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d106      	bne.n	8005c4c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c3e:	f107 030c 	add.w	r3, r7, #12
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fef2 	bl	8006a2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c4c:	f001 fee2 	bl	8007a14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c50:	f000 fc5e 	bl	8006510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c54:	f001 feae 	bl	80079b4 <vPortEnterCritical>
 8005c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c5e:	b25b      	sxtb	r3, r3
 8005c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c64:	d103      	bne.n	8005c6e <xQueueSemaphoreTake+0x13a>
 8005c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c74:	b25b      	sxtb	r3, r3
 8005c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c7a:	d103      	bne.n	8005c84 <xQueueSemaphoreTake+0x150>
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c84:	f001 fec6 	bl	8007a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c88:	463a      	mov	r2, r7
 8005c8a:	f107 030c 	add.w	r3, r7, #12
 8005c8e:	4611      	mov	r1, r2
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 fee1 	bl	8006a58 <xTaskCheckForTimeOut>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d132      	bne.n	8005d02 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c9e:	f000 f94f 	bl	8005f40 <prvIsQueueEmpty>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d026      	beq.n	8005cf6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d109      	bne.n	8005cc4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005cb0:	f001 fe80 	bl	80079b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f001 f843 	bl	8006d44 <xTaskPriorityInherit>
 8005cbe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005cc0:	f001 fea8 	bl	8007a14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc6:	3324      	adds	r3, #36	; 0x24
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	4611      	mov	r1, r2
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 fdf9 	bl	80068c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cd4:	f000 f8e2 	bl	8005e9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cd8:	f000 fc28 	bl	800652c <xTaskResumeAll>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f47f af68 	bne.w	8005bb4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005ce4:	4b18      	ldr	r3, [pc, #96]	; (8005d48 <xQueueSemaphoreTake+0x214>)
 8005ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	e75e      	b.n	8005bb4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005cf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cf8:	f000 f8d0 	bl	8005e9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cfc:	f000 fc16 	bl	800652c <xTaskResumeAll>
 8005d00:	e758      	b.n	8005bb4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005d02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d04:	f000 f8ca 	bl	8005e9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d08:	f000 fc10 	bl	800652c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d0e:	f000 f917 	bl	8005f40 <prvIsQueueEmpty>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f43f af4d 	beq.w	8005bb4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00d      	beq.n	8005d3c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005d20:	f001 fe48 	bl	80079b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005d24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d26:	f000 f811 	bl	8005d4c <prvGetDisinheritPriorityAfterTimeout>
 8005d2a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d32:	4618      	mov	r0, r3
 8005d34:	f001 f8dc 	bl	8006ef0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005d38:	f001 fe6c 	bl	8007a14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3738      	adds	r7, #56	; 0x38
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	e000ed04 	.word	0xe000ed04

08005d4c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d006      	beq.n	8005d6a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	e001      	b.n	8005d6e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
	}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10d      	bne.n	8005db6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d14d      	bne.n	8005e3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f001 f834 	bl	8006e14 <xTaskPriorityDisinherit>
 8005dac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	609a      	str	r2, [r3, #8]
 8005db4:	e043      	b.n	8005e3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d119      	bne.n	8005df0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6858      	ldr	r0, [r3, #4]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	68b9      	ldr	r1, [r7, #8]
 8005dc8:	f002 f926 	bl	8008018 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd4:	441a      	add	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d32b      	bcc.n	8005e3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	605a      	str	r2, [r3, #4]
 8005dee:	e026      	b.n	8005e3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	68d8      	ldr	r0, [r3, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df8:	461a      	mov	r2, r3
 8005dfa:	68b9      	ldr	r1, [r7, #8]
 8005dfc:	f002 f90c 	bl	8008018 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	425b      	negs	r3, r3
 8005e0a:	441a      	add	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d207      	bcs.n	8005e2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	425b      	negs	r3, r3
 8005e26:	441a      	add	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d105      	bne.n	8005e3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d002      	beq.n	8005e3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1c5a      	adds	r2, r3, #1
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e46:	697b      	ldr	r3, [r7, #20]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d018      	beq.n	8005e94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	441a      	add	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d303      	bcc.n	8005e84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68d9      	ldr	r1, [r3, #12]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	6838      	ldr	r0, [r7, #0]
 8005e90:	f002 f8c2 	bl	8008018 <memcpy>
	}
}
 8005e94:	bf00      	nop
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ea4:	f001 fd86 	bl	80079b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005eb0:	e011      	b.n	8005ed6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d012      	beq.n	8005ee0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3324      	adds	r3, #36	; 0x24
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fd50 	bl	8006964 <xTaskRemoveFromEventList>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005eca:	f000 fe27 	bl	8006b1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	dce9      	bgt.n	8005eb2 <prvUnlockQueue+0x16>
 8005ede:	e000      	b.n	8005ee2 <prvUnlockQueue+0x46>
					break;
 8005ee0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	22ff      	movs	r2, #255	; 0xff
 8005ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005eea:	f001 fd93 	bl	8007a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005eee:	f001 fd61 	bl	80079b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ef8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005efa:	e011      	b.n	8005f20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d012      	beq.n	8005f2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	3310      	adds	r3, #16
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 fd2b 	bl	8006964 <xTaskRemoveFromEventList>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f14:	f000 fe02 	bl	8006b1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f18:	7bbb      	ldrb	r3, [r7, #14]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	dce9      	bgt.n	8005efc <prvUnlockQueue+0x60>
 8005f28:	e000      	b.n	8005f2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	22ff      	movs	r2, #255	; 0xff
 8005f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f34:	f001 fd6e 	bl	8007a14 <vPortExitCritical>
}
 8005f38:	bf00      	nop
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f48:	f001 fd34 	bl	80079b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d102      	bne.n	8005f5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f54:	2301      	movs	r3, #1
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	e001      	b.n	8005f5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f5e:	f001 fd59 	bl	8007a14 <vPortExitCritical>

	return xReturn;
 8005f62:	68fb      	ldr	r3, [r7, #12]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f74:	f001 fd1e 	bl	80079b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d102      	bne.n	8005f8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f84:	2301      	movs	r3, #1
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	e001      	b.n	8005f8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f8e:	f001 fd41 	bl	8007a14 <vPortExitCritical>

	return xReturn;
 8005f92:	68fb      	ldr	r3, [r7, #12]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	e014      	b.n	8005fd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005fac:	4a0f      	ldr	r2, [pc, #60]	; (8005fec <vQueueAddToRegistry+0x50>)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10b      	bne.n	8005fd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fb8:	490c      	ldr	r1, [pc, #48]	; (8005fec <vQueueAddToRegistry+0x50>)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005fc2:	4a0a      	ldr	r2, [pc, #40]	; (8005fec <vQueueAddToRegistry+0x50>)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	4413      	add	r3, r2
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005fce:	e006      	b.n	8005fde <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b07      	cmp	r3, #7
 8005fda:	d9e7      	bls.n	8005fac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	20001000 	.word	0x20001000

08005ff0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006000:	f001 fcd8 	bl	80079b4 <vPortEnterCritical>
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800600a:	b25b      	sxtb	r3, r3
 800600c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006010:	d103      	bne.n	800601a <vQueueWaitForMessageRestricted+0x2a>
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006020:	b25b      	sxtb	r3, r3
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006026:	d103      	bne.n	8006030 <vQueueWaitForMessageRestricted+0x40>
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006030:	f001 fcf0 	bl	8007a14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	2b00      	cmp	r3, #0
 800603a:	d106      	bne.n	800604a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	3324      	adds	r3, #36	; 0x24
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	4618      	mov	r0, r3
 8006046:	f000 fc61 	bl	800690c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800604a:	6978      	ldr	r0, [r7, #20]
 800604c:	f7ff ff26 	bl	8005e9c <prvUnlockQueue>
	}
 8006050:	bf00      	nop
 8006052:	3718      	adds	r7, #24
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08e      	sub	sp, #56	; 0x38
 800605c:	af04      	add	r7, sp, #16
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10a      	bne.n	8006082 <xTaskCreateStatic+0x2a>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	623b      	str	r3, [r7, #32]
}
 800607e:	bf00      	nop
 8006080:	e7fe      	b.n	8006080 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10a      	bne.n	800609e <xTaskCreateStatic+0x46>
	__asm volatile
 8006088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	61fb      	str	r3, [r7, #28]
}
 800609a:	bf00      	nop
 800609c:	e7fe      	b.n	800609c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800609e:	23bc      	movs	r3, #188	; 0xbc
 80060a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	2bbc      	cmp	r3, #188	; 0xbc
 80060a6:	d00a      	beq.n	80060be <xTaskCreateStatic+0x66>
	__asm volatile
 80060a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	61bb      	str	r3, [r7, #24]
}
 80060ba:	bf00      	nop
 80060bc:	e7fe      	b.n	80060bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d01e      	beq.n	8006104 <xTaskCreateStatic+0xac>
 80060c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d01b      	beq.n	8006104 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	2202      	movs	r2, #2
 80060da:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060de:	2300      	movs	r3, #0
 80060e0:	9303      	str	r3, [sp, #12]
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	9302      	str	r3, [sp, #8]
 80060e6:	f107 0314 	add.w	r3, r7, #20
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 f850 	bl	800619c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060fe:	f000 f8f3 	bl	80062e8 <prvAddNewTaskToReadyList>
 8006102:	e001      	b.n	8006108 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006104:	2300      	movs	r3, #0
 8006106:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006108:	697b      	ldr	r3, [r7, #20]
	}
 800610a:	4618      	mov	r0, r3
 800610c:	3728      	adds	r7, #40	; 0x28
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006112:	b580      	push	{r7, lr}
 8006114:	b08c      	sub	sp, #48	; 0x30
 8006116:	af04      	add	r7, sp, #16
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	603b      	str	r3, [r7, #0]
 800611e:	4613      	mov	r3, r2
 8006120:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006122:	88fb      	ldrh	r3, [r7, #6]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4618      	mov	r0, r3
 8006128:	f001 fd66 	bl	8007bf8 <pvPortMalloc>
 800612c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00e      	beq.n	8006152 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006134:	20bc      	movs	r0, #188	; 0xbc
 8006136:	f001 fd5f 	bl	8007bf8 <pvPortMalloc>
 800613a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	631a      	str	r2, [r3, #48]	; 0x30
 8006148:	e005      	b.n	8006156 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800614a:	6978      	ldr	r0, [r7, #20]
 800614c:	f001 fe20 	bl	8007d90 <vPortFree>
 8006150:	e001      	b.n	8006156 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006152:	2300      	movs	r3, #0
 8006154:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d017      	beq.n	800618c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006164:	88fa      	ldrh	r2, [r7, #6]
 8006166:	2300      	movs	r3, #0
 8006168:	9303      	str	r3, [sp, #12]
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	9302      	str	r3, [sp, #8]
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	9301      	str	r3, [sp, #4]
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	68b9      	ldr	r1, [r7, #8]
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f80e 	bl	800619c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006180:	69f8      	ldr	r0, [r7, #28]
 8006182:	f000 f8b1 	bl	80062e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006186:	2301      	movs	r3, #1
 8006188:	61bb      	str	r3, [r7, #24]
 800618a:	e002      	b.n	8006192 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800618c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006190:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006192:	69bb      	ldr	r3, [r7, #24]
	}
 8006194:	4618      	mov	r0, r3
 8006196:	3720      	adds	r7, #32
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	461a      	mov	r2, r3
 80061b4:	21a5      	movs	r1, #165	; 0xa5
 80061b6:	f001 ff3d 	bl	8008034 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80061c4:	3b01      	subs	r3, #1
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f023 0307 	bic.w	r3, r3, #7
 80061d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	617b      	str	r3, [r7, #20]
}
 80061f0:	bf00      	nop
 80061f2:	e7fe      	b.n	80061f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d01f      	beq.n	800623a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061fa:	2300      	movs	r3, #0
 80061fc:	61fb      	str	r3, [r7, #28]
 80061fe:	e012      	b.n	8006226 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	4413      	add	r3, r2
 8006206:	7819      	ldrb	r1, [r3, #0]
 8006208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	4413      	add	r3, r2
 800620e:	3334      	adds	r3, #52	; 0x34
 8006210:	460a      	mov	r2, r1
 8006212:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d006      	beq.n	800622e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	3301      	adds	r3, #1
 8006224:	61fb      	str	r3, [r7, #28]
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	2b0f      	cmp	r3, #15
 800622a:	d9e9      	bls.n	8006200 <prvInitialiseNewTask+0x64>
 800622c:	e000      	b.n	8006230 <prvInitialiseNewTask+0x94>
			{
				break;
 800622e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006238:	e003      	b.n	8006242 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	2b37      	cmp	r3, #55	; 0x37
 8006246:	d901      	bls.n	800624c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006248:	2337      	movs	r3, #55	; 0x37
 800624a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006250:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006256:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625a:	2200      	movs	r2, #0
 800625c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006260:	3304      	adds	r3, #4
 8006262:	4618      	mov	r0, r3
 8006264:	f7fe ff64 	bl	8005130 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	3318      	adds	r3, #24
 800626c:	4618      	mov	r0, r3
 800626e:	f7fe ff5f 	bl	8005130 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006276:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006286:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	2200      	movs	r2, #0
 800628c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006292:	2200      	movs	r2, #0
 8006294:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	3354      	adds	r3, #84	; 0x54
 800629c:	2260      	movs	r2, #96	; 0x60
 800629e:	2100      	movs	r1, #0
 80062a0:	4618      	mov	r0, r3
 80062a2:	f001 fec7 	bl	8008034 <memset>
 80062a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a8:	4a0c      	ldr	r2, [pc, #48]	; (80062dc <prvInitialiseNewTask+0x140>)
 80062aa:	659a      	str	r2, [r3, #88]	; 0x58
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	4a0c      	ldr	r2, [pc, #48]	; (80062e0 <prvInitialiseNewTask+0x144>)
 80062b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	4a0b      	ldr	r2, [pc, #44]	; (80062e4 <prvInitialiseNewTask+0x148>)
 80062b6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	68f9      	ldr	r1, [r7, #12]
 80062bc:	69b8      	ldr	r0, [r7, #24]
 80062be:	f001 fa4f 	bl	8007760 <pxPortInitialiseStack>
 80062c2:	4602      	mov	r2, r0
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062d4:	bf00      	nop
 80062d6:	3720      	adds	r7, #32
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	08008300 	.word	0x08008300
 80062e0:	08008320 	.word	0x08008320
 80062e4:	080082e0 	.word	0x080082e0

080062e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062f0:	f001 fb60 	bl	80079b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062f4:	4b2d      	ldr	r3, [pc, #180]	; (80063ac <prvAddNewTaskToReadyList+0xc4>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3301      	adds	r3, #1
 80062fa:	4a2c      	ldr	r2, [pc, #176]	; (80063ac <prvAddNewTaskToReadyList+0xc4>)
 80062fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062fe:	4b2c      	ldr	r3, [pc, #176]	; (80063b0 <prvAddNewTaskToReadyList+0xc8>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d109      	bne.n	800631a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006306:	4a2a      	ldr	r2, [pc, #168]	; (80063b0 <prvAddNewTaskToReadyList+0xc8>)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800630c:	4b27      	ldr	r3, [pc, #156]	; (80063ac <prvAddNewTaskToReadyList+0xc4>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d110      	bne.n	8006336 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006314:	f000 fc26 	bl	8006b64 <prvInitialiseTaskLists>
 8006318:	e00d      	b.n	8006336 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800631a:	4b26      	ldr	r3, [pc, #152]	; (80063b4 <prvAddNewTaskToReadyList+0xcc>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d109      	bne.n	8006336 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006322:	4b23      	ldr	r3, [pc, #140]	; (80063b0 <prvAddNewTaskToReadyList+0xc8>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	429a      	cmp	r2, r3
 800632e:	d802      	bhi.n	8006336 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006330:	4a1f      	ldr	r2, [pc, #124]	; (80063b0 <prvAddNewTaskToReadyList+0xc8>)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006336:	4b20      	ldr	r3, [pc, #128]	; (80063b8 <prvAddNewTaskToReadyList+0xd0>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3301      	adds	r3, #1
 800633c:	4a1e      	ldr	r2, [pc, #120]	; (80063b8 <prvAddNewTaskToReadyList+0xd0>)
 800633e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006340:	4b1d      	ldr	r3, [pc, #116]	; (80063b8 <prvAddNewTaskToReadyList+0xd0>)
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634c:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <prvAddNewTaskToReadyList+0xd4>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d903      	bls.n	800635c <prvAddNewTaskToReadyList+0x74>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	4a18      	ldr	r2, [pc, #96]	; (80063bc <prvAddNewTaskToReadyList+0xd4>)
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006360:	4613      	mov	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4a15      	ldr	r2, [pc, #84]	; (80063c0 <prvAddNewTaskToReadyList+0xd8>)
 800636a:	441a      	add	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f7fe fee9 	bl	800514a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006378:	f001 fb4c 	bl	8007a14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800637c:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <prvAddNewTaskToReadyList+0xcc>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00e      	beq.n	80063a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006384:	4b0a      	ldr	r3, [pc, #40]	; (80063b0 <prvAddNewTaskToReadyList+0xc8>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	429a      	cmp	r2, r3
 8006390:	d207      	bcs.n	80063a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006392:	4b0c      	ldr	r3, [pc, #48]	; (80063c4 <prvAddNewTaskToReadyList+0xdc>)
 8006394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063a2:	bf00      	nop
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20001514 	.word	0x20001514
 80063b0:	20001040 	.word	0x20001040
 80063b4:	20001520 	.word	0x20001520
 80063b8:	20001530 	.word	0x20001530
 80063bc:	2000151c 	.word	0x2000151c
 80063c0:	20001044 	.word	0x20001044
 80063c4:	e000ed04 	.word	0xe000ed04

080063c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d017      	beq.n	800640a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063da:	4b13      	ldr	r3, [pc, #76]	; (8006428 <vTaskDelay+0x60>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <vTaskDelay+0x30>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	60bb      	str	r3, [r7, #8]
}
 80063f4:	bf00      	nop
 80063f6:	e7fe      	b.n	80063f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80063f8:	f000 f88a 	bl	8006510 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063fc:	2100      	movs	r1, #0
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fe0c 	bl	800701c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006404:	f000 f892 	bl	800652c <xTaskResumeAll>
 8006408:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d107      	bne.n	8006420 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006410:	4b06      	ldr	r3, [pc, #24]	; (800642c <vTaskDelay+0x64>)
 8006412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006420:	bf00      	nop
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	2000153c 	.word	0x2000153c
 800642c:	e000ed04 	.word	0xe000ed04

08006430 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08a      	sub	sp, #40	; 0x28
 8006434:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006436:	2300      	movs	r3, #0
 8006438:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800643a:	2300      	movs	r3, #0
 800643c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800643e:	463a      	mov	r2, r7
 8006440:	1d39      	adds	r1, r7, #4
 8006442:	f107 0308 	add.w	r3, r7, #8
 8006446:	4618      	mov	r0, r3
 8006448:	f7fe fe1e 	bl	8005088 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	9202      	str	r2, [sp, #8]
 8006454:	9301      	str	r3, [sp, #4]
 8006456:	2300      	movs	r3, #0
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	2300      	movs	r3, #0
 800645c:	460a      	mov	r2, r1
 800645e:	4924      	ldr	r1, [pc, #144]	; (80064f0 <vTaskStartScheduler+0xc0>)
 8006460:	4824      	ldr	r0, [pc, #144]	; (80064f4 <vTaskStartScheduler+0xc4>)
 8006462:	f7ff fdf9 	bl	8006058 <xTaskCreateStatic>
 8006466:	4603      	mov	r3, r0
 8006468:	4a23      	ldr	r2, [pc, #140]	; (80064f8 <vTaskStartScheduler+0xc8>)
 800646a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800646c:	4b22      	ldr	r3, [pc, #136]	; (80064f8 <vTaskStartScheduler+0xc8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006474:	2301      	movs	r3, #1
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	e001      	b.n	800647e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800647a:	2300      	movs	r3, #0
 800647c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d102      	bne.n	800648a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006484:	f000 fe1e 	bl	80070c4 <xTimerCreateTimerTask>
 8006488:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d11b      	bne.n	80064c8 <vTaskStartScheduler+0x98>
	__asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	613b      	str	r3, [r7, #16]
}
 80064a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064a4:	4b15      	ldr	r3, [pc, #84]	; (80064fc <vTaskStartScheduler+0xcc>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3354      	adds	r3, #84	; 0x54
 80064aa:	4a15      	ldr	r2, [pc, #84]	; (8006500 <vTaskStartScheduler+0xd0>)
 80064ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064ae:	4b15      	ldr	r3, [pc, #84]	; (8006504 <vTaskStartScheduler+0xd4>)
 80064b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064b6:	4b14      	ldr	r3, [pc, #80]	; (8006508 <vTaskStartScheduler+0xd8>)
 80064b8:	2201      	movs	r2, #1
 80064ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80064bc:	4b13      	ldr	r3, [pc, #76]	; (800650c <vTaskStartScheduler+0xdc>)
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064c2:	f001 f9d5 	bl	8007870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064c6:	e00e      	b.n	80064e6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064ce:	d10a      	bne.n	80064e6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	60fb      	str	r3, [r7, #12]
}
 80064e2:	bf00      	nop
 80064e4:	e7fe      	b.n	80064e4 <vTaskStartScheduler+0xb4>
}
 80064e6:	bf00      	nop
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	08008218 	.word	0x08008218
 80064f4:	08006b35 	.word	0x08006b35
 80064f8:	20001538 	.word	0x20001538
 80064fc:	20001040 	.word	0x20001040
 8006500:	20000010 	.word	0x20000010
 8006504:	20001534 	.word	0x20001534
 8006508:	20001520 	.word	0x20001520
 800650c:	20001518 	.word	0x20001518

08006510 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006514:	4b04      	ldr	r3, [pc, #16]	; (8006528 <vTaskSuspendAll+0x18>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3301      	adds	r3, #1
 800651a:	4a03      	ldr	r2, [pc, #12]	; (8006528 <vTaskSuspendAll+0x18>)
 800651c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800651e:	bf00      	nop
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	2000153c 	.word	0x2000153c

0800652c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006532:	2300      	movs	r3, #0
 8006534:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006536:	2300      	movs	r3, #0
 8006538:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800653a:	4b42      	ldr	r3, [pc, #264]	; (8006644 <xTaskResumeAll+0x118>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10a      	bne.n	8006558 <xTaskResumeAll+0x2c>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	603b      	str	r3, [r7, #0]
}
 8006554:	bf00      	nop
 8006556:	e7fe      	b.n	8006556 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006558:	f001 fa2c 	bl	80079b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800655c:	4b39      	ldr	r3, [pc, #228]	; (8006644 <xTaskResumeAll+0x118>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3b01      	subs	r3, #1
 8006562:	4a38      	ldr	r2, [pc, #224]	; (8006644 <xTaskResumeAll+0x118>)
 8006564:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006566:	4b37      	ldr	r3, [pc, #220]	; (8006644 <xTaskResumeAll+0x118>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d162      	bne.n	8006634 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800656e:	4b36      	ldr	r3, [pc, #216]	; (8006648 <xTaskResumeAll+0x11c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d05e      	beq.n	8006634 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006576:	e02f      	b.n	80065d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006578:	4b34      	ldr	r3, [pc, #208]	; (800664c <xTaskResumeAll+0x120>)
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3318      	adds	r3, #24
 8006584:	4618      	mov	r0, r3
 8006586:	f7fe fe3d 	bl	8005204 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3304      	adds	r3, #4
 800658e:	4618      	mov	r0, r3
 8006590:	f7fe fe38 	bl	8005204 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006598:	4b2d      	ldr	r3, [pc, #180]	; (8006650 <xTaskResumeAll+0x124>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	429a      	cmp	r2, r3
 800659e:	d903      	bls.n	80065a8 <xTaskResumeAll+0x7c>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	4a2a      	ldr	r2, [pc, #168]	; (8006650 <xTaskResumeAll+0x124>)
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ac:	4613      	mov	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4a27      	ldr	r2, [pc, #156]	; (8006654 <xTaskResumeAll+0x128>)
 80065b6:	441a      	add	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	3304      	adds	r3, #4
 80065bc:	4619      	mov	r1, r3
 80065be:	4610      	mov	r0, r2
 80065c0:	f7fe fdc3 	bl	800514a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c8:	4b23      	ldr	r3, [pc, #140]	; (8006658 <xTaskResumeAll+0x12c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d302      	bcc.n	80065d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80065d2:	4b22      	ldr	r3, [pc, #136]	; (800665c <xTaskResumeAll+0x130>)
 80065d4:	2201      	movs	r2, #1
 80065d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065d8:	4b1c      	ldr	r3, [pc, #112]	; (800664c <xTaskResumeAll+0x120>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1cb      	bne.n	8006578 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065e6:	f000 fb5f 	bl	8006ca8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80065ea:	4b1d      	ldr	r3, [pc, #116]	; (8006660 <xTaskResumeAll+0x134>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d010      	beq.n	8006618 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065f6:	f000 f847 	bl	8006688 <xTaskIncrementTick>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006600:	4b16      	ldr	r3, [pc, #88]	; (800665c <xTaskResumeAll+0x130>)
 8006602:	2201      	movs	r2, #1
 8006604:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3b01      	subs	r3, #1
 800660a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1f1      	bne.n	80065f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006612:	4b13      	ldr	r3, [pc, #76]	; (8006660 <xTaskResumeAll+0x134>)
 8006614:	2200      	movs	r2, #0
 8006616:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006618:	4b10      	ldr	r3, [pc, #64]	; (800665c <xTaskResumeAll+0x130>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d009      	beq.n	8006634 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006620:	2301      	movs	r3, #1
 8006622:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006624:	4b0f      	ldr	r3, [pc, #60]	; (8006664 <xTaskResumeAll+0x138>)
 8006626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006634:	f001 f9ee 	bl	8007a14 <vPortExitCritical>

	return xAlreadyYielded;
 8006638:	68bb      	ldr	r3, [r7, #8]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	2000153c 	.word	0x2000153c
 8006648:	20001514 	.word	0x20001514
 800664c:	200014d4 	.word	0x200014d4
 8006650:	2000151c 	.word	0x2000151c
 8006654:	20001044 	.word	0x20001044
 8006658:	20001040 	.word	0x20001040
 800665c:	20001528 	.word	0x20001528
 8006660:	20001524 	.word	0x20001524
 8006664:	e000ed04 	.word	0xe000ed04

08006668 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800666e:	4b05      	ldr	r3, [pc, #20]	; (8006684 <xTaskGetTickCount+0x1c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006674:	687b      	ldr	r3, [r7, #4]
}
 8006676:	4618      	mov	r0, r3
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	20001518 	.word	0x20001518

08006688 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800668e:	2300      	movs	r3, #0
 8006690:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006692:	4b4f      	ldr	r3, [pc, #316]	; (80067d0 <xTaskIncrementTick+0x148>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	f040 808f 	bne.w	80067ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800669c:	4b4d      	ldr	r3, [pc, #308]	; (80067d4 <xTaskIncrementTick+0x14c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3301      	adds	r3, #1
 80066a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066a4:	4a4b      	ldr	r2, [pc, #300]	; (80067d4 <xTaskIncrementTick+0x14c>)
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d120      	bne.n	80066f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80066b0:	4b49      	ldr	r3, [pc, #292]	; (80067d8 <xTaskIncrementTick+0x150>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00a      	beq.n	80066d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	603b      	str	r3, [r7, #0]
}
 80066cc:	bf00      	nop
 80066ce:	e7fe      	b.n	80066ce <xTaskIncrementTick+0x46>
 80066d0:	4b41      	ldr	r3, [pc, #260]	; (80067d8 <xTaskIncrementTick+0x150>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	4b41      	ldr	r3, [pc, #260]	; (80067dc <xTaskIncrementTick+0x154>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a3f      	ldr	r2, [pc, #252]	; (80067d8 <xTaskIncrementTick+0x150>)
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	4a3f      	ldr	r2, [pc, #252]	; (80067dc <xTaskIncrementTick+0x154>)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	4b3e      	ldr	r3, [pc, #248]	; (80067e0 <xTaskIncrementTick+0x158>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3301      	adds	r3, #1
 80066ea:	4a3d      	ldr	r2, [pc, #244]	; (80067e0 <xTaskIncrementTick+0x158>)
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	f000 fadb 	bl	8006ca8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066f2:	4b3c      	ldr	r3, [pc, #240]	; (80067e4 <xTaskIncrementTick+0x15c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d349      	bcc.n	8006790 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066fc:	4b36      	ldr	r3, [pc, #216]	; (80067d8 <xTaskIncrementTick+0x150>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d104      	bne.n	8006710 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006706:	4b37      	ldr	r3, [pc, #220]	; (80067e4 <xTaskIncrementTick+0x15c>)
 8006708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800670c:	601a      	str	r2, [r3, #0]
					break;
 800670e:	e03f      	b.n	8006790 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006710:	4b31      	ldr	r3, [pc, #196]	; (80067d8 <xTaskIncrementTick+0x150>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	429a      	cmp	r2, r3
 8006726:	d203      	bcs.n	8006730 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006728:	4a2e      	ldr	r2, [pc, #184]	; (80067e4 <xTaskIncrementTick+0x15c>)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800672e:	e02f      	b.n	8006790 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	3304      	adds	r3, #4
 8006734:	4618      	mov	r0, r3
 8006736:	f7fe fd65 	bl	8005204 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673e:	2b00      	cmp	r3, #0
 8006740:	d004      	beq.n	800674c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	3318      	adds	r3, #24
 8006746:	4618      	mov	r0, r3
 8006748:	f7fe fd5c 	bl	8005204 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006750:	4b25      	ldr	r3, [pc, #148]	; (80067e8 <xTaskIncrementTick+0x160>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	429a      	cmp	r2, r3
 8006756:	d903      	bls.n	8006760 <xTaskIncrementTick+0xd8>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	4a22      	ldr	r2, [pc, #136]	; (80067e8 <xTaskIncrementTick+0x160>)
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4a1f      	ldr	r2, [pc, #124]	; (80067ec <xTaskIncrementTick+0x164>)
 800676e:	441a      	add	r2, r3
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	3304      	adds	r3, #4
 8006774:	4619      	mov	r1, r3
 8006776:	4610      	mov	r0, r2
 8006778:	f7fe fce7 	bl	800514a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006780:	4b1b      	ldr	r3, [pc, #108]	; (80067f0 <xTaskIncrementTick+0x168>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006786:	429a      	cmp	r2, r3
 8006788:	d3b8      	bcc.n	80066fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800678a:	2301      	movs	r3, #1
 800678c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800678e:	e7b5      	b.n	80066fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006790:	4b17      	ldr	r3, [pc, #92]	; (80067f0 <xTaskIncrementTick+0x168>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006796:	4915      	ldr	r1, [pc, #84]	; (80067ec <xTaskIncrementTick+0x164>)
 8006798:	4613      	mov	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	440b      	add	r3, r1
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d901      	bls.n	80067ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80067a8:	2301      	movs	r3, #1
 80067aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80067ac:	4b11      	ldr	r3, [pc, #68]	; (80067f4 <xTaskIncrementTick+0x16c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d007      	beq.n	80067c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80067b4:	2301      	movs	r3, #1
 80067b6:	617b      	str	r3, [r7, #20]
 80067b8:	e004      	b.n	80067c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80067ba:	4b0f      	ldr	r3, [pc, #60]	; (80067f8 <xTaskIncrementTick+0x170>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3301      	adds	r3, #1
 80067c0:	4a0d      	ldr	r2, [pc, #52]	; (80067f8 <xTaskIncrementTick+0x170>)
 80067c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80067c4:	697b      	ldr	r3, [r7, #20]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	2000153c 	.word	0x2000153c
 80067d4:	20001518 	.word	0x20001518
 80067d8:	200014cc 	.word	0x200014cc
 80067dc:	200014d0 	.word	0x200014d0
 80067e0:	2000152c 	.word	0x2000152c
 80067e4:	20001534 	.word	0x20001534
 80067e8:	2000151c 	.word	0x2000151c
 80067ec:	20001044 	.word	0x20001044
 80067f0:	20001040 	.word	0x20001040
 80067f4:	20001528 	.word	0x20001528
 80067f8:	20001524 	.word	0x20001524

080067fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006802:	4b2a      	ldr	r3, [pc, #168]	; (80068ac <vTaskSwitchContext+0xb0>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800680a:	4b29      	ldr	r3, [pc, #164]	; (80068b0 <vTaskSwitchContext+0xb4>)
 800680c:	2201      	movs	r2, #1
 800680e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006810:	e046      	b.n	80068a0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006812:	4b27      	ldr	r3, [pc, #156]	; (80068b0 <vTaskSwitchContext+0xb4>)
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006818:	4b26      	ldr	r3, [pc, #152]	; (80068b4 <vTaskSwitchContext+0xb8>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	e010      	b.n	8006842 <vTaskSwitchContext+0x46>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10a      	bne.n	800683c <vTaskSwitchContext+0x40>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	607b      	str	r3, [r7, #4]
}
 8006838:	bf00      	nop
 800683a:	e7fe      	b.n	800683a <vTaskSwitchContext+0x3e>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	3b01      	subs	r3, #1
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	491d      	ldr	r1, [pc, #116]	; (80068b8 <vTaskSwitchContext+0xbc>)
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4613      	mov	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	440b      	add	r3, r1
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d0e4      	beq.n	8006820 <vTaskSwitchContext+0x24>
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	4613      	mov	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4a15      	ldr	r2, [pc, #84]	; (80068b8 <vTaskSwitchContext+0xbc>)
 8006862:	4413      	add	r3, r2
 8006864:	60bb      	str	r3, [r7, #8]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	605a      	str	r2, [r3, #4]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	3308      	adds	r3, #8
 8006878:	429a      	cmp	r2, r3
 800687a:	d104      	bne.n	8006886 <vTaskSwitchContext+0x8a>
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	605a      	str	r2, [r3, #4]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	4a0b      	ldr	r2, [pc, #44]	; (80068bc <vTaskSwitchContext+0xc0>)
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	4a08      	ldr	r2, [pc, #32]	; (80068b4 <vTaskSwitchContext+0xb8>)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006896:	4b09      	ldr	r3, [pc, #36]	; (80068bc <vTaskSwitchContext+0xc0>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3354      	adds	r3, #84	; 0x54
 800689c:	4a08      	ldr	r2, [pc, #32]	; (80068c0 <vTaskSwitchContext+0xc4>)
 800689e:	6013      	str	r3, [r2, #0]
}
 80068a0:	bf00      	nop
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	2000153c 	.word	0x2000153c
 80068b0:	20001528 	.word	0x20001528
 80068b4:	2000151c 	.word	0x2000151c
 80068b8:	20001044 	.word	0x20001044
 80068bc:	20001040 	.word	0x20001040
 80068c0:	20000010 	.word	0x20000010

080068c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10a      	bne.n	80068ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	60fb      	str	r3, [r7, #12]
}
 80068e6:	bf00      	nop
 80068e8:	e7fe      	b.n	80068e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068ea:	4b07      	ldr	r3, [pc, #28]	; (8006908 <vTaskPlaceOnEventList+0x44>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3318      	adds	r3, #24
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fe fc4d 	bl	8005192 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068f8:	2101      	movs	r1, #1
 80068fa:	6838      	ldr	r0, [r7, #0]
 80068fc:	f000 fb8e 	bl	800701c <prvAddCurrentTaskToDelayedList>
}
 8006900:	bf00      	nop
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	20001040 	.word	0x20001040

0800690c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10a      	bne.n	8006934 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	617b      	str	r3, [r7, #20]
}
 8006930:	bf00      	nop
 8006932:	e7fe      	b.n	8006932 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006934:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <vTaskPlaceOnEventListRestricted+0x54>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3318      	adds	r3, #24
 800693a:	4619      	mov	r1, r3
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f7fe fc04 	bl	800514a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800694c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800694e:	6879      	ldr	r1, [r7, #4]
 8006950:	68b8      	ldr	r0, [r7, #8]
 8006952:	f000 fb63 	bl	800701c <prvAddCurrentTaskToDelayedList>
	}
 8006956:	bf00      	nop
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20001040 	.word	0x20001040

08006964 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10a      	bne.n	8006990 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	60fb      	str	r3, [r7, #12]
}
 800698c:	bf00      	nop
 800698e:	e7fe      	b.n	800698e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	3318      	adds	r3, #24
 8006994:	4618      	mov	r0, r3
 8006996:	f7fe fc35 	bl	8005204 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800699a:	4b1e      	ldr	r3, [pc, #120]	; (8006a14 <xTaskRemoveFromEventList+0xb0>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d11d      	bne.n	80069de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	3304      	adds	r3, #4
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe fc2c 	bl	8005204 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b0:	4b19      	ldr	r3, [pc, #100]	; (8006a18 <xTaskRemoveFromEventList+0xb4>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d903      	bls.n	80069c0 <xTaskRemoveFromEventList+0x5c>
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	4a16      	ldr	r2, [pc, #88]	; (8006a18 <xTaskRemoveFromEventList+0xb4>)
 80069be:	6013      	str	r3, [r2, #0]
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c4:	4613      	mov	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4a13      	ldr	r2, [pc, #76]	; (8006a1c <xTaskRemoveFromEventList+0xb8>)
 80069ce:	441a      	add	r2, r3
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	3304      	adds	r3, #4
 80069d4:	4619      	mov	r1, r3
 80069d6:	4610      	mov	r0, r2
 80069d8:	f7fe fbb7 	bl	800514a <vListInsertEnd>
 80069dc:	e005      	b.n	80069ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	3318      	adds	r3, #24
 80069e2:	4619      	mov	r1, r3
 80069e4:	480e      	ldr	r0, [pc, #56]	; (8006a20 <xTaskRemoveFromEventList+0xbc>)
 80069e6:	f7fe fbb0 	bl	800514a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ee:	4b0d      	ldr	r3, [pc, #52]	; (8006a24 <xTaskRemoveFromEventList+0xc0>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d905      	bls.n	8006a04 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069f8:	2301      	movs	r3, #1
 80069fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069fc:	4b0a      	ldr	r3, [pc, #40]	; (8006a28 <xTaskRemoveFromEventList+0xc4>)
 80069fe:	2201      	movs	r2, #1
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	e001      	b.n	8006a08 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006a04:	2300      	movs	r3, #0
 8006a06:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a08:	697b      	ldr	r3, [r7, #20]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	2000153c 	.word	0x2000153c
 8006a18:	2000151c 	.word	0x2000151c
 8006a1c:	20001044 	.word	0x20001044
 8006a20:	200014d4 	.word	0x200014d4
 8006a24:	20001040 	.word	0x20001040
 8006a28:	20001528 	.word	0x20001528

08006a2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a34:	4b06      	ldr	r3, [pc, #24]	; (8006a50 <vTaskInternalSetTimeOutState+0x24>)
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a3c:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <vTaskInternalSetTimeOutState+0x28>)
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	605a      	str	r2, [r3, #4]
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	2000152c 	.word	0x2000152c
 8006a54:	20001518 	.word	0x20001518

08006a58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10a      	bne.n	8006a7e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	613b      	str	r3, [r7, #16]
}
 8006a7a:	bf00      	nop
 8006a7c:	e7fe      	b.n	8006a7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10a      	bne.n	8006a9a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	60fb      	str	r3, [r7, #12]
}
 8006a96:	bf00      	nop
 8006a98:	e7fe      	b.n	8006a98 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006a9a:	f000 ff8b 	bl	80079b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a9e:	4b1d      	ldr	r3, [pc, #116]	; (8006b14 <xTaskCheckForTimeOut+0xbc>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ab6:	d102      	bne.n	8006abe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	61fb      	str	r3, [r7, #28]
 8006abc:	e023      	b.n	8006b06 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	4b15      	ldr	r3, [pc, #84]	; (8006b18 <xTaskCheckForTimeOut+0xc0>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d007      	beq.n	8006ada <xTaskCheckForTimeOut+0x82>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d302      	bcc.n	8006ada <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	61fb      	str	r3, [r7, #28]
 8006ad8:	e015      	b.n	8006b06 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d20b      	bcs.n	8006afc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	1ad2      	subs	r2, r2, r3
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff ff9b 	bl	8006a2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006af6:	2300      	movs	r3, #0
 8006af8:	61fb      	str	r3, [r7, #28]
 8006afa:	e004      	b.n	8006b06 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2200      	movs	r2, #0
 8006b00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b02:	2301      	movs	r3, #1
 8006b04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b06:	f000 ff85 	bl	8007a14 <vPortExitCritical>

	return xReturn;
 8006b0a:	69fb      	ldr	r3, [r7, #28]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3720      	adds	r7, #32
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	20001518 	.word	0x20001518
 8006b18:	2000152c 	.word	0x2000152c

08006b1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b20:	4b03      	ldr	r3, [pc, #12]	; (8006b30 <vTaskMissedYield+0x14>)
 8006b22:	2201      	movs	r2, #1
 8006b24:	601a      	str	r2, [r3, #0]
}
 8006b26:	bf00      	nop
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	20001528 	.word	0x20001528

08006b34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b3c:	f000 f852 	bl	8006be4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b40:	4b06      	ldr	r3, [pc, #24]	; (8006b5c <prvIdleTask+0x28>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d9f9      	bls.n	8006b3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b48:	4b05      	ldr	r3, [pc, #20]	; (8006b60 <prvIdleTask+0x2c>)
 8006b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b58:	e7f0      	b.n	8006b3c <prvIdleTask+0x8>
 8006b5a:	bf00      	nop
 8006b5c:	20001044 	.word	0x20001044
 8006b60:	e000ed04 	.word	0xe000ed04

08006b64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	607b      	str	r3, [r7, #4]
 8006b6e:	e00c      	b.n	8006b8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4a12      	ldr	r2, [pc, #72]	; (8006bc4 <prvInitialiseTaskLists+0x60>)
 8006b7c:	4413      	add	r3, r2
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fe fab6 	bl	80050f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	3301      	adds	r3, #1
 8006b88:	607b      	str	r3, [r7, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b37      	cmp	r3, #55	; 0x37
 8006b8e:	d9ef      	bls.n	8006b70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b90:	480d      	ldr	r0, [pc, #52]	; (8006bc8 <prvInitialiseTaskLists+0x64>)
 8006b92:	f7fe faad 	bl	80050f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b96:	480d      	ldr	r0, [pc, #52]	; (8006bcc <prvInitialiseTaskLists+0x68>)
 8006b98:	f7fe faaa 	bl	80050f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b9c:	480c      	ldr	r0, [pc, #48]	; (8006bd0 <prvInitialiseTaskLists+0x6c>)
 8006b9e:	f7fe faa7 	bl	80050f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ba2:	480c      	ldr	r0, [pc, #48]	; (8006bd4 <prvInitialiseTaskLists+0x70>)
 8006ba4:	f7fe faa4 	bl	80050f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ba8:	480b      	ldr	r0, [pc, #44]	; (8006bd8 <prvInitialiseTaskLists+0x74>)
 8006baa:	f7fe faa1 	bl	80050f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006bae:	4b0b      	ldr	r3, [pc, #44]	; (8006bdc <prvInitialiseTaskLists+0x78>)
 8006bb0:	4a05      	ldr	r2, [pc, #20]	; (8006bc8 <prvInitialiseTaskLists+0x64>)
 8006bb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006bb4:	4b0a      	ldr	r3, [pc, #40]	; (8006be0 <prvInitialiseTaskLists+0x7c>)
 8006bb6:	4a05      	ldr	r2, [pc, #20]	; (8006bcc <prvInitialiseTaskLists+0x68>)
 8006bb8:	601a      	str	r2, [r3, #0]
}
 8006bba:	bf00      	nop
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20001044 	.word	0x20001044
 8006bc8:	200014a4 	.word	0x200014a4
 8006bcc:	200014b8 	.word	0x200014b8
 8006bd0:	200014d4 	.word	0x200014d4
 8006bd4:	200014e8 	.word	0x200014e8
 8006bd8:	20001500 	.word	0x20001500
 8006bdc:	200014cc 	.word	0x200014cc
 8006be0:	200014d0 	.word	0x200014d0

08006be4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bea:	e019      	b.n	8006c20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006bec:	f000 fee2 	bl	80079b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bf0:	4b10      	ldr	r3, [pc, #64]	; (8006c34 <prvCheckTasksWaitingTermination+0x50>)
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fe fb01 	bl	8005204 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c02:	4b0d      	ldr	r3, [pc, #52]	; (8006c38 <prvCheckTasksWaitingTermination+0x54>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	4a0b      	ldr	r2, [pc, #44]	; (8006c38 <prvCheckTasksWaitingTermination+0x54>)
 8006c0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c0c:	4b0b      	ldr	r3, [pc, #44]	; (8006c3c <prvCheckTasksWaitingTermination+0x58>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3b01      	subs	r3, #1
 8006c12:	4a0a      	ldr	r2, [pc, #40]	; (8006c3c <prvCheckTasksWaitingTermination+0x58>)
 8006c14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c16:	f000 fefd 	bl	8007a14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f810 	bl	8006c40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c20:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <prvCheckTasksWaitingTermination+0x58>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1e1      	bne.n	8006bec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c28:	bf00      	nop
 8006c2a:	bf00      	nop
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	200014e8 	.word	0x200014e8
 8006c38:	20001514 	.word	0x20001514
 8006c3c:	200014fc 	.word	0x200014fc

08006c40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3354      	adds	r3, #84	; 0x54
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f001 fa07 	bl	8008060 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d108      	bne.n	8006c6e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c60:	4618      	mov	r0, r3
 8006c62:	f001 f895 	bl	8007d90 <vPortFree>
				vPortFree( pxTCB );
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f001 f892 	bl	8007d90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c6c:	e018      	b.n	8006ca0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d103      	bne.n	8006c80 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 f889 	bl	8007d90 <vPortFree>
	}
 8006c7e:	e00f      	b.n	8006ca0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d00a      	beq.n	8006ca0 <prvDeleteTCB+0x60>
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	60fb      	str	r3, [r7, #12]
}
 8006c9c:	bf00      	nop
 8006c9e:	e7fe      	b.n	8006c9e <prvDeleteTCB+0x5e>
	}
 8006ca0:	bf00      	nop
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cae:	4b0c      	ldr	r3, [pc, #48]	; (8006ce0 <prvResetNextTaskUnblockTime+0x38>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d104      	bne.n	8006cc2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006cb8:	4b0a      	ldr	r3, [pc, #40]	; (8006ce4 <prvResetNextTaskUnblockTime+0x3c>)
 8006cba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cbe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006cc0:	e008      	b.n	8006cd4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cc2:	4b07      	ldr	r3, [pc, #28]	; (8006ce0 <prvResetNextTaskUnblockTime+0x38>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	4a04      	ldr	r2, [pc, #16]	; (8006ce4 <prvResetNextTaskUnblockTime+0x3c>)
 8006cd2:	6013      	str	r3, [r2, #0]
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	200014cc 	.word	0x200014cc
 8006ce4:	20001534 	.word	0x20001534

08006ce8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006cee:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <xTaskGetCurrentTaskHandle+0x1c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006cf4:	687b      	ldr	r3, [r7, #4]
	}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	20001040 	.word	0x20001040

08006d08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d0e:	4b0b      	ldr	r3, [pc, #44]	; (8006d3c <xTaskGetSchedulerState+0x34>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d102      	bne.n	8006d1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d16:	2301      	movs	r3, #1
 8006d18:	607b      	str	r3, [r7, #4]
 8006d1a:	e008      	b.n	8006d2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d1c:	4b08      	ldr	r3, [pc, #32]	; (8006d40 <xTaskGetSchedulerState+0x38>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d102      	bne.n	8006d2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d24:	2302      	movs	r3, #2
 8006d26:	607b      	str	r3, [r7, #4]
 8006d28:	e001      	b.n	8006d2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d2e:	687b      	ldr	r3, [r7, #4]
	}
 8006d30:	4618      	mov	r0, r3
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	20001520 	.word	0x20001520
 8006d40:	2000153c 	.word	0x2000153c

08006d44 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d50:	2300      	movs	r3, #0
 8006d52:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d051      	beq.n	8006dfe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5e:	4b2a      	ldr	r3, [pc, #168]	; (8006e08 <xTaskPriorityInherit+0xc4>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d241      	bcs.n	8006dec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	db06      	blt.n	8006d7e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d70:	4b25      	ldr	r3, [pc, #148]	; (8006e08 <xTaskPriorityInherit+0xc4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	6959      	ldr	r1, [r3, #20]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d86:	4613      	mov	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4a1f      	ldr	r2, [pc, #124]	; (8006e0c <xTaskPriorityInherit+0xc8>)
 8006d90:	4413      	add	r3, r2
 8006d92:	4299      	cmp	r1, r3
 8006d94:	d122      	bne.n	8006ddc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fe fa32 	bl	8005204 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006da0:	4b19      	ldr	r3, [pc, #100]	; (8006e08 <xTaskPriorityInherit+0xc4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dae:	4b18      	ldr	r3, [pc, #96]	; (8006e10 <xTaskPriorityInherit+0xcc>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d903      	bls.n	8006dbe <xTaskPriorityInherit+0x7a>
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dba:	4a15      	ldr	r2, [pc, #84]	; (8006e10 <xTaskPriorityInherit+0xcc>)
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4a10      	ldr	r2, [pc, #64]	; (8006e0c <xTaskPriorityInherit+0xc8>)
 8006dcc:	441a      	add	r2, r3
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	f7fe f9b8 	bl	800514a <vListInsertEnd>
 8006dda:	e004      	b.n	8006de6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ddc:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <xTaskPriorityInherit+0xc4>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006de6:	2301      	movs	r3, #1
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	e008      	b.n	8006dfe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006df0:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <xTaskPriorityInherit+0xc4>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d201      	bcs.n	8006dfe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
	}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	20001040 	.word	0x20001040
 8006e0c:	20001044 	.word	0x20001044
 8006e10:	2000151c 	.word	0x2000151c

08006e14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e20:	2300      	movs	r3, #0
 8006e22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d056      	beq.n	8006ed8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e2a:	4b2e      	ldr	r3, [pc, #184]	; (8006ee4 <xTaskPriorityDisinherit+0xd0>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d00a      	beq.n	8006e4a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	60fb      	str	r3, [r7, #12]
}
 8006e46:	bf00      	nop
 8006e48:	e7fe      	b.n	8006e48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10a      	bne.n	8006e68 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	60bb      	str	r3, [r7, #8]
}
 8006e64:	bf00      	nop
 8006e66:	e7fe      	b.n	8006e66 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e6c:	1e5a      	subs	r2, r3, #1
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d02c      	beq.n	8006ed8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d128      	bne.n	8006ed8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fe f9ba 	bl	8005204 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea8:	4b0f      	ldr	r3, [pc, #60]	; (8006ee8 <xTaskPriorityDisinherit+0xd4>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d903      	bls.n	8006eb8 <xTaskPriorityDisinherit+0xa4>
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb4:	4a0c      	ldr	r2, [pc, #48]	; (8006ee8 <xTaskPriorityDisinherit+0xd4>)
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4a09      	ldr	r2, [pc, #36]	; (8006eec <xTaskPriorityDisinherit+0xd8>)
 8006ec6:	441a      	add	r2, r3
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	f7fe f93b 	bl	800514a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ed8:	697b      	ldr	r3, [r7, #20]
	}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20001040 	.word	0x20001040
 8006ee8:	2000151c 	.word	0x2000151c
 8006eec:	20001044 	.word	0x20001044

08006ef0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b088      	sub	sp, #32
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006efe:	2301      	movs	r3, #1
 8006f00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d06a      	beq.n	8006fde <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10a      	bne.n	8006f26 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	60fb      	str	r3, [r7, #12]
}
 8006f22:	bf00      	nop
 8006f24:	e7fe      	b.n	8006f24 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d902      	bls.n	8006f36 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	61fb      	str	r3, [r7, #28]
 8006f34:	e002      	b.n	8006f3c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f40:	69fa      	ldr	r2, [r7, #28]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d04b      	beq.n	8006fde <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d146      	bne.n	8006fde <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006f50:	4b25      	ldr	r3, [pc, #148]	; (8006fe8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d10a      	bne.n	8006f70 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	60bb      	str	r3, [r7, #8]
}
 8006f6c:	bf00      	nop
 8006f6e:	e7fe      	b.n	8006f6e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	69fa      	ldr	r2, [r7, #28]
 8006f7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	db04      	blt.n	8006f8e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	6959      	ldr	r1, [r3, #20]
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4613      	mov	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4a13      	ldr	r2, [pc, #76]	; (8006fec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006f9e:	4413      	add	r3, r2
 8006fa0:	4299      	cmp	r1, r3
 8006fa2:	d11c      	bne.n	8006fde <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fe f92b 	bl	8005204 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb2:	4b0f      	ldr	r3, [pc, #60]	; (8006ff0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d903      	bls.n	8006fc2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbe:	4a0c      	ldr	r2, [pc, #48]	; (8006ff0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4a07      	ldr	r2, [pc, #28]	; (8006fec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006fd0:	441a      	add	r2, r3
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4610      	mov	r0, r2
 8006fda:	f7fe f8b6 	bl	800514a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fde:	bf00      	nop
 8006fe0:	3720      	adds	r7, #32
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20001040 	.word	0x20001040
 8006fec:	20001044 	.word	0x20001044
 8006ff0:	2000151c 	.word	0x2000151c

08006ff4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006ff4:	b480      	push	{r7}
 8006ff6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006ff8:	4b07      	ldr	r3, [pc, #28]	; (8007018 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d004      	beq.n	800700a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007000:	4b05      	ldr	r3, [pc, #20]	; (8007018 <pvTaskIncrementMutexHeldCount+0x24>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007006:	3201      	adds	r2, #1
 8007008:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800700a:	4b03      	ldr	r3, [pc, #12]	; (8007018 <pvTaskIncrementMutexHeldCount+0x24>)
 800700c:	681b      	ldr	r3, [r3, #0]
	}
 800700e:	4618      	mov	r0, r3
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	20001040 	.word	0x20001040

0800701c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007026:	4b21      	ldr	r3, [pc, #132]	; (80070ac <prvAddCurrentTaskToDelayedList+0x90>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800702c:	4b20      	ldr	r3, [pc, #128]	; (80070b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3304      	adds	r3, #4
 8007032:	4618      	mov	r0, r3
 8007034:	f7fe f8e6 	bl	8005204 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800703e:	d10a      	bne.n	8007056 <prvAddCurrentTaskToDelayedList+0x3a>
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007046:	4b1a      	ldr	r3, [pc, #104]	; (80070b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3304      	adds	r3, #4
 800704c:	4619      	mov	r1, r3
 800704e:	4819      	ldr	r0, [pc, #100]	; (80070b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007050:	f7fe f87b 	bl	800514a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007054:	e026      	b.n	80070a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4413      	add	r3, r2
 800705c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800705e:	4b14      	ldr	r3, [pc, #80]	; (80070b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	429a      	cmp	r2, r3
 800706c:	d209      	bcs.n	8007082 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800706e:	4b12      	ldr	r3, [pc, #72]	; (80070b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	4b0f      	ldr	r3, [pc, #60]	; (80070b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3304      	adds	r3, #4
 8007078:	4619      	mov	r1, r3
 800707a:	4610      	mov	r0, r2
 800707c:	f7fe f889 	bl	8005192 <vListInsert>
}
 8007080:	e010      	b.n	80070a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007082:	4b0e      	ldr	r3, [pc, #56]	; (80070bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4b0a      	ldr	r3, [pc, #40]	; (80070b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3304      	adds	r3, #4
 800708c:	4619      	mov	r1, r3
 800708e:	4610      	mov	r0, r2
 8007090:	f7fe f87f 	bl	8005192 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007094:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	429a      	cmp	r2, r3
 800709c:	d202      	bcs.n	80070a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800709e:	4a08      	ldr	r2, [pc, #32]	; (80070c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	6013      	str	r3, [r2, #0]
}
 80070a4:	bf00      	nop
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20001518 	.word	0x20001518
 80070b0:	20001040 	.word	0x20001040
 80070b4:	20001500 	.word	0x20001500
 80070b8:	200014d0 	.word	0x200014d0
 80070bc:	200014cc 	.word	0x200014cc
 80070c0:	20001534 	.word	0x20001534

080070c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b08a      	sub	sp, #40	; 0x28
 80070c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80070ce:	f000 fb07 	bl	80076e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070d2:	4b1c      	ldr	r3, [pc, #112]	; (8007144 <xTimerCreateTimerTask+0x80>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d021      	beq.n	800711e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070da:	2300      	movs	r3, #0
 80070dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070de:	2300      	movs	r3, #0
 80070e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070e2:	1d3a      	adds	r2, r7, #4
 80070e4:	f107 0108 	add.w	r1, r7, #8
 80070e8:	f107 030c 	add.w	r3, r7, #12
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fd ffe5 	bl	80050bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070f2:	6879      	ldr	r1, [r7, #4]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	9202      	str	r2, [sp, #8]
 80070fa:	9301      	str	r3, [sp, #4]
 80070fc:	2302      	movs	r3, #2
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	2300      	movs	r3, #0
 8007102:	460a      	mov	r2, r1
 8007104:	4910      	ldr	r1, [pc, #64]	; (8007148 <xTimerCreateTimerTask+0x84>)
 8007106:	4811      	ldr	r0, [pc, #68]	; (800714c <xTimerCreateTimerTask+0x88>)
 8007108:	f7fe ffa6 	bl	8006058 <xTaskCreateStatic>
 800710c:	4603      	mov	r3, r0
 800710e:	4a10      	ldr	r2, [pc, #64]	; (8007150 <xTimerCreateTimerTask+0x8c>)
 8007110:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007112:	4b0f      	ldr	r3, [pc, #60]	; (8007150 <xTimerCreateTimerTask+0x8c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800711a:	2301      	movs	r3, #1
 800711c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10a      	bne.n	800713a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007128:	f383 8811 	msr	BASEPRI, r3
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	613b      	str	r3, [r7, #16]
}
 8007136:	bf00      	nop
 8007138:	e7fe      	b.n	8007138 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800713a:	697b      	ldr	r3, [r7, #20]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3718      	adds	r7, #24
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	20001570 	.word	0x20001570
 8007148:	08008220 	.word	0x08008220
 800714c:	08007289 	.word	0x08007289
 8007150:	20001574 	.word	0x20001574

08007154 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08a      	sub	sp, #40	; 0x28
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007162:	2300      	movs	r3, #0
 8007164:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10a      	bne.n	8007182 <xTimerGenericCommand+0x2e>
	__asm volatile
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	623b      	str	r3, [r7, #32]
}
 800717e:	bf00      	nop
 8007180:	e7fe      	b.n	8007180 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007182:	4b1a      	ldr	r3, [pc, #104]	; (80071ec <xTimerGenericCommand+0x98>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d02a      	beq.n	80071e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2b05      	cmp	r3, #5
 800719a:	dc18      	bgt.n	80071ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800719c:	f7ff fdb4 	bl	8006d08 <xTaskGetSchedulerState>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d109      	bne.n	80071ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071a6:	4b11      	ldr	r3, [pc, #68]	; (80071ec <xTimerGenericCommand+0x98>)
 80071a8:	6818      	ldr	r0, [r3, #0]
 80071aa:	f107 0110 	add.w	r1, r7, #16
 80071ae:	2300      	movs	r3, #0
 80071b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071b2:	f7fe fa45 	bl	8005640 <xQueueGenericSend>
 80071b6:	6278      	str	r0, [r7, #36]	; 0x24
 80071b8:	e012      	b.n	80071e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071ba:	4b0c      	ldr	r3, [pc, #48]	; (80071ec <xTimerGenericCommand+0x98>)
 80071bc:	6818      	ldr	r0, [r3, #0]
 80071be:	f107 0110 	add.w	r1, r7, #16
 80071c2:	2300      	movs	r3, #0
 80071c4:	2200      	movs	r2, #0
 80071c6:	f7fe fa3b 	bl	8005640 <xQueueGenericSend>
 80071ca:	6278      	str	r0, [r7, #36]	; 0x24
 80071cc:	e008      	b.n	80071e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071ce:	4b07      	ldr	r3, [pc, #28]	; (80071ec <xTimerGenericCommand+0x98>)
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	f107 0110 	add.w	r1, r7, #16
 80071d6:	2300      	movs	r3, #0
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	f7fe fb2f 	bl	800583c <xQueueGenericSendFromISR>
 80071de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3728      	adds	r7, #40	; 0x28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20001570 	.word	0x20001570

080071f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b088      	sub	sp, #32
 80071f4:	af02      	add	r7, sp, #8
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071fa:	4b22      	ldr	r3, [pc, #136]	; (8007284 <prvProcessExpiredTimer+0x94>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	3304      	adds	r3, #4
 8007208:	4618      	mov	r0, r3
 800720a:	f7fd fffb 	bl	8005204 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b00      	cmp	r3, #0
 800721a:	d022      	beq.n	8007262 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	699a      	ldr	r2, [r3, #24]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	18d1      	adds	r1, r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	6978      	ldr	r0, [r7, #20]
 800722a:	f000 f8d1 	bl	80073d0 <prvInsertTimerInActiveList>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d01f      	beq.n	8007274 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007234:	2300      	movs	r3, #0
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	2300      	movs	r3, #0
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	2100      	movs	r1, #0
 800723e:	6978      	ldr	r0, [r7, #20]
 8007240:	f7ff ff88 	bl	8007154 <xTimerGenericCommand>
 8007244:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d113      	bne.n	8007274 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	60fb      	str	r3, [r7, #12]
}
 800725e:	bf00      	nop
 8007260:	e7fe      	b.n	8007260 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007268:	f023 0301 	bic.w	r3, r3, #1
 800726c:	b2da      	uxtb	r2, r3
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	6978      	ldr	r0, [r7, #20]
 800727a:	4798      	blx	r3
}
 800727c:	bf00      	nop
 800727e:	3718      	adds	r7, #24
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	20001568 	.word	0x20001568

08007288 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007290:	f107 0308 	add.w	r3, r7, #8
 8007294:	4618      	mov	r0, r3
 8007296:	f000 f857 	bl	8007348 <prvGetNextExpireTime>
 800729a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	4619      	mov	r1, r3
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 f803 	bl	80072ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072a6:	f000 f8d5 	bl	8007454 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072aa:	e7f1      	b.n	8007290 <prvTimerTask+0x8>

080072ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072b6:	f7ff f92b 	bl	8006510 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072ba:	f107 0308 	add.w	r3, r7, #8
 80072be:	4618      	mov	r0, r3
 80072c0:	f000 f866 	bl	8007390 <prvSampleTimeNow>
 80072c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d130      	bne.n	800732e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10a      	bne.n	80072e8 <prvProcessTimerOrBlockTask+0x3c>
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d806      	bhi.n	80072e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80072da:	f7ff f927 	bl	800652c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072de:	68f9      	ldr	r1, [r7, #12]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7ff ff85 	bl	80071f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072e6:	e024      	b.n	8007332 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d008      	beq.n	8007300 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072ee:	4b13      	ldr	r3, [pc, #76]	; (800733c <prvProcessTimerOrBlockTask+0x90>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <prvProcessTimerOrBlockTask+0x50>
 80072f8:	2301      	movs	r3, #1
 80072fa:	e000      	b.n	80072fe <prvProcessTimerOrBlockTask+0x52>
 80072fc:	2300      	movs	r3, #0
 80072fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007300:	4b0f      	ldr	r3, [pc, #60]	; (8007340 <prvProcessTimerOrBlockTask+0x94>)
 8007302:	6818      	ldr	r0, [r3, #0]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	4619      	mov	r1, r3
 800730e:	f7fe fe6f 	bl	8005ff0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007312:	f7ff f90b 	bl	800652c <xTaskResumeAll>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10a      	bne.n	8007332 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800731c:	4b09      	ldr	r3, [pc, #36]	; (8007344 <prvProcessTimerOrBlockTask+0x98>)
 800731e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	f3bf 8f6f 	isb	sy
}
 800732c:	e001      	b.n	8007332 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800732e:	f7ff f8fd 	bl	800652c <xTaskResumeAll>
}
 8007332:	bf00      	nop
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	2000156c 	.word	0x2000156c
 8007340:	20001570 	.word	0x20001570
 8007344:	e000ed04 	.word	0xe000ed04

08007348 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007350:	4b0e      	ldr	r3, [pc, #56]	; (800738c <prvGetNextExpireTime+0x44>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <prvGetNextExpireTime+0x16>
 800735a:	2201      	movs	r2, #1
 800735c:	e000      	b.n	8007360 <prvGetNextExpireTime+0x18>
 800735e:	2200      	movs	r2, #0
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d105      	bne.n	8007378 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800736c:	4b07      	ldr	r3, [pc, #28]	; (800738c <prvGetNextExpireTime+0x44>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	e001      	b.n	800737c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800737c:	68fb      	ldr	r3, [r7, #12]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	20001568 	.word	0x20001568

08007390 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007398:	f7ff f966 	bl	8006668 <xTaskGetTickCount>
 800739c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800739e:	4b0b      	ldr	r3, [pc, #44]	; (80073cc <prvSampleTimeNow+0x3c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d205      	bcs.n	80073b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073a8:	f000 f936 	bl	8007618 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	e002      	b.n	80073ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073ba:	4a04      	ldr	r2, [pc, #16]	; (80073cc <prvSampleTimeNow+0x3c>)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073c0:	68fb      	ldr	r3, [r7, #12]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20001578 	.word	0x20001578

080073d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
 80073dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80073de:	2300      	movs	r3, #0
 80073e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d812      	bhi.n	800741c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	1ad2      	subs	r2, r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	429a      	cmp	r2, r3
 8007402:	d302      	bcc.n	800740a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007404:	2301      	movs	r3, #1
 8007406:	617b      	str	r3, [r7, #20]
 8007408:	e01b      	b.n	8007442 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800740a:	4b10      	ldr	r3, [pc, #64]	; (800744c <prvInsertTimerInActiveList+0x7c>)
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	3304      	adds	r3, #4
 8007412:	4619      	mov	r1, r3
 8007414:	4610      	mov	r0, r2
 8007416:	f7fd febc 	bl	8005192 <vListInsert>
 800741a:	e012      	b.n	8007442 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	429a      	cmp	r2, r3
 8007422:	d206      	bcs.n	8007432 <prvInsertTimerInActiveList+0x62>
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	429a      	cmp	r2, r3
 800742a:	d302      	bcc.n	8007432 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800742c:	2301      	movs	r3, #1
 800742e:	617b      	str	r3, [r7, #20]
 8007430:	e007      	b.n	8007442 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007432:	4b07      	ldr	r3, [pc, #28]	; (8007450 <prvInsertTimerInActiveList+0x80>)
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3304      	adds	r3, #4
 800743a:	4619      	mov	r1, r3
 800743c:	4610      	mov	r0, r2
 800743e:	f7fd fea8 	bl	8005192 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007442:	697b      	ldr	r3, [r7, #20]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3718      	adds	r7, #24
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	2000156c 	.word	0x2000156c
 8007450:	20001568 	.word	0x20001568

08007454 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08e      	sub	sp, #56	; 0x38
 8007458:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800745a:	e0ca      	b.n	80075f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	da18      	bge.n	8007494 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007462:	1d3b      	adds	r3, r7, #4
 8007464:	3304      	adds	r3, #4
 8007466:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10a      	bne.n	8007484 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	61fb      	str	r3, [r7, #28]
}
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800748a:	6850      	ldr	r0, [r2, #4]
 800748c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800748e:	6892      	ldr	r2, [r2, #8]
 8007490:	4611      	mov	r1, r2
 8007492:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	f2c0 80aa 	blt.w	80075f0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d004      	beq.n	80074b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074aa:	3304      	adds	r3, #4
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fd fea9 	bl	8005204 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074b2:	463b      	mov	r3, r7
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff ff6b 	bl	8007390 <prvSampleTimeNow>
 80074ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b09      	cmp	r3, #9
 80074c0:	f200 8097 	bhi.w	80075f2 <prvProcessReceivedCommands+0x19e>
 80074c4:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <prvProcessReceivedCommands+0x78>)
 80074c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ca:	bf00      	nop
 80074cc:	080074f5 	.word	0x080074f5
 80074d0:	080074f5 	.word	0x080074f5
 80074d4:	080074f5 	.word	0x080074f5
 80074d8:	08007569 	.word	0x08007569
 80074dc:	0800757d 	.word	0x0800757d
 80074e0:	080075c7 	.word	0x080075c7
 80074e4:	080074f5 	.word	0x080074f5
 80074e8:	080074f5 	.word	0x080074f5
 80074ec:	08007569 	.word	0x08007569
 80074f0:	0800757d 	.word	0x0800757d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074fa:	f043 0301 	orr.w	r3, r3, #1
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	18d1      	adds	r1, r2, r3
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007514:	f7ff ff5c 	bl	80073d0 <prvInsertTimerInActiveList>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d069      	beq.n	80075f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007524:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	2b00      	cmp	r3, #0
 8007532:	d05e      	beq.n	80075f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	441a      	add	r2, r3
 800753c:	2300      	movs	r3, #0
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	2300      	movs	r3, #0
 8007542:	2100      	movs	r1, #0
 8007544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007546:	f7ff fe05 	bl	8007154 <xTimerGenericCommand>
 800754a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d14f      	bne.n	80075f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	61bb      	str	r3, [r7, #24]
}
 8007564:	bf00      	nop
 8007566:	e7fe      	b.n	8007566 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800756e:	f023 0301 	bic.w	r3, r3, #1
 8007572:	b2da      	uxtb	r2, r3
 8007574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800757a:	e03a      	b.n	80075f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800757c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007582:	f043 0301 	orr.w	r3, r3, #1
 8007586:	b2da      	uxtb	r2, r3
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10a      	bne.n	80075b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	617b      	str	r3, [r7, #20]
}
 80075ae:	bf00      	nop
 80075b0:	e7fe      	b.n	80075b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b4:	699a      	ldr	r2, [r3, #24]
 80075b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b8:	18d1      	adds	r1, r2, r3
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075c0:	f7ff ff06 	bl	80073d0 <prvInsertTimerInActiveList>
					break;
 80075c4:	e015      	b.n	80075f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075cc:	f003 0302 	and.w	r3, r3, #2
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d103      	bne.n	80075dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80075d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075d6:	f000 fbdb 	bl	8007d90 <vPortFree>
 80075da:	e00a      	b.n	80075f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075e2:	f023 0301 	bic.w	r3, r3, #1
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075ee:	e000      	b.n	80075f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80075f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075f2:	4b08      	ldr	r3, [pc, #32]	; (8007614 <prvProcessReceivedCommands+0x1c0>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	1d39      	adds	r1, r7, #4
 80075f8:	2200      	movs	r2, #0
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe f9ba 	bl	8005974 <xQueueReceive>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	f47f af2a 	bne.w	800745c <prvProcessReceivedCommands+0x8>
	}
}
 8007608:	bf00      	nop
 800760a:	bf00      	nop
 800760c:	3730      	adds	r7, #48	; 0x30
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20001570 	.word	0x20001570

08007618 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800761e:	e048      	b.n	80076b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007620:	4b2d      	ldr	r3, [pc, #180]	; (80076d8 <prvSwitchTimerLists+0xc0>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800762a:	4b2b      	ldr	r3, [pc, #172]	; (80076d8 <prvSwitchTimerLists+0xc0>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3304      	adds	r3, #4
 8007638:	4618      	mov	r0, r3
 800763a:	f7fd fde3 	bl	8005204 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b00      	cmp	r3, #0
 8007652:	d02e      	beq.n	80076b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4413      	add	r3, r2
 800765c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	429a      	cmp	r2, r3
 8007664:	d90e      	bls.n	8007684 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007672:	4b19      	ldr	r3, [pc, #100]	; (80076d8 <prvSwitchTimerLists+0xc0>)
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3304      	adds	r3, #4
 800767a:	4619      	mov	r1, r3
 800767c:	4610      	mov	r0, r2
 800767e:	f7fd fd88 	bl	8005192 <vListInsert>
 8007682:	e016      	b.n	80076b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007684:	2300      	movs	r3, #0
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	2300      	movs	r3, #0
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	2100      	movs	r1, #0
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f7ff fd60 	bl	8007154 <xTimerGenericCommand>
 8007694:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10a      	bne.n	80076b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	603b      	str	r3, [r7, #0]
}
 80076ae:	bf00      	nop
 80076b0:	e7fe      	b.n	80076b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076b2:	4b09      	ldr	r3, [pc, #36]	; (80076d8 <prvSwitchTimerLists+0xc0>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1b1      	bne.n	8007620 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076bc:	4b06      	ldr	r3, [pc, #24]	; (80076d8 <prvSwitchTimerLists+0xc0>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076c2:	4b06      	ldr	r3, [pc, #24]	; (80076dc <prvSwitchTimerLists+0xc4>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a04      	ldr	r2, [pc, #16]	; (80076d8 <prvSwitchTimerLists+0xc0>)
 80076c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076ca:	4a04      	ldr	r2, [pc, #16]	; (80076dc <prvSwitchTimerLists+0xc4>)
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	6013      	str	r3, [r2, #0]
}
 80076d0:	bf00      	nop
 80076d2:	3718      	adds	r7, #24
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20001568 	.word	0x20001568
 80076dc:	2000156c 	.word	0x2000156c

080076e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076e6:	f000 f965 	bl	80079b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80076ea:	4b15      	ldr	r3, [pc, #84]	; (8007740 <prvCheckForValidListAndQueue+0x60>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d120      	bne.n	8007734 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80076f2:	4814      	ldr	r0, [pc, #80]	; (8007744 <prvCheckForValidListAndQueue+0x64>)
 80076f4:	f7fd fcfc 	bl	80050f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076f8:	4813      	ldr	r0, [pc, #76]	; (8007748 <prvCheckForValidListAndQueue+0x68>)
 80076fa:	f7fd fcf9 	bl	80050f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80076fe:	4b13      	ldr	r3, [pc, #76]	; (800774c <prvCheckForValidListAndQueue+0x6c>)
 8007700:	4a10      	ldr	r2, [pc, #64]	; (8007744 <prvCheckForValidListAndQueue+0x64>)
 8007702:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007704:	4b12      	ldr	r3, [pc, #72]	; (8007750 <prvCheckForValidListAndQueue+0x70>)
 8007706:	4a10      	ldr	r2, [pc, #64]	; (8007748 <prvCheckForValidListAndQueue+0x68>)
 8007708:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800770a:	2300      	movs	r3, #0
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	4b11      	ldr	r3, [pc, #68]	; (8007754 <prvCheckForValidListAndQueue+0x74>)
 8007710:	4a11      	ldr	r2, [pc, #68]	; (8007758 <prvCheckForValidListAndQueue+0x78>)
 8007712:	2110      	movs	r1, #16
 8007714:	200a      	movs	r0, #10
 8007716:	f7fd fe07 	bl	8005328 <xQueueGenericCreateStatic>
 800771a:	4603      	mov	r3, r0
 800771c:	4a08      	ldr	r2, [pc, #32]	; (8007740 <prvCheckForValidListAndQueue+0x60>)
 800771e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007720:	4b07      	ldr	r3, [pc, #28]	; (8007740 <prvCheckForValidListAndQueue+0x60>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d005      	beq.n	8007734 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007728:	4b05      	ldr	r3, [pc, #20]	; (8007740 <prvCheckForValidListAndQueue+0x60>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	490b      	ldr	r1, [pc, #44]	; (800775c <prvCheckForValidListAndQueue+0x7c>)
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe fc34 	bl	8005f9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007734:	f000 f96e 	bl	8007a14 <vPortExitCritical>
}
 8007738:	bf00      	nop
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20001570 	.word	0x20001570
 8007744:	20001540 	.word	0x20001540
 8007748:	20001554 	.word	0x20001554
 800774c:	20001568 	.word	0x20001568
 8007750:	2000156c 	.word	0x2000156c
 8007754:	2000161c 	.word	0x2000161c
 8007758:	2000157c 	.word	0x2000157c
 800775c:	08008228 	.word	0x08008228

08007760 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3b04      	subs	r3, #4
 8007770:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3b04      	subs	r3, #4
 800777e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f023 0201 	bic.w	r2, r3, #1
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3b04      	subs	r3, #4
 800778e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007790:	4a0c      	ldr	r2, [pc, #48]	; (80077c4 <pxPortInitialiseStack+0x64>)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3b14      	subs	r3, #20
 800779a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3b04      	subs	r3, #4
 80077a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f06f 0202 	mvn.w	r2, #2
 80077ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	3b20      	subs	r3, #32
 80077b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077b6:	68fb      	ldr	r3, [r7, #12]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	080077c9 	.word	0x080077c9

080077c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077d2:	4b12      	ldr	r3, [pc, #72]	; (800781c <prvTaskExitError+0x54>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077da:	d00a      	beq.n	80077f2 <prvTaskExitError+0x2a>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	60fb      	str	r3, [r7, #12]
}
 80077ee:	bf00      	nop
 80077f0:	e7fe      	b.n	80077f0 <prvTaskExitError+0x28>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	60bb      	str	r3, [r7, #8]
}
 8007804:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007806:	bf00      	nop
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0fc      	beq.n	8007808 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800780e:	bf00      	nop
 8007810:	bf00      	nop
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	2000000c 	.word	0x2000000c

08007820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007820:	4b07      	ldr	r3, [pc, #28]	; (8007840 <pxCurrentTCBConst2>)
 8007822:	6819      	ldr	r1, [r3, #0]
 8007824:	6808      	ldr	r0, [r1, #0]
 8007826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782a:	f380 8809 	msr	PSP, r0
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f04f 0000 	mov.w	r0, #0
 8007836:	f380 8811 	msr	BASEPRI, r0
 800783a:	4770      	bx	lr
 800783c:	f3af 8000 	nop.w

08007840 <pxCurrentTCBConst2>:
 8007840:	20001040 	.word	0x20001040
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop

08007848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007848:	4808      	ldr	r0, [pc, #32]	; (800786c <prvPortStartFirstTask+0x24>)
 800784a:	6800      	ldr	r0, [r0, #0]
 800784c:	6800      	ldr	r0, [r0, #0]
 800784e:	f380 8808 	msr	MSP, r0
 8007852:	f04f 0000 	mov.w	r0, #0
 8007856:	f380 8814 	msr	CONTROL, r0
 800785a:	b662      	cpsie	i
 800785c:	b661      	cpsie	f
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	df00      	svc	0
 8007868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800786a:	bf00      	nop
 800786c:	e000ed08 	.word	0xe000ed08

08007870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007876:	4b46      	ldr	r3, [pc, #280]	; (8007990 <xPortStartScheduler+0x120>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a46      	ldr	r2, [pc, #280]	; (8007994 <xPortStartScheduler+0x124>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d10a      	bne.n	8007896 <xPortStartScheduler+0x26>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	613b      	str	r3, [r7, #16]
}
 8007892:	bf00      	nop
 8007894:	e7fe      	b.n	8007894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007896:	4b3e      	ldr	r3, [pc, #248]	; (8007990 <xPortStartScheduler+0x120>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a3f      	ldr	r2, [pc, #252]	; (8007998 <xPortStartScheduler+0x128>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d10a      	bne.n	80078b6 <xPortStartScheduler+0x46>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	60fb      	str	r3, [r7, #12]
}
 80078b2:	bf00      	nop
 80078b4:	e7fe      	b.n	80078b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078b6:	4b39      	ldr	r3, [pc, #228]	; (800799c <xPortStartScheduler+0x12c>)
 80078b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	22ff      	movs	r2, #255	; 0xff
 80078c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078d0:	78fb      	ldrb	r3, [r7, #3]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	4b31      	ldr	r3, [pc, #196]	; (80079a0 <xPortStartScheduler+0x130>)
 80078dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078de:	4b31      	ldr	r3, [pc, #196]	; (80079a4 <xPortStartScheduler+0x134>)
 80078e0:	2207      	movs	r2, #7
 80078e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078e4:	e009      	b.n	80078fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80078e6:	4b2f      	ldr	r3, [pc, #188]	; (80079a4 <xPortStartScheduler+0x134>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3b01      	subs	r3, #1
 80078ec:	4a2d      	ldr	r2, [pc, #180]	; (80079a4 <xPortStartScheduler+0x134>)
 80078ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078f0:	78fb      	ldrb	r3, [r7, #3]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007902:	2b80      	cmp	r3, #128	; 0x80
 8007904:	d0ef      	beq.n	80078e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007906:	4b27      	ldr	r3, [pc, #156]	; (80079a4 <xPortStartScheduler+0x134>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f1c3 0307 	rsb	r3, r3, #7
 800790e:	2b04      	cmp	r3, #4
 8007910:	d00a      	beq.n	8007928 <xPortStartScheduler+0xb8>
	__asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	60bb      	str	r3, [r7, #8]
}
 8007924:	bf00      	nop
 8007926:	e7fe      	b.n	8007926 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007928:	4b1e      	ldr	r3, [pc, #120]	; (80079a4 <xPortStartScheduler+0x134>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	021b      	lsls	r3, r3, #8
 800792e:	4a1d      	ldr	r2, [pc, #116]	; (80079a4 <xPortStartScheduler+0x134>)
 8007930:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007932:	4b1c      	ldr	r3, [pc, #112]	; (80079a4 <xPortStartScheduler+0x134>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800793a:	4a1a      	ldr	r2, [pc, #104]	; (80079a4 <xPortStartScheduler+0x134>)
 800793c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	b2da      	uxtb	r2, r3
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007946:	4b18      	ldr	r3, [pc, #96]	; (80079a8 <xPortStartScheduler+0x138>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a17      	ldr	r2, [pc, #92]	; (80079a8 <xPortStartScheduler+0x138>)
 800794c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007952:	4b15      	ldr	r3, [pc, #84]	; (80079a8 <xPortStartScheduler+0x138>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a14      	ldr	r2, [pc, #80]	; (80079a8 <xPortStartScheduler+0x138>)
 8007958:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800795c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800795e:	f000 f8dd 	bl	8007b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007962:	4b12      	ldr	r3, [pc, #72]	; (80079ac <xPortStartScheduler+0x13c>)
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007968:	f000 f8fc 	bl	8007b64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800796c:	4b10      	ldr	r3, [pc, #64]	; (80079b0 <xPortStartScheduler+0x140>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a0f      	ldr	r2, [pc, #60]	; (80079b0 <xPortStartScheduler+0x140>)
 8007972:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007976:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007978:	f7ff ff66 	bl	8007848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800797c:	f7fe ff3e 	bl	80067fc <vTaskSwitchContext>
	prvTaskExitError();
 8007980:	f7ff ff22 	bl	80077c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	e000ed00 	.word	0xe000ed00
 8007994:	410fc271 	.word	0x410fc271
 8007998:	410fc270 	.word	0x410fc270
 800799c:	e000e400 	.word	0xe000e400
 80079a0:	2000166c 	.word	0x2000166c
 80079a4:	20001670 	.word	0x20001670
 80079a8:	e000ed20 	.word	0xe000ed20
 80079ac:	2000000c 	.word	0x2000000c
 80079b0:	e000ef34 	.word	0xe000ef34

080079b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
	__asm volatile
 80079ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	607b      	str	r3, [r7, #4]
}
 80079cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079ce:	4b0f      	ldr	r3, [pc, #60]	; (8007a0c <vPortEnterCritical+0x58>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3301      	adds	r3, #1
 80079d4:	4a0d      	ldr	r2, [pc, #52]	; (8007a0c <vPortEnterCritical+0x58>)
 80079d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079d8:	4b0c      	ldr	r3, [pc, #48]	; (8007a0c <vPortEnterCritical+0x58>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d10f      	bne.n	8007a00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079e0:	4b0b      	ldr	r3, [pc, #44]	; (8007a10 <vPortEnterCritical+0x5c>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00a      	beq.n	8007a00 <vPortEnterCritical+0x4c>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	603b      	str	r3, [r7, #0]
}
 80079fc:	bf00      	nop
 80079fe:	e7fe      	b.n	80079fe <vPortEnterCritical+0x4a>
	}
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	2000000c 	.word	0x2000000c
 8007a10:	e000ed04 	.word	0xe000ed04

08007a14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a1a:	4b12      	ldr	r3, [pc, #72]	; (8007a64 <vPortExitCritical+0x50>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10a      	bne.n	8007a38 <vPortExitCritical+0x24>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	607b      	str	r3, [r7, #4]
}
 8007a34:	bf00      	nop
 8007a36:	e7fe      	b.n	8007a36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a38:	4b0a      	ldr	r3, [pc, #40]	; (8007a64 <vPortExitCritical+0x50>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	4a09      	ldr	r2, [pc, #36]	; (8007a64 <vPortExitCritical+0x50>)
 8007a40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a42:	4b08      	ldr	r3, [pc, #32]	; (8007a64 <vPortExitCritical+0x50>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d105      	bne.n	8007a56 <vPortExitCritical+0x42>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	f383 8811 	msr	BASEPRI, r3
}
 8007a54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a56:	bf00      	nop
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	2000000c 	.word	0x2000000c
	...

08007a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a70:	f3ef 8009 	mrs	r0, PSP
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	4b15      	ldr	r3, [pc, #84]	; (8007ad0 <pxCurrentTCBConst>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	f01e 0f10 	tst.w	lr, #16
 8007a80:	bf08      	it	eq
 8007a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8a:	6010      	str	r0, [r2, #0]
 8007a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a94:	f380 8811 	msr	BASEPRI, r0
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f7fe feac 	bl	80067fc <vTaskSwitchContext>
 8007aa4:	f04f 0000 	mov.w	r0, #0
 8007aa8:	f380 8811 	msr	BASEPRI, r0
 8007aac:	bc09      	pop	{r0, r3}
 8007aae:	6819      	ldr	r1, [r3, #0]
 8007ab0:	6808      	ldr	r0, [r1, #0]
 8007ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab6:	f01e 0f10 	tst.w	lr, #16
 8007aba:	bf08      	it	eq
 8007abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ac0:	f380 8809 	msr	PSP, r0
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	f3af 8000 	nop.w

08007ad0 <pxCurrentTCBConst>:
 8007ad0:	20001040 	.word	0x20001040
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop

08007ad8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	607b      	str	r3, [r7, #4]
}
 8007af0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007af2:	f7fe fdc9 	bl	8006688 <xTaskIncrementTick>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d003      	beq.n	8007b04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007afc:	4b06      	ldr	r3, [pc, #24]	; (8007b18 <xPortSysTickHandler+0x40>)
 8007afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	2300      	movs	r3, #0
 8007b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	f383 8811 	msr	BASEPRI, r3
}
 8007b0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	e000ed04 	.word	0xe000ed04

08007b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b20:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <vPortSetupTimerInterrupt+0x34>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b26:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <vPortSetupTimerInterrupt+0x38>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b2c:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <vPortSetupTimerInterrupt+0x3c>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a0a      	ldr	r2, [pc, #40]	; (8007b5c <vPortSetupTimerInterrupt+0x40>)
 8007b32:	fba2 2303 	umull	r2, r3, r2, r3
 8007b36:	099b      	lsrs	r3, r3, #6
 8007b38:	4a09      	ldr	r2, [pc, #36]	; (8007b60 <vPortSetupTimerInterrupt+0x44>)
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b3e:	4b04      	ldr	r3, [pc, #16]	; (8007b50 <vPortSetupTimerInterrupt+0x34>)
 8007b40:	2207      	movs	r2, #7
 8007b42:	601a      	str	r2, [r3, #0]
}
 8007b44:	bf00      	nop
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	e000e010 	.word	0xe000e010
 8007b54:	e000e018 	.word	0xe000e018
 8007b58:	20000000 	.word	0x20000000
 8007b5c:	10624dd3 	.word	0x10624dd3
 8007b60:	e000e014 	.word	0xe000e014

08007b64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b74 <vPortEnableVFP+0x10>
 8007b68:	6801      	ldr	r1, [r0, #0]
 8007b6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b6e:	6001      	str	r1, [r0, #0]
 8007b70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b72:	bf00      	nop
 8007b74:	e000ed88 	.word	0xe000ed88

08007b78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b7e:	f3ef 8305 	mrs	r3, IPSR
 8007b82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b0f      	cmp	r3, #15
 8007b88:	d914      	bls.n	8007bb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b8a:	4a17      	ldr	r2, [pc, #92]	; (8007be8 <vPortValidateInterruptPriority+0x70>)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4413      	add	r3, r2
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b94:	4b15      	ldr	r3, [pc, #84]	; (8007bec <vPortValidateInterruptPriority+0x74>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	7afa      	ldrb	r2, [r7, #11]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d20a      	bcs.n	8007bb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	607b      	str	r3, [r7, #4]
}
 8007bb0:	bf00      	nop
 8007bb2:	e7fe      	b.n	8007bb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bb4:	4b0e      	ldr	r3, [pc, #56]	; (8007bf0 <vPortValidateInterruptPriority+0x78>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007bbc:	4b0d      	ldr	r3, [pc, #52]	; (8007bf4 <vPortValidateInterruptPriority+0x7c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d90a      	bls.n	8007bda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	603b      	str	r3, [r7, #0]
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <vPortValidateInterruptPriority+0x60>
	}
 8007bda:	bf00      	nop
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	e000e3f0 	.word	0xe000e3f0
 8007bec:	2000166c 	.word	0x2000166c
 8007bf0:	e000ed0c 	.word	0xe000ed0c
 8007bf4:	20001670 	.word	0x20001670

08007bf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08a      	sub	sp, #40	; 0x28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c00:	2300      	movs	r3, #0
 8007c02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c04:	f7fe fc84 	bl	8006510 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c08:	4b5b      	ldr	r3, [pc, #364]	; (8007d78 <pvPortMalloc+0x180>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c10:	f000 f920 	bl	8007e54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c14:	4b59      	ldr	r3, [pc, #356]	; (8007d7c <pvPortMalloc+0x184>)
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f040 8093 	bne.w	8007d48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d01d      	beq.n	8007c64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c28:	2208      	movs	r2, #8
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d014      	beq.n	8007c64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f023 0307 	bic.w	r3, r3, #7
 8007c40:	3308      	adds	r3, #8
 8007c42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00a      	beq.n	8007c64 <pvPortMalloc+0x6c>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	617b      	str	r3, [r7, #20]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d06e      	beq.n	8007d48 <pvPortMalloc+0x150>
 8007c6a:	4b45      	ldr	r3, [pc, #276]	; (8007d80 <pvPortMalloc+0x188>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d869      	bhi.n	8007d48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c74:	4b43      	ldr	r3, [pc, #268]	; (8007d84 <pvPortMalloc+0x18c>)
 8007c76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c78:	4b42      	ldr	r3, [pc, #264]	; (8007d84 <pvPortMalloc+0x18c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c7e:	e004      	b.n	8007c8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d903      	bls.n	8007c9c <pvPortMalloc+0xa4>
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1f1      	bne.n	8007c80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c9c:	4b36      	ldr	r3, [pc, #216]	; (8007d78 <pvPortMalloc+0x180>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d050      	beq.n	8007d48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2208      	movs	r2, #8
 8007cac:	4413      	add	r3, r2
 8007cae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	1ad2      	subs	r2, r2, r3
 8007cc0:	2308      	movs	r3, #8
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d91f      	bls.n	8007d08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4413      	add	r3, r2
 8007cce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <pvPortMalloc+0xf8>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	613b      	str	r3, [r7, #16]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	1ad2      	subs	r2, r2, r3
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d02:	69b8      	ldr	r0, [r7, #24]
 8007d04:	f000 f908 	bl	8007f18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d08:	4b1d      	ldr	r3, [pc, #116]	; (8007d80 <pvPortMalloc+0x188>)
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	4a1b      	ldr	r2, [pc, #108]	; (8007d80 <pvPortMalloc+0x188>)
 8007d14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d16:	4b1a      	ldr	r3, [pc, #104]	; (8007d80 <pvPortMalloc+0x188>)
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	4b1b      	ldr	r3, [pc, #108]	; (8007d88 <pvPortMalloc+0x190>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d203      	bcs.n	8007d2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d22:	4b17      	ldr	r3, [pc, #92]	; (8007d80 <pvPortMalloc+0x188>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a18      	ldr	r2, [pc, #96]	; (8007d88 <pvPortMalloc+0x190>)
 8007d28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	4b13      	ldr	r3, [pc, #76]	; (8007d7c <pvPortMalloc+0x184>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	431a      	orrs	r2, r3
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d3e:	4b13      	ldr	r3, [pc, #76]	; (8007d8c <pvPortMalloc+0x194>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3301      	adds	r3, #1
 8007d44:	4a11      	ldr	r2, [pc, #68]	; (8007d8c <pvPortMalloc+0x194>)
 8007d46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d48:	f7fe fbf0 	bl	800652c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	f003 0307 	and.w	r3, r3, #7
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <pvPortMalloc+0x174>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	60fb      	str	r3, [r7, #12]
}
 8007d68:	bf00      	nop
 8007d6a:	e7fe      	b.n	8007d6a <pvPortMalloc+0x172>
	return pvReturn;
 8007d6c:	69fb      	ldr	r3, [r7, #28]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3728      	adds	r7, #40	; 0x28
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	20002234 	.word	0x20002234
 8007d7c:	20002248 	.word	0x20002248
 8007d80:	20002238 	.word	0x20002238
 8007d84:	2000222c 	.word	0x2000222c
 8007d88:	2000223c 	.word	0x2000223c
 8007d8c:	20002240 	.word	0x20002240

08007d90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d04d      	beq.n	8007e3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007da2:	2308      	movs	r3, #8
 8007da4:	425b      	negs	r3, r3
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	4413      	add	r3, r2
 8007daa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	4b24      	ldr	r3, [pc, #144]	; (8007e48 <vPortFree+0xb8>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4013      	ands	r3, r2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <vPortFree+0x44>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	60fb      	str	r3, [r7, #12]
}
 8007dd0:	bf00      	nop
 8007dd2:	e7fe      	b.n	8007dd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00a      	beq.n	8007df2 <vPortFree+0x62>
	__asm volatile
 8007ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de0:	f383 8811 	msr	BASEPRI, r3
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	60bb      	str	r3, [r7, #8]
}
 8007dee:	bf00      	nop
 8007df0:	e7fe      	b.n	8007df0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	4b14      	ldr	r3, [pc, #80]	; (8007e48 <vPortFree+0xb8>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d01e      	beq.n	8007e3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d11a      	bne.n	8007e3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	4b0e      	ldr	r3, [pc, #56]	; (8007e48 <vPortFree+0xb8>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	43db      	mvns	r3, r3
 8007e12:	401a      	ands	r2, r3
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e18:	f7fe fb7a 	bl	8006510 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	4b0a      	ldr	r3, [pc, #40]	; (8007e4c <vPortFree+0xbc>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4413      	add	r3, r2
 8007e26:	4a09      	ldr	r2, [pc, #36]	; (8007e4c <vPortFree+0xbc>)
 8007e28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e2a:	6938      	ldr	r0, [r7, #16]
 8007e2c:	f000 f874 	bl	8007f18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e30:	4b07      	ldr	r3, [pc, #28]	; (8007e50 <vPortFree+0xc0>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3301      	adds	r3, #1
 8007e36:	4a06      	ldr	r2, [pc, #24]	; (8007e50 <vPortFree+0xc0>)
 8007e38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e3a:	f7fe fb77 	bl	800652c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e3e:	bf00      	nop
 8007e40:	3718      	adds	r7, #24
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20002248 	.word	0x20002248
 8007e4c:	20002238 	.word	0x20002238
 8007e50:	20002244 	.word	0x20002244

08007e54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007e5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e60:	4b27      	ldr	r3, [pc, #156]	; (8007f00 <prvHeapInit+0xac>)
 8007e62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00c      	beq.n	8007e88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	3307      	adds	r3, #7
 8007e72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0307 	bic.w	r3, r3, #7
 8007e7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	4a1f      	ldr	r2, [pc, #124]	; (8007f00 <prvHeapInit+0xac>)
 8007e84:	4413      	add	r3, r2
 8007e86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e8c:	4a1d      	ldr	r2, [pc, #116]	; (8007f04 <prvHeapInit+0xb0>)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e92:	4b1c      	ldr	r3, [pc, #112]	; (8007f04 <prvHeapInit+0xb0>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ea0:	2208      	movs	r2, #8
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	1a9b      	subs	r3, r3, r2
 8007ea6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f023 0307 	bic.w	r3, r3, #7
 8007eae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4a15      	ldr	r2, [pc, #84]	; (8007f08 <prvHeapInit+0xb4>)
 8007eb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007eb6:	4b14      	ldr	r3, [pc, #80]	; (8007f08 <prvHeapInit+0xb4>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ebe:	4b12      	ldr	r3, [pc, #72]	; (8007f08 <prvHeapInit+0xb4>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	1ad2      	subs	r2, r2, r3
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ed4:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <prvHeapInit+0xb4>)
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	4a0a      	ldr	r2, [pc, #40]	; (8007f0c <prvHeapInit+0xb8>)
 8007ee2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	4a09      	ldr	r2, [pc, #36]	; (8007f10 <prvHeapInit+0xbc>)
 8007eea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007eec:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <prvHeapInit+0xc0>)
 8007eee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ef2:	601a      	str	r2, [r3, #0]
}
 8007ef4:	bf00      	nop
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	20001674 	.word	0x20001674
 8007f04:	2000222c 	.word	0x2000222c
 8007f08:	20002234 	.word	0x20002234
 8007f0c:	2000223c 	.word	0x2000223c
 8007f10:	20002238 	.word	0x20002238
 8007f14:	20002248 	.word	0x20002248

08007f18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f20:	4b28      	ldr	r3, [pc, #160]	; (8007fc4 <prvInsertBlockIntoFreeList+0xac>)
 8007f22:	60fb      	str	r3, [r7, #12]
 8007f24:	e002      	b.n	8007f2c <prvInsertBlockIntoFreeList+0x14>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d8f7      	bhi.n	8007f26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	4413      	add	r3, r2
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d108      	bne.n	8007f5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	441a      	add	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	441a      	add	r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d118      	bne.n	8007fa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	4b15      	ldr	r3, [pc, #84]	; (8007fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d00d      	beq.n	8007f96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685a      	ldr	r2, [r3, #4]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	441a      	add	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	e008      	b.n	8007fa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f96:	4b0c      	ldr	r3, [pc, #48]	; (8007fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	601a      	str	r2, [r3, #0]
 8007f9e:	e003      	b.n	8007fa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d002      	beq.n	8007fb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fb6:	bf00      	nop
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	2000222c 	.word	0x2000222c
 8007fc8:	20002234 	.word	0x20002234

08007fcc <__libc_init_array>:
 8007fcc:	b570      	push	{r4, r5, r6, lr}
 8007fce:	4d0d      	ldr	r5, [pc, #52]	; (8008004 <__libc_init_array+0x38>)
 8007fd0:	4c0d      	ldr	r4, [pc, #52]	; (8008008 <__libc_init_array+0x3c>)
 8007fd2:	1b64      	subs	r4, r4, r5
 8007fd4:	10a4      	asrs	r4, r4, #2
 8007fd6:	2600      	movs	r6, #0
 8007fd8:	42a6      	cmp	r6, r4
 8007fda:	d109      	bne.n	8007ff0 <__libc_init_array+0x24>
 8007fdc:	4d0b      	ldr	r5, [pc, #44]	; (800800c <__libc_init_array+0x40>)
 8007fde:	4c0c      	ldr	r4, [pc, #48]	; (8008010 <__libc_init_array+0x44>)
 8007fe0:	f000 f8f2 	bl	80081c8 <_init>
 8007fe4:	1b64      	subs	r4, r4, r5
 8007fe6:	10a4      	asrs	r4, r4, #2
 8007fe8:	2600      	movs	r6, #0
 8007fea:	42a6      	cmp	r6, r4
 8007fec:	d105      	bne.n	8007ffa <__libc_init_array+0x2e>
 8007fee:	bd70      	pop	{r4, r5, r6, pc}
 8007ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ff4:	4798      	blx	r3
 8007ff6:	3601      	adds	r6, #1
 8007ff8:	e7ee      	b.n	8007fd8 <__libc_init_array+0xc>
 8007ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ffe:	4798      	blx	r3
 8008000:	3601      	adds	r6, #1
 8008002:	e7f2      	b.n	8007fea <__libc_init_array+0x1e>
 8008004:	08008348 	.word	0x08008348
 8008008:	08008348 	.word	0x08008348
 800800c:	08008348 	.word	0x08008348
 8008010:	0800834c 	.word	0x0800834c

08008014 <__retarget_lock_acquire_recursive>:
 8008014:	4770      	bx	lr

08008016 <__retarget_lock_release_recursive>:
 8008016:	4770      	bx	lr

08008018 <memcpy>:
 8008018:	440a      	add	r2, r1
 800801a:	4291      	cmp	r1, r2
 800801c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008020:	d100      	bne.n	8008024 <memcpy+0xc>
 8008022:	4770      	bx	lr
 8008024:	b510      	push	{r4, lr}
 8008026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800802a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800802e:	4291      	cmp	r1, r2
 8008030:	d1f9      	bne.n	8008026 <memcpy+0xe>
 8008032:	bd10      	pop	{r4, pc}

08008034 <memset>:
 8008034:	4402      	add	r2, r0
 8008036:	4603      	mov	r3, r0
 8008038:	4293      	cmp	r3, r2
 800803a:	d100      	bne.n	800803e <memset+0xa>
 800803c:	4770      	bx	lr
 800803e:	f803 1b01 	strb.w	r1, [r3], #1
 8008042:	e7f9      	b.n	8008038 <memset+0x4>

08008044 <cleanup_glue>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	460c      	mov	r4, r1
 8008048:	6809      	ldr	r1, [r1, #0]
 800804a:	4605      	mov	r5, r0
 800804c:	b109      	cbz	r1, 8008052 <cleanup_glue+0xe>
 800804e:	f7ff fff9 	bl	8008044 <cleanup_glue>
 8008052:	4621      	mov	r1, r4
 8008054:	4628      	mov	r0, r5
 8008056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800805a:	f000 b869 	b.w	8008130 <_free_r>
	...

08008060 <_reclaim_reent>:
 8008060:	4b2c      	ldr	r3, [pc, #176]	; (8008114 <_reclaim_reent+0xb4>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4283      	cmp	r3, r0
 8008066:	b570      	push	{r4, r5, r6, lr}
 8008068:	4604      	mov	r4, r0
 800806a:	d051      	beq.n	8008110 <_reclaim_reent+0xb0>
 800806c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800806e:	b143      	cbz	r3, 8008082 <_reclaim_reent+0x22>
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d14a      	bne.n	800810c <_reclaim_reent+0xac>
 8008076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008078:	6819      	ldr	r1, [r3, #0]
 800807a:	b111      	cbz	r1, 8008082 <_reclaim_reent+0x22>
 800807c:	4620      	mov	r0, r4
 800807e:	f000 f857 	bl	8008130 <_free_r>
 8008082:	6961      	ldr	r1, [r4, #20]
 8008084:	b111      	cbz	r1, 800808c <_reclaim_reent+0x2c>
 8008086:	4620      	mov	r0, r4
 8008088:	f000 f852 	bl	8008130 <_free_r>
 800808c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800808e:	b111      	cbz	r1, 8008096 <_reclaim_reent+0x36>
 8008090:	4620      	mov	r0, r4
 8008092:	f000 f84d 	bl	8008130 <_free_r>
 8008096:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008098:	b111      	cbz	r1, 80080a0 <_reclaim_reent+0x40>
 800809a:	4620      	mov	r0, r4
 800809c:	f000 f848 	bl	8008130 <_free_r>
 80080a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80080a2:	b111      	cbz	r1, 80080aa <_reclaim_reent+0x4a>
 80080a4:	4620      	mov	r0, r4
 80080a6:	f000 f843 	bl	8008130 <_free_r>
 80080aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80080ac:	b111      	cbz	r1, 80080b4 <_reclaim_reent+0x54>
 80080ae:	4620      	mov	r0, r4
 80080b0:	f000 f83e 	bl	8008130 <_free_r>
 80080b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80080b6:	b111      	cbz	r1, 80080be <_reclaim_reent+0x5e>
 80080b8:	4620      	mov	r0, r4
 80080ba:	f000 f839 	bl	8008130 <_free_r>
 80080be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80080c0:	b111      	cbz	r1, 80080c8 <_reclaim_reent+0x68>
 80080c2:	4620      	mov	r0, r4
 80080c4:	f000 f834 	bl	8008130 <_free_r>
 80080c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080ca:	b111      	cbz	r1, 80080d2 <_reclaim_reent+0x72>
 80080cc:	4620      	mov	r0, r4
 80080ce:	f000 f82f 	bl	8008130 <_free_r>
 80080d2:	69a3      	ldr	r3, [r4, #24]
 80080d4:	b1e3      	cbz	r3, 8008110 <_reclaim_reent+0xb0>
 80080d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80080d8:	4620      	mov	r0, r4
 80080da:	4798      	blx	r3
 80080dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80080de:	b1b9      	cbz	r1, 8008110 <_reclaim_reent+0xb0>
 80080e0:	4620      	mov	r0, r4
 80080e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80080e6:	f7ff bfad 	b.w	8008044 <cleanup_glue>
 80080ea:	5949      	ldr	r1, [r1, r5]
 80080ec:	b941      	cbnz	r1, 8008100 <_reclaim_reent+0xa0>
 80080ee:	3504      	adds	r5, #4
 80080f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080f2:	2d80      	cmp	r5, #128	; 0x80
 80080f4:	68d9      	ldr	r1, [r3, #12]
 80080f6:	d1f8      	bne.n	80080ea <_reclaim_reent+0x8a>
 80080f8:	4620      	mov	r0, r4
 80080fa:	f000 f819 	bl	8008130 <_free_r>
 80080fe:	e7ba      	b.n	8008076 <_reclaim_reent+0x16>
 8008100:	680e      	ldr	r6, [r1, #0]
 8008102:	4620      	mov	r0, r4
 8008104:	f000 f814 	bl	8008130 <_free_r>
 8008108:	4631      	mov	r1, r6
 800810a:	e7ef      	b.n	80080ec <_reclaim_reent+0x8c>
 800810c:	2500      	movs	r5, #0
 800810e:	e7ef      	b.n	80080f0 <_reclaim_reent+0x90>
 8008110:	bd70      	pop	{r4, r5, r6, pc}
 8008112:	bf00      	nop
 8008114:	20000010 	.word	0x20000010

08008118 <__malloc_lock>:
 8008118:	4801      	ldr	r0, [pc, #4]	; (8008120 <__malloc_lock+0x8>)
 800811a:	f7ff bf7b 	b.w	8008014 <__retarget_lock_acquire_recursive>
 800811e:	bf00      	nop
 8008120:	2000224c 	.word	0x2000224c

08008124 <__malloc_unlock>:
 8008124:	4801      	ldr	r0, [pc, #4]	; (800812c <__malloc_unlock+0x8>)
 8008126:	f7ff bf76 	b.w	8008016 <__retarget_lock_release_recursive>
 800812a:	bf00      	nop
 800812c:	2000224c 	.word	0x2000224c

08008130 <_free_r>:
 8008130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008132:	2900      	cmp	r1, #0
 8008134:	d044      	beq.n	80081c0 <_free_r+0x90>
 8008136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800813a:	9001      	str	r0, [sp, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	f1a1 0404 	sub.w	r4, r1, #4
 8008142:	bfb8      	it	lt
 8008144:	18e4      	addlt	r4, r4, r3
 8008146:	f7ff ffe7 	bl	8008118 <__malloc_lock>
 800814a:	4a1e      	ldr	r2, [pc, #120]	; (80081c4 <_free_r+0x94>)
 800814c:	9801      	ldr	r0, [sp, #4]
 800814e:	6813      	ldr	r3, [r2, #0]
 8008150:	b933      	cbnz	r3, 8008160 <_free_r+0x30>
 8008152:	6063      	str	r3, [r4, #4]
 8008154:	6014      	str	r4, [r2, #0]
 8008156:	b003      	add	sp, #12
 8008158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800815c:	f7ff bfe2 	b.w	8008124 <__malloc_unlock>
 8008160:	42a3      	cmp	r3, r4
 8008162:	d908      	bls.n	8008176 <_free_r+0x46>
 8008164:	6825      	ldr	r5, [r4, #0]
 8008166:	1961      	adds	r1, r4, r5
 8008168:	428b      	cmp	r3, r1
 800816a:	bf01      	itttt	eq
 800816c:	6819      	ldreq	r1, [r3, #0]
 800816e:	685b      	ldreq	r3, [r3, #4]
 8008170:	1949      	addeq	r1, r1, r5
 8008172:	6021      	streq	r1, [r4, #0]
 8008174:	e7ed      	b.n	8008152 <_free_r+0x22>
 8008176:	461a      	mov	r2, r3
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	b10b      	cbz	r3, 8008180 <_free_r+0x50>
 800817c:	42a3      	cmp	r3, r4
 800817e:	d9fa      	bls.n	8008176 <_free_r+0x46>
 8008180:	6811      	ldr	r1, [r2, #0]
 8008182:	1855      	adds	r5, r2, r1
 8008184:	42a5      	cmp	r5, r4
 8008186:	d10b      	bne.n	80081a0 <_free_r+0x70>
 8008188:	6824      	ldr	r4, [r4, #0]
 800818a:	4421      	add	r1, r4
 800818c:	1854      	adds	r4, r2, r1
 800818e:	42a3      	cmp	r3, r4
 8008190:	6011      	str	r1, [r2, #0]
 8008192:	d1e0      	bne.n	8008156 <_free_r+0x26>
 8008194:	681c      	ldr	r4, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	6053      	str	r3, [r2, #4]
 800819a:	4421      	add	r1, r4
 800819c:	6011      	str	r1, [r2, #0]
 800819e:	e7da      	b.n	8008156 <_free_r+0x26>
 80081a0:	d902      	bls.n	80081a8 <_free_r+0x78>
 80081a2:	230c      	movs	r3, #12
 80081a4:	6003      	str	r3, [r0, #0]
 80081a6:	e7d6      	b.n	8008156 <_free_r+0x26>
 80081a8:	6825      	ldr	r5, [r4, #0]
 80081aa:	1961      	adds	r1, r4, r5
 80081ac:	428b      	cmp	r3, r1
 80081ae:	bf04      	itt	eq
 80081b0:	6819      	ldreq	r1, [r3, #0]
 80081b2:	685b      	ldreq	r3, [r3, #4]
 80081b4:	6063      	str	r3, [r4, #4]
 80081b6:	bf04      	itt	eq
 80081b8:	1949      	addeq	r1, r1, r5
 80081ba:	6021      	streq	r1, [r4, #0]
 80081bc:	6054      	str	r4, [r2, #4]
 80081be:	e7ca      	b.n	8008156 <_free_r+0x26>
 80081c0:	b003      	add	sp, #12
 80081c2:	bd30      	pop	{r4, r5, pc}
 80081c4:	20002250 	.word	0x20002250

080081c8 <_init>:
 80081c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ca:	bf00      	nop
 80081cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ce:	bc08      	pop	{r3}
 80081d0:	469e      	mov	lr, r3
 80081d2:	4770      	bx	lr

080081d4 <_fini>:
 80081d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d6:	bf00      	nop
 80081d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081da:	bc08      	pop	{r3}
 80081dc:	469e      	mov	lr, r3
 80081de:	4770      	bx	lr
